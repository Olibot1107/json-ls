{
  "abap": "<languages.IMonarchLanguage>{\n\tdefaultToken: 'invalid',\n\tignoreCase: true,\n\ttokenPostfix: '.abap',\n\n\tkeywords: [\n\t\t'abap-source',\n\t\t'abbreviated',\n\t\t'abstract',\n\t\t'accept',\n\t\t'accepting',\n\t\t'according',\n\t\t'activation',\n\t\t'actual',\n\t\t'add',\n\t\t'add-corresponding',\n\t\t'adjacent',\n\t\t'after',\n\t\t'alias',\n\t\t'aliases',\n\t\t'align',\n\t\t'all',\n\t\t'allocate',\n\t\t'alpha',\n\t\t'analysis',\n\t\t'analyzer',\n\t\t'and', // also an operator\n\t\t'append',\n\t\t'appendage',\n\t\t'appending',\n\t\t'application',\n\t\t'archive',\n\t\t'area',\n\t\t'arithmetic',\n\t\t'as',\n\t\t'ascending',\n\t\t'aspect',\n\t\t'assert',\n\t\t'assign',\n\t\t'assigned',\n\t\t'assigning',\n\t\t'association',\n\t\t'asynchronous',\n\t\t'at',\n\t\t'attributes',\n\t\t'authority',\n\t\t'authority-check',\n\t\t'avg',\n\t\t'back',\n\t\t'background',\n\t\t'backup',\n\t\t'backward',\n\t\t'badi',\n\t\t'base',\n\t\t'before',\n\t\t'begin',\n\t\t'between', // also an operator\n\t\t'big',\n\t\t'binary',\n\t\t'bintohex',\n\t\t'bit',\n\t\t'black',\n\t\t'blank',\n\t\t'blanks',\n\t\t'blob',\n\t\t'block',\n\t\t'blocks',\n\t\t'blue',\n\t\t'bound',\n\t\t'boundaries',\n\t\t'bounds',\n\t\t'boxed',\n\t\t'break-point',\n\t\t'buffer',\n\t\t'by',\n\t\t'bypassing',\n\t\t'byte',\n\t\t'byte-order',\n\t\t'call',\n\t\t'calling',\n\t\t'case',\n\t\t'cast',\n\t\t'casting',\n\t\t'catch',\n\t\t'center',\n\t\t'centered',\n\t\t'chain',\n\t\t'chain-input',\n\t\t'chain-request',\n\t\t'change',\n\t\t'changing',\n\t\t'channels',\n\t\t'character',\n\t\t'char-to-hex',\n\t\t'check',\n\t\t'checkbox',\n\t\t'ci_',\n\t\t'circular',\n\t\t'class',\n\t\t'class-coding',\n\t\t'class-data',\n\t\t'class-events',\n\t\t'class-methods',\n\t\t'class-pool',\n\t\t'cleanup',\n\t\t'clear',\n\t\t'client',\n\t\t'clob',\n\t\t'clock',\n\t\t'close',\n\t\t'coalesce',\n\t\t'code',\n\t\t'coding',\n\t\t'col_background',\n\t\t'col_group',\n\t\t'col_heading',\n\t\t'col_key',\n\t\t'col_negative',\n\t\t'col_normal',\n\t\t'col_positive',\n\t\t'col_total',\n\t\t'collect',\n\t\t'color',\n\t\t'column',\n\t\t'columns',\n\t\t'comment',\n\t\t'comments',\n\t\t'commit',\n\t\t'common',\n\t\t'communication',\n\t\t'comparing',\n\t\t'component',\n\t\t'components',\n\t\t'compression',\n\t\t'compute',\n\t\t'concat',\n\t\t'concat_with_space',\n\t\t'concatenate',\n\t\t'cond',\n\t\t'condense', // also a built-in\n\t\t'condition',\n\t\t'connect',\n\t\t'connection',\n\t\t'constants',\n\t\t'context',\n\t\t'contexts',\n\t\t'continue',\n\t\t'control',\n\t\t'controls',\n\t\t'conv',\n\t\t'conversion',\n\t\t'convert',\n\t\t'copies',\n\t\t'copy',\n\t\t'corresponding',\n\t\t'country',\n\t\t'cover',\n\t\t'cpi',\n\t\t'create',\n\t\t'creating',\n\t\t'critical',\n\t\t'currency',\n\t\t'currency_conversion',\n\t\t'current',\n\t\t'cursor',\n\t\t'cursor-selection',\n\t\t'customer',\n\t\t'customer-function',\n\t\t'dangerous',\n\t\t'data',\n\t\t'database',\n\t\t'datainfo',\n\t\t'dataset',\n\t\t'date',\n\t\t'dats_add_days',\n\t\t'dats_add_months',\n\t\t'dats_days_between',\n\t\t'dats_is_valid',\n\t\t'daylight',\n\t\t'dd/mm/yy',\n\t\t'dd/mm/yyyy',\n\t\t'ddmmyy',\n\t\t'deallocate',\n\t\t'decimal_shift',\n\t\t'decimals',\n\t\t'declarations',\n\t\t'deep',\n\t\t'default',\n\t\t'deferred',\n\t\t'define',\n\t\t'defining',\n\t\t'definition',\n\t\t'delete',\n\t\t'deleting',\n\t\t'demand',\n\t\t'department',\n\t\t'descending',\n\t\t'describe',\n\t\t'destination',\n\t\t'detail',\n\t\t'dialog',\n\t\t'directory',\n\t\t'disconnect',\n\t\t'display',\n\t\t'display-mode',\n\t\t'distinct',\n\t\t'divide',\n\t\t'divide-corresponding',\n\t\t'division',\n\t\t'do',\n\t\t'dummy',\n\t\t'duplicate',\n\t\t'duplicates',\n\t\t'duration',\n\t\t'during',\n\t\t'dynamic',\n\t\t'dynpro',\n\t\t'edit',\n\t\t'editor-call',\n\t\t'else',\n\t\t'elseif',\n\t\t'empty',\n\t\t'enabled',\n\t\t'enabling',\n\t\t'encoding',\n\t\t'end',\n\t\t'endat',\n\t\t'endcase',\n\t\t'endcatch',\n\t\t'endchain',\n\t\t'endclass',\n\t\t'enddo',\n\t\t'endenhancement',\n\t\t'end-enhancement-section',\n\t\t'endexec',\n\t\t'endform',\n\t\t'endfunction',\n\t\t'endian',\n\t\t'endif',\n\t\t'ending',\n\t\t'endinterface',\n\t\t'end-lines',\n\t\t'endloop',\n\t\t'endmethod',\n\t\t'endmodule',\n\t\t'end-of-definition',\n\t\t'end-of-editing',\n\t\t'end-of-file',\n\t\t'end-of-page',\n\t\t'end-of-selection',\n\t\t'endon',\n\t\t'endprovide',\n\t\t'endselect',\n\t\t'end-test-injection',\n\t\t'end-test-seam',\n\t\t'endtry',\n\t\t'endwhile',\n\t\t'endwith',\n\t\t'engineering',\n\t\t'enhancement',\n\t\t'enhancement-point',\n\t\t'enhancements',\n\t\t'enhancement-section',\n\t\t'entries',\n\t\t'entry',\n\t\t'enum',\n\t\t'environment',\n\t\t'equiv', // also an operator\n\t\t'errormessage',\n\t\t'errors',\n\t\t'escaping',\n\t\t'event',\n\t\t'events',\n\t\t'exact',\n\t\t'except',\n\t\t'exception',\n\t\t'exceptions',\n\t\t'exception-table',\n\t\t'exclude',\n\t\t'excluding',\n\t\t'exec',\n\t\t'execute',\n\t\t'exists',\n\t\t'exit',\n\t\t'exit-command',\n\t\t'expand',\n\t\t'expanding',\n\t\t'expiration',\n\t\t'explicit',\n\t\t'exponent',\n\t\t'export',\n\t\t'exporting',\n\t\t'extend',\n\t\t'extended',\n\t\t'extension',\n\t\t'extract',\n\t\t'fail',\n\t\t'fetch',\n\t\t'field',\n\t\t'field-groups',\n\t\t'fields',\n\t\t'field-symbol',\n\t\t'field-symbols',\n\t\t'file',\n\t\t'filter',\n\t\t'filters',\n\t\t'filter-table',\n\t\t'final',\n\t\t'find', // also a built-in\n\t\t'first',\n\t\t'first-line',\n\t\t'fixed-point',\n\t\t'fkeq',\n\t\t'fkge',\n\t\t'flush',\n\t\t'font',\n\t\t'for',\n\t\t'form',\n\t\t'format',\n\t\t'forward',\n\t\t'found',\n\t\t'frame',\n\t\t'frames',\n\t\t'free',\n\t\t'friends',\n\t\t'from',\n\t\t'function',\n\t\t'functionality',\n\t\t'function-pool',\n\t\t'further',\n\t\t'gaps',\n\t\t'generate',\n\t\t'get',\n\t\t'giving',\n\t\t'gkeq',\n\t\t'gkge',\n\t\t'global',\n\t\t'grant',\n\t\t'green',\n\t\t'group',\n\t\t'groups',\n\t\t'handle',\n\t\t'handler',\n\t\t'harmless',\n\t\t'hashed', // also a table type\n\t\t'having',\n\t\t'hdb',\n\t\t'header',\n\t\t'headers',\n\t\t'heading',\n\t\t'head-lines',\n\t\t'help-id',\n\t\t'help-request',\n\t\t'hextobin',\n\t\t'hide',\n\t\t'high',\n\t\t'hint',\n\t\t'hold',\n\t\t'hotspot',\n\t\t'icon',\n\t\t'id',\n\t\t'identification',\n\t\t'identifier',\n\t\t'ids',\n\t\t'if',\n\t\t'ignore',\n\t\t'ignoring',\n\t\t'immediately',\n\t\t'implementation',\n\t\t'implementations',\n\t\t'implemented',\n\t\t'implicit',\n\t\t'import',\n\t\t'importing',\n\t\t'in', // also an operator\n\t\t'inactive',\n\t\t'incl',\n\t\t'include',\n\t\t'includes',\n\t\t'including',\n\t\t'increment',\n\t\t'index', // also a table type\n\t\t'index-line',\n\t\t'infotypes',\n\t\t'inheriting',\n\t\t'init',\n\t\t'initial',\n\t\t'initialization',\n\t\t'inner',\n\t\t'inout',\n\t\t'input',\n\t\t'insert', // also a built-in\n\t\t'instance',\n\t\t'instances',\n\t\t'instr',\n\t\t'intensified',\n\t\t'interface',\n\t\t'interface-pool',\n\t\t'interfaces',\n\t\t'internal',\n\t\t'intervals',\n\t\t'into',\n\t\t'inverse',\n\t\t'inverted-date',\n\t\t'is',\n\t\t'iso',\n\t\t'job',\n\t\t'join',\n\t\t'keep',\n\t\t'keeping',\n\t\t'kernel',\n\t\t'key',\n\t\t'keys',\n\t\t'keywords',\n\t\t'kind',\n\t\t'language',\n\t\t'last',\n\t\t'late',\n\t\t'layout',\n\t\t'leading',\n\t\t'leave',\n\t\t'left',\n\t\t'left-justified',\n\t\t'leftplus',\n\t\t'leftspace',\n\t\t'legacy',\n\t\t'length',\n\t\t'let',\n\t\t'level',\n\t\t'levels',\n\t\t'like',\n\t\t'line',\n\t\t'lines', // also a built-in\n\t\t'line-count',\n\t\t'linefeed',\n\t\t'line-selection',\n\t\t'line-size',\n\t\t'list',\n\t\t'listbox',\n\t\t'list-processing',\n\t\t'little',\n\t\t'llang',\n\t\t'load',\n\t\t'load-of-program',\n\t\t'lob',\n\t\t'local',\n\t\t'locale',\n\t\t'locator',\n\t\t'logfile',\n\t\t'logical',\n\t\t'log-point',\n\t\t'long',\n\t\t'loop',\n\t\t'low',\n\t\t'lower',\n\t\t'lpad',\n\t\t'lpi',\n\t\t'ltrim',\n\t\t'mail',\n\t\t'main',\n\t\t'major-id',\n\t\t'mapping',\n\t\t'margin',\n\t\t'mark',\n\t\t'mask',\n\t\t'match', // also a built-in\n\t\t'matchcode',\n\t\t'max',\n\t\t'maximum',\n\t\t'medium',\n\t\t'members',\n\t\t'memory',\n\t\t'mesh',\n\t\t'message',\n\t\t'message-id',\n\t\t'messages',\n\t\t'messaging',\n\t\t'method',\n\t\t'methods',\n\t\t'min',\n\t\t'minimum',\n\t\t'minor-id',\n\t\t'mm/dd/yy',\n\t\t'mm/dd/yyyy',\n\t\t'mmddyy',\n\t\t'mode',\n\t\t'modif',\n\t\t'modifier',\n\t\t'modify',\n\t\t'module',\n\t\t'move',\n\t\t'move-corresponding',\n\t\t'multiply',\n\t\t'multiply-corresponding',\n\t\t'name',\n\t\t'nametab',\n\t\t'native',\n\t\t'nested',\n\t\t'nesting',\n\t\t'new',\n\t\t'new-line',\n\t\t'new-page',\n\t\t'new-section',\n\t\t'next',\n\t\t'no',\n\t\t'no-display',\n\t\t'no-extension',\n\t\t'no-gap',\n\t\t'no-gaps',\n\t\t'no-grouping',\n\t\t'no-heading',\n\t\t'no-scrolling',\n\t\t'no-sign',\n\t\t'no-title',\n\t\t'no-topofpage',\n\t\t'no-zero',\n\t\t'node',\n\t\t'nodes',\n\t\t'non-unicode',\n\t\t'non-unique',\n\t\t'not', // also an operator\n\t\t'null',\n\t\t'number',\n\t\t'object', // also a data type\n\t\t'objects',\n\t\t'obligatory',\n\t\t'occurrence',\n\t\t'occurrences',\n\t\t'occurs',\n\t\t'of',\n\t\t'off',\n\t\t'offset',\n\t\t'ole',\n\t\t'on',\n\t\t'only',\n\t\t'open',\n\t\t'option',\n\t\t'optional',\n\t\t'options',\n\t\t'or', // also an operator\n\t\t'order',\n\t\t'other',\n\t\t'others',\n\t\t'out',\n\t\t'outer',\n\t\t'output',\n\t\t'output-length',\n\t\t'overflow',\n\t\t'overlay',\n\t\t'pack',\n\t\t'package',\n\t\t'pad',\n\t\t'padding',\n\t\t'page',\n\t\t'pages',\n\t\t'parameter',\n\t\t'parameters',\n\t\t'parameter-table',\n\t\t'part',\n\t\t'partially',\n\t\t'pattern',\n\t\t'percentage',\n\t\t'perform',\n\t\t'performing',\n\t\t'person',\n\t\t'pf1',\n\t\t'pf10',\n\t\t'pf11',\n\t\t'pf12',\n\t\t'pf13',\n\t\t'pf14',\n\t\t'pf15',\n\t\t'pf2',\n\t\t'pf3',\n\t\t'pf4',\n\t\t'pf5',\n\t\t'pf6',\n\t\t'pf7',\n\t\t'pf8',\n\t\t'pf9',\n\t\t'pf-status',\n\t\t'pink',\n\t\t'places',\n\t\t'pool',\n\t\t'pos_high',\n\t\t'pos_low',\n\t\t'position',\n\t\t'pragmas',\n\t\t'precompiled',\n\t\t'preferred',\n\t\t'preserving',\n\t\t'primary',\n\t\t'print',\n\t\t'print-control',\n\t\t'priority',\n\t\t'private',\n\t\t'procedure',\n\t\t'process',\n\t\t'program',\n\t\t'property',\n\t\t'protected',\n\t\t'provide',\n\t\t'public',\n\t\t'push',\n\t\t'pushbutton',\n\t\t'put',\n\t\t'queue-only',\n\t\t'quickinfo',\n\t\t'radiobutton',\n\t\t'raise',\n\t\t'raising',\n\t\t'range',\n\t\t'ranges',\n\t\t'read',\n\t\t'reader',\n\t\t'read-only',\n\t\t'receive',\n\t\t'received',\n\t\t'receiver',\n\t\t'receiving',\n\t\t'red',\n\t\t'redefinition',\n\t\t'reduce',\n\t\t'reduced',\n\t\t'ref',\n\t\t'reference',\n\t\t'refresh',\n\t\t'regex',\n\t\t'reject',\n\t\t'remote',\n\t\t'renaming',\n\t\t'replace', // also a built-in\n\t\t'replacement',\n\t\t'replacing',\n\t\t'report',\n\t\t'request',\n\t\t'requested',\n\t\t'reserve',\n\t\t'reset',\n\t\t'resolution',\n\t\t'respecting',\n\t\t'responsible',\n\t\t'result',\n\t\t'results',\n\t\t'resumable',\n\t\t'resume',\n\t\t'retry',\n\t\t'return',\n\t\t'returncode',\n\t\t'returning',\n\t\t'returns',\n\t\t'right',\n\t\t'right-justified',\n\t\t'rightplus',\n\t\t'rightspace',\n\t\t'risk',\n\t\t'rmc_communication_failure',\n\t\t'rmc_invalid_status',\n\t\t'rmc_system_failure',\n\t\t'role',\n\t\t'rollback',\n\t\t'rows',\n\t\t'rpad',\n\t\t'rtrim',\n\t\t'run',\n\t\t'sap',\n\t\t'sap-spool',\n\t\t'saving',\n\t\t'scale_preserving',\n\t\t'scale_preserving_scientific',\n\t\t'scan',\n\t\t'scientific',\n\t\t'scientific_with_leading_zero',\n\t\t'scroll',\n\t\t'scroll-boundary',\n\t\t'scrolling',\n\t\t'search',\n\t\t'secondary',\n\t\t'seconds',\n\t\t'section',\n\t\t'select',\n\t\t'selection',\n\t\t'selections',\n\t\t'selection-screen',\n\t\t'selection-set',\n\t\t'selection-sets',\n\t\t'selection-table',\n\t\t'select-options',\n\t\t'send',\n\t\t'separate',\n\t\t'separated',\n\t\t'set',\n\t\t'shared',\n\t\t'shift',\n\t\t'short',\n\t\t'shortdump-id',\n\t\t'sign_as_postfix',\n\t\t'single',\n\t\t'size',\n\t\t'skip',\n\t\t'skipping',\n\t\t'smart',\n\t\t'some',\n\t\t'sort',\n\t\t'sortable',\n\t\t'sorted', // also a table type\n\t\t'source',\n\t\t'specified',\n\t\t'split',\n\t\t'spool',\n\t\t'spots',\n\t\t'sql',\n\t\t'sqlscript',\n\t\t'stable',\n\t\t'stamp',\n\t\t'standard', // also a table type\n\t\t'starting',\n\t\t'start-of-editing',\n\t\t'start-of-selection',\n\t\t'state',\n\t\t'statement',\n\t\t'statements',\n\t\t'static',\n\t\t'statics',\n\t\t'statusinfo',\n\t\t'step-loop',\n\t\t'stop',\n\t\t'structure',\n\t\t'structures',\n\t\t'style',\n\t\t'subkey',\n\t\t'submatches',\n\t\t'submit',\n\t\t'subroutine',\n\t\t'subscreen',\n\t\t'subtract',\n\t\t'subtract-corresponding',\n\t\t'suffix',\n\t\t'sum',\n\t\t'summary',\n\t\t'summing',\n\t\t'supplied',\n\t\t'supply',\n\t\t'suppress',\n\t\t'switch',\n\t\t'switchstates',\n\t\t'symbol',\n\t\t'syncpoints',\n\t\t'syntax',\n\t\t'syntax-check',\n\t\t'syntax-trace',\n\t\t'system-call',\n\t\t'system-exceptions',\n\t\t'system-exit',\n\t\t'tab',\n\t\t'tabbed',\n\t\t'table',\n\t\t'tables',\n\t\t'tableview',\n\t\t'tabstrip',\n\t\t'target',\n\t\t'task',\n\t\t'tasks',\n\t\t'test',\n\t\t'testing',\n\t\t'test-injection',\n\t\t'test-seam',\n\t\t'text',\n\t\t'textpool',\n\t\t'then',\n\t\t'throw',\n\t\t'time',\n\t\t'times',\n\t\t'timestamp',\n\t\t'timezone',\n\t\t'tims_is_valid',\n\t\t'title',\n\t\t'titlebar',\n\t\t'title-lines',\n\t\t'to',\n\t\t'tokenization',\n\t\t'tokens',\n\t\t'top-lines',\n\t\t'top-of-page',\n\t\t'trace-file',\n\t\t'trace-table',\n\t\t'trailing',\n\t\t'transaction',\n\t\t'transfer',\n\t\t'transformation',\n\t\t'translate', // also a built-in\n\t\t'transporting',\n\t\t'trmac',\n\t\t'truncate',\n\t\t'truncation',\n\t\t'try',\n\t\t'tstmp_add_seconds',\n\t\t'tstmp_current_utctimestamp',\n\t\t'tstmp_is_valid',\n\t\t'tstmp_seconds_between',\n\t\t'type',\n\t\t'type-pool',\n\t\t'type-pools',\n\t\t'types',\n\t\t'uline',\n\t\t'unassign',\n\t\t'under',\n\t\t'unicode',\n\t\t'union',\n\t\t'unique',\n\t\t'unit_conversion',\n\t\t'unix',\n\t\t'unpack',\n\t\t'until',\n\t\t'unwind',\n\t\t'up',\n\t\t'update',\n\t\t'upper',\n\t\t'user',\n\t\t'user-command',\n\t\t'using',\n\t\t'utf-8',\n\t\t'valid',\n\t\t'value',\n\t\t'value-request',\n\t\t'values',\n\t\t'vary',\n\t\t'varying',\n\t\t'verification-message',\n\t\t'version',\n\t\t'via',\n\t\t'view',\n\t\t'visible',\n\t\t'wait',\n\t\t'warning',\n\t\t'when',\n\t\t'whenever',\n\t\t'where',\n\t\t'while',\n\t\t'width',\n\t\t'window',\n\t\t'windows',\n\t\t'with',\n\t\t'with-heading',\n\t\t'without',\n\t\t'with-title',\n\t\t'word',\n\t\t'work',\n\t\t'write',\n\t\t'writer',\n\t\t'xml',\n\t\t'xsd',\n\t\t'yellow',\n\t\t'yes',\n\t\t'yymmdd',\n\t\t'zero',\n\t\t'zone',\n\t\t// since 7.55:\n\t\t'abap_system_timezone',\n\t\t'abap_user_timezone',\n\t\t'access',\n\t\t'action',\n\t\t'adabas',\n\t\t'adjust_numbers',\n\t\t'allow_precision_loss',\n\t\t'allowed',\n\t\t'amdp',\n\t\t'applicationuser',\n\t\t'as_geo_json',\n\t\t'as400',\n\t\t'associations',\n\t\t'balance',\n\t\t'behavior',\n\t\t'breakup',\n\t\t'bulk',\n\t\t'cds',\n\t\t'cds_client',\n\t\t'check_before_save',\n\t\t'child',\n\t\t'clients',\n\t\t'corr',\n\t\t'corr_spearman',\n\t\t'cross',\n\t\t'cycles',\n\t\t'datn_add_days',\n\t\t'datn_add_months',\n\t\t'datn_days_between',\n\t\t'dats_from_datn',\n\t\t'dats_tims_to_tstmp',\n\t\t'dats_to_datn',\n\t\t'db2',\n\t\t'db6',\n\t\t'ddl',\n\t\t'dense_rank',\n\t\t'depth',\n\t\t'deterministic',\n\t\t'discarding',\n\t\t'entities',\n\t\t'entity',\n\t\t'error',\n\t\t'failed',\n\t\t'finalize',\n\t\t'first_value',\n\t\t'fltp_to_dec',\n\t\t'following',\n\t\t'fractional',\n\t\t'full',\n\t\t'graph',\n\t\t'grouping',\n\t\t'hierarchy',\n\t\t'hierarchy_ancestors',\n\t\t'hierarchy_ancestors_aggregate',\n\t\t'hierarchy_descendants',\n\t\t'hierarchy_descendants_aggregate',\n\t\t'hierarchy_siblings',\n\t\t'incremental',\n\t\t'indicators',\n\t\t'lag',\n\t\t'last_value',\n\t\t'lead',\n\t\t'leaves',\n\t\t'like_regexpr',\n\t\t'link',\n\t\t'locale_sap',\n\t\t'lock',\n\t\t'locks',\n\t\t'many',\n\t\t'mapped',\n\t\t'matched',\n\t\t'measures',\n\t\t'median',\n\t\t'mssqlnt',\n\t\t'multiple',\n\t\t'nodetype',\n\t\t'ntile',\n\t\t'nulls',\n\t\t'occurrences_regexpr',\n\t\t'one',\n\t\t'operations',\n\t\t'oracle',\n\t\t'orphans',\n\t\t'over',\n\t\t'parent',\n\t\t'parents',\n\t\t'partition',\n\t\t'pcre',\n\t\t'period',\n\t\t'pfcg_mapping',\n\t\t'preceding',\n\t\t'privileged',\n\t\t'product',\n\t\t'projection',\n\t\t'rank',\n\t\t'redirected',\n\t\t'replace_regexpr',\n\t\t'reported',\n\t\t'response',\n\t\t'responses',\n\t\t'root',\n\t\t'row',\n\t\t'row_number',\n\t\t'sap_system_date',\n\t\t'save',\n\t\t'schema',\n\t\t'session',\n\t\t'sets',\n\t\t'shortdump',\n\t\t'siblings',\n\t\t'spantree',\n\t\t'start',\n\t\t'stddev',\n\t\t'string_agg',\n\t\t'subtotal',\n\t\t'sybase',\n\t\t'tims_from_timn',\n\t\t'tims_to_timn',\n\t\t'to_blob',\n\t\t'to_clob',\n\t\t'total',\n\t\t'trace-entry',\n\t\t'tstmp_to_dats',\n\t\t'tstmp_to_dst',\n\t\t'tstmp_to_tims',\n\t\t'tstmpl_from_utcl',\n\t\t'tstmpl_to_utcl',\n\t\t'unbounded',\n\t\t'utcl_add_seconds',\n\t\t'utcl_current',\n\t\t'utcl_seconds_between',\n\t\t'uuid',\n\t\t'var',\n\t\t'verbatim'\n\t],\n\n\t//\n\t// Built-in Functions\n\t//\n\t// Functions that are also statements have been moved to keywords\n\t//\n\tbuiltinFunctions: [\n\t\t'abs',\n\t\t'acos',\n\t\t'asin',\n\t\t'atan',\n\t\t'bit-set',\n\t\t'boolc',\n\t\t'boolx',\n\t\t'ceil',\n\t\t'char_off',\n\t\t'charlen',\n\t\t'cmax',\n\t\t'cmin',\n\t\t'concat_lines_of',\n\t\t// 'condense', // moved to keywords\n\t\t'contains',\n\t\t'contains_any_not_of',\n\t\t'contains_any_of',\n\t\t'cos',\n\t\t'cosh',\n\t\t'count',\n\t\t'count_any_not_of',\n\t\t'count_any_of',\n\t\t'dbmaxlen',\n\t\t'distance',\n\t\t'escape',\n\t\t'exp',\n\t\t// 'find', // moved to keywords\n\t\t'find_any_not_of',\n\t\t'find_any_of',\n\t\t'find_end',\n\t\t'floor',\n\t\t'frac',\n\t\t'from_mixed',\n\t\t// 'insert', // moved to keywords\n\t\t'ipow',\n\t\t'line_exists',\n\t\t'line_index',\n\t\t// 'lines', // moved to keywords\n\t\t'log',\n\t\t'log10',\n\t\t// 'match', // moved to keywords\n\t\t'matches',\n\t\t'nmax',\n\t\t'nmin',\n\t\t'numofchar',\n\t\t'repeat',\n\t\t// 'replace', // moved to keywords\n\t\t'rescale',\n\t\t'reverse',\n\t\t'round',\n\t\t'segment',\n\t\t'shift_left',\n\t\t'shift_right',\n\t\t'sign',\n\t\t'sin',\n\t\t'sinh',\n\t\t'sqrt',\n\t\t'strlen',\n\t\t'substring',\n\t\t'substring_after',\n\t\t'substring_before',\n\t\t'substring_from',\n\t\t'substring_to',\n\t\t'tan',\n\t\t'tanh',\n\t\t'to_lower',\n\t\t'to_mixed',\n\t\t'to_upper',\n\t\t// 'translate', // moved to keywords\n\t\t'trunc',\n\t\t'utclong_add', // since 7.54\n\t\t'utclong_current', // since 7.54\n\t\t'utclong_diff', // since 7.54\n\t\t'xsdbool',\n\t\t'xstrlen'\n\t],\n\n\t//\n\t// Data Types\n\t//\n\t// Data types that are also part of statements have been moved to keywords\n\t//\n\ttypeKeywords: [\n\t\t// built-in abap types\n\t\t'b',\n\t\t'c',\n\t\t'd',\n\t\t'decfloat16',\n\t\t'decfloat34',\n\t\t'f',\n\t\t'i',\n\t\t'int8', // since 7.54\n\t\t'n',\n\t\t'p',\n\t\t's',\n\t\t'string',\n\t\t't',\n\t\t'utclong', // since 7.54\n\t\t'x',\n\t\t'xstring',\n\t\t// generic data types\n\t\t'any',\n\t\t'clike',\n\t\t'csequence',\n\t\t'decfloat',\n\t\t// 'object', // moved to keywords\n\t\t'numeric',\n\t\t'simple',\n\t\t'xsequence',\n\t\t// ddic/sql data types\n\t\t'accp',\n\t\t'char',\n\t\t'clnt',\n\t\t'cuky',\n\t\t'curr',\n\t\t'datn', // since 7.55\n\t\t'dats',\n\t\t'd16d', // since 7.55\n\t\t'd16n', // since 7.55\n\t\t'd16r', // since 7.55\n\t\t'd34d', // since 7.55\n\t\t'd34n', // since 7.55\n\t\t'd34r', // since 7.55\n\t\t'dec',\n\t\t'df16_dec',\n\t\t'df16_raw',\n\t\t'df34_dec',\n\t\t'df34_raw',\n\t\t'fltp',\n\t\t'geom_ewkb', // since 7.55\n\t\t'int1',\n\t\t'int2',\n\t\t'int4',\n\t\t'lang',\n\t\t'lchr',\n\t\t'lraw',\n\t\t'numc',\n\t\t'quan',\n\t\t'raw',\n\t\t'rawstring',\n\t\t'sstring',\n\t\t'timn', // since 7.55\n\t\t'tims',\n\t\t'unit',\n\t\t'utcl', // since 7.55\n\t\t// ddic data types (obsolete)\n\t\t'df16_scl',\n\t\t'df34_scl',\n\t\t'prec',\n\t\t'varc',\n\t\t// special data types and constants\n\t\t'abap_bool',\n\t\t'abap_false',\n\t\t'abap_true',\n\t\t'abap_undefined',\n\t\t'me',\n\t\t'screen',\n\t\t'space',\n\t\t'super',\n\t\t'sy',\n\t\t'syst',\n\t\t'table_line',\n\t\t// obsolete data object\n\t\t'*sys*'\n\t],\n\n\tbuiltinMethods: ['class_constructor', 'constructor'],\n\n\tderivedTypes: [\n\t\t'%CID',\n\t\t'%CID_REF',\n\t\t'%CONTROL',\n\t\t'%DATA',\n\t\t'%ELEMENT',\n\t\t'%FAIL',\n\t\t'%KEY',\n\t\t'%MSG',\n\t\t'%PARAM',\n\t\t'%PID',\n\t\t'%PID_ASSOC',\n\t\t'%PID_PARENT',\n\t\t'%_HINTS'\n\t],\n\n\tcdsLanguage: [\n\t\t'@AbapAnnotation',\n\t\t'@AbapCatalog',\n\t\t'@AccessControl',\n\t\t'@API',\n\t\t'@ClientDependent',\n\t\t'@ClientHandling',\n\t\t'@CompatibilityContract',\n\t\t'@DataAging',\n\t\t'@EndUserText',\n\t\t'@Environment',\n\t\t'@LanguageDependency',\n\t\t'@MappingRole',\n\t\t'@Metadata',\n\t\t'@MetadataExtension',\n\t\t'@ObjectModel',\n\t\t'@Scope',\n\t\t'@Semantics',\n\t\t'$EXTENSION',\n\t\t'$SELF'\n\t],\n\n\tselectors: ['->', '->*', '=>', '~', '~*'],\n\n\t//\n\t// Operators\n\t//\n\t// Operators that can be part of statements have been moved to keywords\n\t//\n\toperators: [\n\t\t// arithmetic operators\n\t\t' +',\n\t\t' -',\n\t\t'/',\n\t\t'*',\n\t\t'**',\n\t\t'div',\n\t\t'mod',\n\t\t// assignment operators\n\t\t'=',\n\t\t'#',\n\t\t'@',\n\t\t'+=',\n\t\t'-=',\n\t\t'*=',\n\t\t'/=',\n\t\t'**=',\n\t\t'&&=',\n\t\t// casting operator\n\t\t'?=',\n\t\t// concat operators\n\t\t'&',\n\t\t'&&',\n\t\t// bit operators\n\t\t'bit-and',\n\t\t'bit-not',\n\t\t'bit-or',\n\t\t'bit-xor',\n\t\t'm',\n\t\t'o',\n\t\t'z',\n\t\t// boolean operators\n\t\t// 'and', // moved to keywords\n\t\t// 'equiv', // moved to keywords\n\t\t// 'not', // moved to keywords\n\t\t// 'or', // moved to keywords\n\t\t// comparison operators\n\t\t'<',\n\t\t' >', // todo: separate from -> and =>\n\t\t'<=',\n\t\t'>=',\n\t\t'<>',\n\t\t'><', // obsolete\n\t\t'=<', // obsolete\n\t\t'=>', // obsolete\n\t\t// 'between', // moved to keywords\n\t\t'bt',\n\t\t'byte-ca',\n\t\t'byte-cn',\n\t\t'byte-co',\n\t\t'byte-cs',\n\t\t'byte-na',\n\t\t'byte-ns',\n\t\t'ca',\n\t\t'cn',\n\t\t'co',\n\t\t'cp',\n\t\t'cs',\n\t\t'eq', // obsolete\n\t\t'ge', // obsolete\n\t\t'gt', // obsolete\n\t\t// 'in', // moved to keywords\n\t\t'le', // obsolete\n\t\t'lt', // obsolete\n\t\t'na',\n\t\t'nb',\n\t\t'ne', // obsolete\n\t\t'np',\n\t\t'ns',\n\t\t// cds\n\t\t'*/',\n\t\t'*:',\n\t\t'--',\n\t\t'/*',\n\t\t'//'\n\t],\n\n\tsymbols: /[=><!~?&+\\-*\\/\\^%#@]+/,\n\n\ttokenizer: {\n\t\troot: [\n\t\t\t[\n\t\t\t\t/[a-z_\\/$%@]([\\w\\/$%]|-(?!>))*/, // exclude '->' selector\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@typeKeywords': 'type',\n\t\t\t\t\t\t'@keywords': 'keyword',\n\t\t\t\t\t\t'@cdsLanguage': 'annotation',\n\t\t\t\t\t\t'@derivedTypes': 'type',\n\t\t\t\t\t\t'@builtinFunctions': 'type',\n\t\t\t\t\t\t'@builtinMethods': 'type',\n\t\t\t\t\t\t'@operators': 'key',\n\t\t\t\t\t\t'@default': 'identifier'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t[/<[\\w]+>/, 'identifier'], // field symbols\n\n\t\t\t[/##[\\w|_]+/, 'comment'], // pragmas\n\n\t\t\t{ include: '@whitespace' },\n\n\t\t\t[/[:,.]/, 'delimiter'],\n\n\t\t\t[/[{}()\\[\\]]/, '@brackets'],\n\n\t\t\t[\n\t\t\t\t/@symbols/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@selectors': 'tag',\n\t\t\t\t\t\t'@operators': 'key',\n\t\t\t\t\t\t'@default': ''\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t[/'/, { token: 'string', bracket: '@open', next: '@stringquote' }],\n\t\t\t[/`/, { token: 'string', bracket: '@open', next: '@stringping' }],\n\t\t\t[/\\|/, { token: 'string', bracket: '@open', next: '@stringtemplate' }],\n\n\t\t\t[/\\d+/, 'number']\n\t\t],\n\n\t\tstringtemplate: [\n\t\t\t[/[^\\\\\\|]+/, 'string'],\n\t\t\t[/\\\\\\|/, 'string'],\n\t\t\t[/\\|/, { token: 'string', bracket: '@close', next: '@pop' }]\n\t\t],\n\n\t\tstringping: [\n\t\t\t[/[^\\\\`]+/, 'string'],\n\t\t\t[/`/, { token: 'string', bracket: '@close', next: '@pop' }]\n\t\t],\n\n\t\tstringquote: [\n\t\t\t[/[^\\\\']+/, 'string'],\n\t\t\t[/'/, { token: 'string', bracket: '@close', next: '@pop' }]\n\t\t],\n\n\t\twhitespace: [\n\t\t\t[/[ \\t\\r\\n]+/, ''],\n\t\t\t[/^\\*.*$/, 'comment'],\n\t\t\t[/\\\".*$/, 'comment']\n\t\t]\n\t}\n}",
  "apex": "<languages.IMonarchLanguage>{\n\tdefaultToken: '',\n\ttokenPostfix: '.apex',\n\n\tkeywords: keywordsWithCaseVariations,\n\n\toperators: [\n\t\t'=',\n\t\t'>',\n\t\t'<',\n\t\t'!',\n\t\t'~',\n\t\t'?',\n\t\t':',\n\t\t'==',\n\t\t'<=',\n\t\t'>=',\n\t\t'!=',\n\t\t'&&',\n\t\t'||',\n\t\t'++',\n\t\t'--',\n\t\t'+',\n\t\t'-',\n\t\t'*',\n\t\t'/',\n\t\t'&',\n\t\t'|',\n\t\t'^',\n\t\t'%',\n\t\t'<<',\n\t\t'>>',\n\t\t'>>>',\n\t\t'+=',\n\t\t'-=',\n\t\t'*=',\n\t\t'/=',\n\t\t'&=',\n\t\t'|=',\n\t\t'^=',\n\t\t'%=',\n\t\t'<<=',\n\t\t'>>=',\n\t\t'>>>='\n\t],\n\n\t// we include these common regular expressions\n\tsymbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n\tescapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n\tdigits: /\\d+(_+\\d+)*/,\n\toctaldigits: /[0-7]+(_+[0-7]+)*/,\n\tbinarydigits: /[0-1]+(_+[0-1]+)*/,\n\thexdigits: /[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,\n\n\t// The main tokenizer for our languages\n\ttokenizer: {\n\t\troot: [\n\t\t\t// identifiers and keywords\n\t\t\t[\n\t\t\t\t/[a-z_$][\\w$]*/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@keywords': { token: 'keyword.$0' },\n\t\t\t\t\t\t'@default': 'identifier'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t// assume that identifiers starting with an uppercase letter are types\n\t\t\t[\n\t\t\t\t/[A-Z][\\w\\$]*/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@keywords': { token: 'keyword.$0' },\n\t\t\t\t\t\t'@default': 'type.identifier'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t// whitespace\n\t\t\t{ include: '@whitespace' },\n\n\t\t\t// delimiters and operators\n\t\t\t[/[{}()\\[\\]]/, '@brackets'],\n\t\t\t[/[<>](?!@symbols)/, '@brackets'],\n\t\t\t[\n\t\t\t\t/@symbols/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@operators': 'delimiter',\n\t\t\t\t\t\t'@default': ''\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t// @ annotations.\n\t\t\t[/@\\s*[a-zA-Z_\\$][\\w\\$]*/, 'annotation'],\n\n\t\t\t// numbers\n\t\t\t[/(@digits)[eE]([\\-+]?(@digits))?[fFdD]?/, 'number.float'],\n\t\t\t[/(@digits)\\.(@digits)([eE][\\-+]?(@digits))?[fFdD]?/, 'number.float'],\n\t\t\t[/(@digits)[fFdD]/, 'number.float'],\n\t\t\t[/(@digits)[lL]?/, 'number'],\n\n\t\t\t// delimiter: after number because of .\\d floats\n\t\t\t[/[;,.]/, 'delimiter'],\n\n\t\t\t// strings\n\t\t\t[/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'], // non-teminated string\n\t\t\t[/'([^'\\\\]|\\\\.)*$/, 'string.invalid'], // non-teminated string\n\t\t\t[/\"/, 'string', '@string.\"'],\n\t\t\t[/'/, 'string', \"@string.'\"],\n\n\t\t\t// characters\n\t\t\t[/'[^\\\\']'/, 'string'],\n\t\t\t[/(')(@escapes)(')/, ['string', 'string.escape', 'string']],\n\t\t\t[/'/, 'string.invalid']\n\t\t],\n\n\t\twhitespace: [\n\t\t\t[/[ \\t\\r\\n]+/, ''],\n\t\t\t[/\\/\\*\\*(?!\\/)/, 'comment.doc', '@apexdoc'],\n\t\t\t[/\\/\\*/, 'comment', '@comment'],\n\t\t\t[/\\/\\/.*$/, 'comment']\n\t\t],\n\n\t\tcomment: [\n\t\t\t[/[^\\/*]+/, 'comment'],\n\t\t\t// [/\\/\\*/, 'comment', '@push' ],    // nested comment not allowed :-(\n\t\t\t// [/\\/\\*/,    'comment.invalid' ],    // this breaks block comments in the shape of /* //*/\n\t\t\t[/\\*\\//, 'comment', '@pop'],\n\t\t\t[/[\\/*]/, 'comment']\n\t\t],\n\n\t\t//Identical copy of comment above, except for the addition of .doc\n\t\tapexdoc: [\n\t\t\t[/[^\\/*]+/, 'comment.doc'],\n\t\t\t[/\\*\\//, 'comment.doc', '@pop'],\n\t\t\t[/[\\/*]/, 'comment.doc']\n\t\t],\n\n\t\tstring: [\n\t\t\t[/[^\\\\\"']+/, 'string'],\n\t\t\t[/@escapes/, 'string.escape'],\n\t\t\t[/\\\\./, 'string.escape.invalid'],\n\t\t\t[\n\t\t\t\t/[\"']/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'$#==$S2': { token: 'string', next: '@pop' },\n\t\t\t\t\t\t'@default': 'string'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t]\n\t}\n}",
  "azcli": "<languages.IMonarchLanguage>{\n\tdefaultToken: 'keyword',\n\tignoreCase: true,\n\ttokenPostfix: '.azcli',\n\n\tstr: /[^#\\s]/,\n\n\ttokenizer: {\n\t\troot: [\n\t\t\t{ include: '@comment' },\n\t\t\t[\n\t\t\t\t/\\s-+@str*\\s*/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@eos': { token: 'key.identifier', next: '@popall' },\n\t\t\t\t\t\t'@default': { token: 'key.identifier', next: '@type' }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t[\n\t\t\t\t/^-+@str*\\s*/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@eos': { token: 'key.identifier', next: '@popall' },\n\t\t\t\t\t\t'@default': { token: 'key.identifier', next: '@type' }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t],\n\n\t\ttype: [\n\t\t\t{ include: '@comment' },\n\t\t\t[\n\t\t\t\t/-+@str*\\s*/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@eos': { token: 'key.identifier', next: '@popall' },\n\t\t\t\t\t\t'@default': 'key.identifier'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t[\n\t\t\t\t/@str+\\s*/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@eos': { token: 'string', next: '@popall' },\n\t\t\t\t\t\t'@default': 'string'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t],\n\n\t\tcomment: [\n\t\t\t[\n\t\t\t\t/#.*$/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@eos': { token: 'comment', next: '@popall' }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t]\n\t}\n}",
  "bat": "<languages.IMonarchLanguage>{\n\tdefaultToken: '',\n\tignoreCase: true,\n\ttokenPostfix: '.bat',\n\n\tbrackets: [\n\t\t{ token: 'delimiter.bracket', open: '{', close: '}' },\n\t\t{ token: 'delimiter.parenthesis', open: '(', close: ')' },\n\t\t{ token: 'delimiter.square', open: '[', close: ']' }\n\t],\n\n\tkeywords:\n\t\t/call|defined|echo|errorlevel|exist|for|goto|if|pause|set|shift|start|title|not|pushd|popd/,\n\n\t// we include these common regular expressions\n\tsymbols: /[=><!~?&|+\\-*\\/\\^;\\.,]+/,\n\tescapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n\n\t// The main tokenizer for our languages\n\ttokenizer: {\n\t\troot: [\n\t\t\t[/^(\\s*)(rem(?:\\s.*|))$/, ['', 'comment']],\n\n\t\t\t[/(\\@?)(@keywords)(?!\\w)/, [{ token: 'keyword' }, { token: 'keyword.$2' }]],\n\n\t\t\t// whitespace\n\t\t\t[/[ \\t\\r\\n]+/, ''],\n\n\t\t\t// blocks\n\t\t\t[/setlocal(?!\\w)/, 'keyword.tag-setlocal'],\n\t\t\t[/endlocal(?!\\w)/, 'keyword.tag-setlocal'],\n\n\t\t\t// words\n\t\t\t[/[a-zA-Z_]\\w*/, ''],\n\n\t\t\t// labels\n\t\t\t[/:\\w*/, 'metatag'],\n\n\t\t\t// variables\n\t\t\t[/%[^%]+%/, 'variable'],\n\t\t\t[/%%[\\w]+(?!\\w)/, 'variable'],\n\n\t\t\t// punctuations\n\t\t\t[/[{}()\\[\\]]/, '@brackets'],\n\t\t\t[/@symbols/, 'delimiter'],\n\n\t\t\t// numbers\n\t\t\t[/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\n\t\t\t[/0[xX][0-9a-fA-F_]*[0-9a-fA-F]/, 'number.hex'],\n\t\t\t[/\\d+/, 'number'],\n\n\t\t\t// punctuation: after number because of .\\d floats\n\t\t\t[/[;,.]/, 'delimiter'],\n\n\t\t\t// strings:\n\t\t\t[/\"/, 'string', '@string.\"'],\n\t\t\t[/'/, 'string', \"@string.'\"]\n\t\t],\n\n\t\tstring: [\n\t\t\t[\n\t\t\t\t/[^\\\\\"'%]+/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@eos': { token: 'string', next: '@popall' },\n\t\t\t\t\t\t'@default': 'string'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/@escapes/, 'string.escape'],\n\t\t\t[/\\\\./, 'string.escape.invalid'],\n\t\t\t[/%[\\w ]+%/, 'variable'],\n\t\t\t[/%%[\\w]+(?!\\w)/, 'variable'],\n\t\t\t[\n\t\t\t\t/[\"']/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'$#==$S2': { token: 'string', next: '@pop' },\n\t\t\t\t\t\t'@default': 'string'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/$/, 'string', '@popall']\n\t\t]\n\t}\n}",
  "bicep": "<languages.IMonarchLanguage>{\n\tdefaultToken: '',\n\ttokenPostfix: '.bicep',\n\n\tbrackets: [\n\t\t{ open: '{', close: '}', token: 'delimiter.curly' },\n\t\t{ open: '[', close: ']', token: 'delimiter.square' },\n\t\t{ open: '(', close: ')', token: 'delimiter.parenthesis' }\n\t],\n\n\tsymbols: /[=><!~?:&|+\\-*/^%]+/,\n\n\tkeywords,\n\tnamedLiterals,\n\n\tescapes: `\\\\\\\\(u{[0-9A-Fa-f]+}|n|r|t|\\\\\\\\|'|\\\\\\${)`,\n\n\ttokenizer: {\n\t\troot: [{ include: '@expression' }, { include: '@whitespace' }],\n\n\t\tstringVerbatim: [\n\t\t\t{ regex: `(|'|'')[^']`, action: { token: 'string' } },\n\t\t\t{ regex: `'''`, action: { token: 'string.quote', next: '@pop' } }\n\t\t],\n\n\t\tstringLiteral: [\n\t\t\t{ regex: `\\\\\\${`, action: { token: 'delimiter.bracket', next: '@bracketCounting' } },\n\t\t\t{ regex: `[^\\\\\\\\'$]+`, action: { token: 'string' } },\n\t\t\t{ regex: '@escapes', action: { token: 'string.escape' } },\n\t\t\t{ regex: `\\\\\\\\.`, action: { token: 'string.escape.invalid' } },\n\t\t\t{ regex: `'`, action: { token: 'string', next: '@pop' } }\n\t\t],\n\n\t\tbracketCounting: [\n\t\t\t{ regex: `{`, action: { token: 'delimiter.bracket', next: '@bracketCounting' } },\n\t\t\t{ regex: `}`, action: { token: 'delimiter.bracket', next: '@pop' } },\n\t\t\t{ include: 'expression' }\n\t\t],\n\n\t\tcomment: [\n\t\t\t{ regex: `[^\\\\*]+`, action: { token: 'comment' } },\n\t\t\t{ regex: `\\\\*\\\\/`, action: { token: 'comment', next: '@pop' } },\n\t\t\t{ regex: `[\\\\/*]`, action: { token: 'comment' } }\n\t\t],\n\n\t\twhitespace: [\n\t\t\t{ regex: nonCommentWs },\n\t\t\t{ regex: `\\\\/\\\\*`, action: { token: 'comment', next: '@comment' } },\n\t\t\t{ regex: `\\\\/\\\\/.*$`, action: { token: 'comment' } }\n\t\t],\n\n\t\texpression: [\n\t\t\t{ regex: `'''`, action: { token: 'string.quote', next: '@stringVerbatim' } },\n\t\t\t{ regex: `'`, action: { token: 'string.quote', next: '@stringLiteral' } },\n\t\t\t{ regex: numericLiteral, action: { token: 'number' } },\n\t\t\t{\n\t\t\t\tregex: identifier,\n\t\t\t\taction: {\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@keywords': { token: 'keyword' },\n\t\t\t\t\t\t'@namedLiterals': { token: 'keyword' },\n\t\t\t\t\t\t'@default': { token: 'identifier' }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t}\n}",
  "cameligo": "<languages.IMonarchLanguage>{\n\tdefaultToken: '',\n\ttokenPostfix: '.cameligo',\n\tignoreCase: true,\n\n\tbrackets: [\n\t\t{ open: '{', close: '}', token: 'delimiter.curly' },\n\t\t{ open: '[', close: ']', token: 'delimiter.square' },\n\t\t{ open: '(', close: ')', token: 'delimiter.parenthesis' },\n\t\t{ open: '<', close: '>', token: 'delimiter.angle' }\n\t],\n\n\tkeywords: [\n\t\t'abs',\n\t\t'assert',\n\t\t'block',\n\t\t'Bytes',\n\t\t'case',\n\t\t'Crypto',\n\t\t'Current',\n\t\t'else',\n\t\t'failwith',\n\t\t'false',\n\t\t'for',\n\t\t'fun',\n\t\t'if',\n\t\t'in',\n\t\t'let',\n\t\t'let%entry',\n\t\t'let%init',\n\t\t'List',\n\t\t'list',\n\t\t'Map',\n\t\t'map',\n\t\t'match',\n\t\t'match%nat',\n\t\t'mod',\n\t\t'not',\n\t\t'operation',\n\t\t'Operation',\n\t\t'of',\n\t\t'record',\n\t\t'Set',\n\t\t'set',\n\t\t'sender',\n\t\t'skip',\n\t\t'source',\n\t\t'String',\n\t\t'then',\n\t\t'to',\n\t\t'true',\n\t\t'type',\n\t\t'with'\n\t],\n\n\ttypeKeywords: ['int', 'unit', 'string', 'tz', 'nat', 'bool'],\n\n\toperators: [\n\t\t'=',\n\t\t'>',\n\t\t'<',\n\t\t'<=',\n\t\t'>=',\n\t\t'<>',\n\t\t':',\n\t\t':=',\n\t\t'and',\n\t\t'mod',\n\t\t'or',\n\t\t'+',\n\t\t'-',\n\t\t'*',\n\t\t'/',\n\t\t'@',\n\t\t'&',\n\t\t'^',\n\t\t'%',\n\t\t'->',\n\t\t'<-',\n\t\t'&&',\n\t\t'||'\n\t],\n\n\t// we include these common regular expressions\n\tsymbols: /[=><:@\\^&|+\\-*\\/\\^%]+/,\n\n\t// The main tokenizer for our languages\n\ttokenizer: {\n\t\troot: [\n\t\t\t// identifiers and keywords\n\t\t\t[\n\t\t\t\t/[a-zA-Z_][\\w]*/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@keywords': { token: 'keyword.$0' },\n\t\t\t\t\t\t'@default': 'identifier'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t// whitespace\n\t\t\t{ include: '@whitespace' },\n\n\t\t\t// delimiters and operators\n\t\t\t[/[{}()\\[\\]]/, '@brackets'],\n\t\t\t[/[<>](?!@symbols)/, '@brackets'],\n\t\t\t[\n\t\t\t\t/@symbols/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@operators': 'delimiter',\n\t\t\t\t\t\t'@default': ''\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t// numbers\n\t\t\t[/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\n\t\t\t[/\\$[0-9a-fA-F]{1,16}/, 'number.hex'],\n\t\t\t[/\\d+/, 'number'],\n\n\t\t\t// delimiter: after number because of .\\d floats\n\t\t\t[/[;,.]/, 'delimiter'],\n\n\t\t\t// strings\n\t\t\t[/'([^'\\\\]|\\\\.)*$/, 'string.invalid'], // non-teminated string\n\t\t\t[/'/, 'string', '@string'],\n\n\t\t\t// characters\n\t\t\t[/'[^\\\\']'/, 'string'],\n\t\t\t[/'/, 'string.invalid'],\n\t\t\t[/\\#\\d+/, 'string']\n\t\t],\n\t\t/* */\n\n\t\tcomment: [\n\t\t\t[/[^\\(\\*]+/, 'comment'],\n\t\t\t//[/\\(\\*/,    'comment', '@push' ],    // nested comment  not allowed :-(\n\t\t\t[/\\*\\)/, 'comment', '@pop'],\n\t\t\t[/\\(\\*/, 'comment']\n\t\t],\n\n\t\tstring: [\n\t\t\t[/[^\\\\']+/, 'string'],\n\t\t\t[/\\\\./, 'string.escape.invalid'],\n\t\t\t[/'/, { token: 'string.quote', bracket: '@close', next: '@pop' }]\n\t\t],\n\n\t\twhitespace: [\n\t\t\t[/[ \\t\\r\\n]+/, 'white'],\n\t\t\t[/\\(\\*/, 'comment', '@comment'],\n\t\t\t[/\\/\\/.*$/, 'comment']\n\t\t]\n\t}\n}",
  "clojure": "<languages.IMonarchLanguage>{\n\tdefaultToken: '',\n\tignoreCase: true,\n\ttokenPostfix: '.clj',\n\n\tbrackets: [\n\t\t{ open: '[', close: ']', token: 'delimiter.square' },\n\t\t{ open: '(', close: ')', token: 'delimiter.parenthesis' },\n\t\t{ open: '{', close: '}', token: 'delimiter.curly' }\n\t],\n\n\tconstants: ['true', 'false', 'nil'],\n\n\t// delimiters: /[\\\\\\[\\]\\s\"#'(),;@^`{}~]|$/,\n\n\tnumbers:\n\t\t/^(?:[+\\-]?\\d+(?:(?:N|(?:[eE][+\\-]?\\d+))|(?:\\.?\\d*(?:M|(?:[eE][+\\-]?\\d+))?)|\\/\\d+|[xX][0-9a-fA-F]+|r[0-9a-zA-Z]+)?(?=[\\\\\\[\\]\\s\"#'(),;@^`{}~]|$))/,\n\n\tcharacters:\n\t\t/^(?:\\\\(?:backspace|formfeed|newline|return|space|tab|o[0-7]{3}|u[0-9A-Fa-f]{4}|x[0-9A-Fa-f]{4}|.)?(?=[\\\\\\[\\]\\s\"(),;@^`{}~]|$))/,\n\n\tescapes: /^\\\\(?:[\"'\\\\bfnrt]|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n\n\t// simple-namespace := /^[^\\\\\\/\\[\\]\\d\\s\"#'(),;@^`{}~][^\\\\\\[\\]\\s\"(),;@^`{}~]*/\n\t// simple-symbol    := /^(?:\\/|[^\\\\\\/\\[\\]\\d\\s\"#'(),;@^`{}~][^\\\\\\[\\]\\s\"(),;@^`{}~]*)/\n\t// qualified-symbol := (<simple-namespace>(<.><simple-namespace>)*</>)?<simple-symbol>\n\tqualifiedSymbols:\n\t\t/^(?:(?:[^\\\\\\/\\[\\]\\d\\s\"#'(),;@^`{}~][^\\\\\\[\\]\\s\"(),;@^`{}~]*(?:\\.[^\\\\\\/\\[\\]\\d\\s\"#'(),;@^`{}~][^\\\\\\[\\]\\s\"(),;@^`{}~]*)*\\/)?(?:\\/|[^\\\\\\/\\[\\]\\d\\s\"#'(),;@^`{}~][^\\\\\\[\\]\\s\"(),;@^`{}~]*)*(?=[\\\\\\[\\]\\s\"(),;@^`{}~]|$))/,\n\n\tspecialForms: [\n\t\t'.',\n\t\t'catch',\n\t\t'def',\n\t\t'do',\n\t\t'if',\n\t\t'monitor-enter',\n\t\t'monitor-exit',\n\t\t'new',\n\t\t'quote',\n\t\t'recur',\n\t\t'set!',\n\t\t'throw',\n\t\t'try',\n\t\t'var'\n\t],\n\n\tcoreSymbols: [\n\t\t'*',\n\t\t\"*'\",\n\t\t'*1',\n\t\t'*2',\n\t\t'*3',\n\t\t'*agent*',\n\t\t'*allow-unresolved-vars*',\n\t\t'*assert*',\n\t\t'*clojure-version*',\n\t\t'*command-line-args*',\n\t\t'*compile-files*',\n\t\t'*compile-path*',\n\t\t'*compiler-options*',\n\t\t'*data-readers*',\n\t\t'*default-data-reader-fn*',\n\t\t'*e',\n\t\t'*err*',\n\t\t'*file*',\n\t\t'*flush-on-newline*',\n\t\t'*fn-loader*',\n\t\t'*in*',\n\t\t'*math-context*',\n\t\t'*ns*',\n\t\t'*out*',\n\t\t'*print-dup*',\n\t\t'*print-length*',\n\t\t'*print-level*',\n\t\t'*print-meta*',\n\t\t'*print-namespace-maps*',\n\t\t'*print-readably*',\n\t\t'*read-eval*',\n\t\t'*reader-resolver*',\n\t\t'*source-path*',\n\t\t'*suppress-read*',\n\t\t'*unchecked-math*',\n\t\t'*use-context-classloader*',\n\t\t'*verbose-defrecords*',\n\t\t'*warn-on-reflection*',\n\t\t'+',\n\t\t\"+'\",\n\t\t'-',\n\t\t\"-'\",\n\t\t'->',\n\t\t'->>',\n\t\t'->ArrayChunk',\n\t\t'->Eduction',\n\t\t'->Vec',\n\t\t'->VecNode',\n\t\t'->VecSeq',\n\t\t'-cache-protocol-fn',\n\t\t'-reset-methods',\n\t\t'..',\n\t\t'/',\n\t\t'<',\n\t\t'<=',\n\t\t'=',\n\t\t'==',\n\t\t'>',\n\t\t'>=',\n\t\t'EMPTY-NODE',\n\t\t'Inst',\n\t\t'StackTraceElement->vec',\n\t\t'Throwable->map',\n\t\t'accessor',\n\t\t'aclone',\n\t\t'add-classpath',\n\t\t'add-watch',\n\t\t'agent',\n\t\t'agent-error',\n\t\t'agent-errors',\n\t\t'aget',\n\t\t'alength',\n\t\t'alias',\n\t\t'all-ns',\n\t\t'alter',\n\t\t'alter-meta!',\n\t\t'alter-var-root',\n\t\t'amap',\n\t\t'ancestors',\n\t\t'and',\n\t\t'any?',\n\t\t'apply',\n\t\t'areduce',\n\t\t'array-map',\n\t\t'as->',\n\t\t'aset',\n\t\t'aset-boolean',\n\t\t'aset-byte',\n\t\t'aset-char',\n\t\t'aset-double',\n\t\t'aset-float',\n\t\t'aset-int',\n\t\t'aset-long',\n\t\t'aset-short',\n\t\t'assert',\n\t\t'assoc',\n\t\t'assoc!',\n\t\t'assoc-in',\n\t\t'associative?',\n\t\t'atom',\n\t\t'await',\n\t\t'await-for',\n\t\t'await1',\n\t\t'bases',\n\t\t'bean',\n\t\t'bigdec',\n\t\t'bigint',\n\t\t'biginteger',\n\t\t'binding',\n\t\t'bit-and',\n\t\t'bit-and-not',\n\t\t'bit-clear',\n\t\t'bit-flip',\n\t\t'bit-not',\n\t\t'bit-or',\n\t\t'bit-set',\n\t\t'bit-shift-left',\n\t\t'bit-shift-right',\n\t\t'bit-test',\n\t\t'bit-xor',\n\t\t'boolean',\n\t\t'boolean-array',\n\t\t'boolean?',\n\t\t'booleans',\n\t\t'bound-fn',\n\t\t'bound-fn*',\n\t\t'bound?',\n\t\t'bounded-count',\n\t\t'butlast',\n\t\t'byte',\n\t\t'byte-array',\n\t\t'bytes',\n\t\t'bytes?',\n\t\t'case',\n\t\t'cast',\n\t\t'cat',\n\t\t'char',\n\t\t'char-array',\n\t\t'char-escape-string',\n\t\t'char-name-string',\n\t\t'char?',\n\t\t'chars',\n\t\t'chunk',\n\t\t'chunk-append',\n\t\t'chunk-buffer',\n\t\t'chunk-cons',\n\t\t'chunk-first',\n\t\t'chunk-next',\n\t\t'chunk-rest',\n\t\t'chunked-seq?',\n\t\t'class',\n\t\t'class?',\n\t\t'clear-agent-errors',\n\t\t'clojure-version',\n\t\t'coll?',\n\t\t'comment',\n\t\t'commute',\n\t\t'comp',\n\t\t'comparator',\n\t\t'compare',\n\t\t'compare-and-set!',\n\t\t'compile',\n\t\t'complement',\n\t\t'completing',\n\t\t'concat',\n\t\t'cond',\n\t\t'cond->',\n\t\t'cond->>',\n\t\t'condp',\n\t\t'conj',\n\t\t'conj!',\n\t\t'cons',\n\t\t'constantly',\n\t\t'construct-proxy',\n\t\t'contains?',\n\t\t'count',\n\t\t'counted?',\n\t\t'create-ns',\n\t\t'create-struct',\n\t\t'cycle',\n\t\t'dec',\n\t\t\"dec'\",\n\t\t'decimal?',\n\t\t'declare',\n\t\t'dedupe',\n\t\t'default-data-readers',\n\t\t'definline',\n\t\t'definterface',\n\t\t'defmacro',\n\t\t'defmethod',\n\t\t'defmulti',\n\t\t'defn',\n\t\t'defn-',\n\t\t'defonce',\n\t\t'defprotocol',\n\t\t'defrecord',\n\t\t'defstruct',\n\t\t'deftype',\n\t\t'delay',\n\t\t'delay?',\n\t\t'deliver',\n\t\t'denominator',\n\t\t'deref',\n\t\t'derive',\n\t\t'descendants',\n\t\t'destructure',\n\t\t'disj',\n\t\t'disj!',\n\t\t'dissoc',\n\t\t'dissoc!',\n\t\t'distinct',\n\t\t'distinct?',\n\t\t'doall',\n\t\t'dorun',\n\t\t'doseq',\n\t\t'dosync',\n\t\t'dotimes',\n\t\t'doto',\n\t\t'double',\n\t\t'double-array',\n\t\t'double?',\n\t\t'doubles',\n\t\t'drop',\n\t\t'drop-last',\n\t\t'drop-while',\n\t\t'eduction',\n\t\t'empty',\n\t\t'empty?',\n\t\t'ensure',\n\t\t'ensure-reduced',\n\t\t'enumeration-seq',\n\t\t'error-handler',\n\t\t'error-mode',\n\t\t'eval',\n\t\t'even?',\n\t\t'every-pred',\n\t\t'every?',\n\t\t'ex-data',\n\t\t'ex-info',\n\t\t'extend',\n\t\t'extend-protocol',\n\t\t'extend-type',\n\t\t'extenders',\n\t\t'extends?',\n\t\t'false?',\n\t\t'ffirst',\n\t\t'file-seq',\n\t\t'filter',\n\t\t'filterv',\n\t\t'find',\n\t\t'find-keyword',\n\t\t'find-ns',\n\t\t'find-protocol-impl',\n\t\t'find-protocol-method',\n\t\t'find-var',\n\t\t'first',\n\t\t'flatten',\n\t\t'float',\n\t\t'float-array',\n\t\t'float?',\n\t\t'floats',\n\t\t'flush',\n\t\t'fn',\n\t\t'fn?',\n\t\t'fnext',\n\t\t'fnil',\n\t\t'for',\n\t\t'force',\n\t\t'format',\n\t\t'frequencies',\n\t\t'future',\n\t\t'future-call',\n\t\t'future-cancel',\n\t\t'future-cancelled?',\n\t\t'future-done?',\n\t\t'future?',\n\t\t'gen-class',\n\t\t'gen-interface',\n\t\t'gensym',\n\t\t'get',\n\t\t'get-in',\n\t\t'get-method',\n\t\t'get-proxy-class',\n\t\t'get-thread-bindings',\n\t\t'get-validator',\n\t\t'group-by',\n\t\t'halt-when',\n\t\t'hash',\n\t\t'hash-combine',\n\t\t'hash-map',\n\t\t'hash-ordered-coll',\n\t\t'hash-set',\n\t\t'hash-unordered-coll',\n\t\t'ident?',\n\t\t'identical?',\n\t\t'identity',\n\t\t'if-let',\n\t\t'if-not',\n\t\t'if-some',\n\t\t'ifn?',\n\t\t'import',\n\t\t'in-ns',\n\t\t'inc',\n\t\t\"inc'\",\n\t\t'indexed?',\n\t\t'init-proxy',\n\t\t'inst-ms',\n\t\t'inst-ms*',\n\t\t'inst?',\n\t\t'instance?',\n\t\t'int',\n\t\t'int-array',\n\t\t'int?',\n\t\t'integer?',\n\t\t'interleave',\n\t\t'intern',\n\t\t'interpose',\n\t\t'into',\n\t\t'into-array',\n\t\t'ints',\n\t\t'io!',\n\t\t'isa?',\n\t\t'iterate',\n\t\t'iterator-seq',\n\t\t'juxt',\n\t\t'keep',\n\t\t'keep-indexed',\n\t\t'key',\n\t\t'keys',\n\t\t'keyword',\n\t\t'keyword?',\n\t\t'last',\n\t\t'lazy-cat',\n\t\t'lazy-seq',\n\t\t'let',\n\t\t'letfn',\n\t\t'line-seq',\n\t\t'list',\n\t\t'list*',\n\t\t'list?',\n\t\t'load',\n\t\t'load-file',\n\t\t'load-reader',\n\t\t'load-string',\n\t\t'loaded-libs',\n\t\t'locking',\n\t\t'long',\n\t\t'long-array',\n\t\t'longs',\n\t\t'loop',\n\t\t'macroexpand',\n\t\t'macroexpand-1',\n\t\t'make-array',\n\t\t'make-hierarchy',\n\t\t'map',\n\t\t'map-entry?',\n\t\t'map-indexed',\n\t\t'map?',\n\t\t'mapcat',\n\t\t'mapv',\n\t\t'max',\n\t\t'max-key',\n\t\t'memfn',\n\t\t'memoize',\n\t\t'merge',\n\t\t'merge-with',\n\t\t'meta',\n\t\t'method-sig',\n\t\t'methods',\n\t\t'min',\n\t\t'min-key',\n\t\t'mix-collection-hash',\n\t\t'mod',\n\t\t'munge',\n\t\t'name',\n\t\t'namespace',\n\t\t'namespace-munge',\n\t\t'nat-int?',\n\t\t'neg-int?',\n\t\t'neg?',\n\t\t'newline',\n\t\t'next',\n\t\t'nfirst',\n\t\t'nil?',\n\t\t'nnext',\n\t\t'not',\n\t\t'not-any?',\n\t\t'not-empty',\n\t\t'not-every?',\n\t\t'not=',\n\t\t'ns',\n\t\t'ns-aliases',\n\t\t'ns-imports',\n\t\t'ns-interns',\n\t\t'ns-map',\n\t\t'ns-name',\n\t\t'ns-publics',\n\t\t'ns-refers',\n\t\t'ns-resolve',\n\t\t'ns-unalias',\n\t\t'ns-unmap',\n\t\t'nth',\n\t\t'nthnext',\n\t\t'nthrest',\n\t\t'num',\n\t\t'number?',\n\t\t'numerator',\n\t\t'object-array',\n\t\t'odd?',\n\t\t'or',\n\t\t'parents',\n\t\t'partial',\n\t\t'partition',\n\t\t'partition-all',\n\t\t'partition-by',\n\t\t'pcalls',\n\t\t'peek',\n\t\t'persistent!',\n\t\t'pmap',\n\t\t'pop',\n\t\t'pop!',\n\t\t'pop-thread-bindings',\n\t\t'pos-int?',\n\t\t'pos?',\n\t\t'pr',\n\t\t'pr-str',\n\t\t'prefer-method',\n\t\t'prefers',\n\t\t'primitives-classnames',\n\t\t'print',\n\t\t'print-ctor',\n\t\t'print-dup',\n\t\t'print-method',\n\t\t'print-simple',\n\t\t'print-str',\n\t\t'printf',\n\t\t'println',\n\t\t'println-str',\n\t\t'prn',\n\t\t'prn-str',\n\t\t'promise',\n\t\t'proxy',\n\t\t'proxy-call-with-super',\n\t\t'proxy-mappings',\n\t\t'proxy-name',\n\t\t'proxy-super',\n\t\t'push-thread-bindings',\n\t\t'pvalues',\n\t\t'qualified-ident?',\n\t\t'qualified-keyword?',\n\t\t'qualified-symbol?',\n\t\t'quot',\n\t\t'rand',\n\t\t'rand-int',\n\t\t'rand-nth',\n\t\t'random-sample',\n\t\t'range',\n\t\t'ratio?',\n\t\t'rational?',\n\t\t'rationalize',\n\t\t're-find',\n\t\t're-groups',\n\t\t're-matcher',\n\t\t're-matches',\n\t\t're-pattern',\n\t\t're-seq',\n\t\t'read',\n\t\t'read-line',\n\t\t'read-string',\n\t\t'reader-conditional',\n\t\t'reader-conditional?',\n\t\t'realized?',\n\t\t'record?',\n\t\t'reduce',\n\t\t'reduce-kv',\n\t\t'reduced',\n\t\t'reduced?',\n\t\t'reductions',\n\t\t'ref',\n\t\t'ref-history-count',\n\t\t'ref-max-history',\n\t\t'ref-min-history',\n\t\t'ref-set',\n\t\t'refer',\n\t\t'refer-clojure',\n\t\t'reify',\n\t\t'release-pending-sends',\n\t\t'rem',\n\t\t'remove',\n\t\t'remove-all-methods',\n\t\t'remove-method',\n\t\t'remove-ns',\n\t\t'remove-watch',\n\t\t'repeat',\n\t\t'repeatedly',\n\t\t'replace',\n\t\t'replicate',\n\t\t'require',\n\t\t'reset!',\n\t\t'reset-meta!',\n\t\t'reset-vals!',\n\t\t'resolve',\n\t\t'rest',\n\t\t'restart-agent',\n\t\t'resultset-seq',\n\t\t'reverse',\n\t\t'reversible?',\n\t\t'rseq',\n\t\t'rsubseq',\n\t\t'run!',\n\t\t'satisfies?',\n\t\t'second',\n\t\t'select-keys',\n\t\t'send',\n\t\t'send-off',\n\t\t'send-via',\n\t\t'seq',\n\t\t'seq?',\n\t\t'seqable?',\n\t\t'seque',\n\t\t'sequence',\n\t\t'sequential?',\n\t\t'set',\n\t\t'set-agent-send-executor!',\n\t\t'set-agent-send-off-executor!',\n\t\t'set-error-handler!',\n\t\t'set-error-mode!',\n\t\t'set-validator!',\n\t\t'set?',\n\t\t'short',\n\t\t'short-array',\n\t\t'shorts',\n\t\t'shuffle',\n\t\t'shutdown-agents',\n\t\t'simple-ident?',\n\t\t'simple-keyword?',\n\t\t'simple-symbol?',\n\t\t'slurp',\n\t\t'some',\n\t\t'some->',\n\t\t'some->>',\n\t\t'some-fn',\n\t\t'some?',\n\t\t'sort',\n\t\t'sort-by',\n\t\t'sorted-map',\n\t\t'sorted-map-by',\n\t\t'sorted-set',\n\t\t'sorted-set-by',\n\t\t'sorted?',\n\t\t'special-symbol?',\n\t\t'spit',\n\t\t'split-at',\n\t\t'split-with',\n\t\t'str',\n\t\t'string?',\n\t\t'struct',\n\t\t'struct-map',\n\t\t'subs',\n\t\t'subseq',\n\t\t'subvec',\n\t\t'supers',\n\t\t'swap!',\n\t\t'swap-vals!',\n\t\t'symbol',\n\t\t'symbol?',\n\t\t'sync',\n\t\t'tagged-literal',\n\t\t'tagged-literal?',\n\t\t'take',\n\t\t'take-last',\n\t\t'take-nth',\n\t\t'take-while',\n\t\t'test',\n\t\t'the-ns',\n\t\t'thread-bound?',\n\t\t'time',\n\t\t'to-array',\n\t\t'to-array-2d',\n\t\t'trampoline',\n\t\t'transduce',\n\t\t'transient',\n\t\t'tree-seq',\n\t\t'true?',\n\t\t'type',\n\t\t'unchecked-add',\n\t\t'unchecked-add-int',\n\t\t'unchecked-byte',\n\t\t'unchecked-char',\n\t\t'unchecked-dec',\n\t\t'unchecked-dec-int',\n\t\t'unchecked-divide-int',\n\t\t'unchecked-double',\n\t\t'unchecked-float',\n\t\t'unchecked-inc',\n\t\t'unchecked-inc-int',\n\t\t'unchecked-int',\n\t\t'unchecked-long',\n\t\t'unchecked-multiply',\n\t\t'unchecked-multiply-int',\n\t\t'unchecked-negate',\n\t\t'unchecked-negate-int',\n\t\t'unchecked-remainder-int',\n\t\t'unchecked-short',\n\t\t'unchecked-subtract',\n\t\t'unchecked-subtract-int',\n\t\t'underive',\n\t\t'unquote',\n\t\t'unquote-splicing',\n\t\t'unreduced',\n\t\t'unsigned-bit-shift-right',\n\t\t'update',\n\t\t'update-in',\n\t\t'update-proxy',\n\t\t'uri?',\n\t\t'use',\n\t\t'uuid?',\n\t\t'val',\n\t\t'vals',\n\t\t'var-get',\n\t\t'var-set',\n\t\t'var?',\n\t\t'vary-meta',\n\t\t'vec',\n\t\t'vector',\n\t\t'vector-of',\n\t\t'vector?',\n\t\t'volatile!',\n\t\t'volatile?',\n\t\t'vreset!',\n\t\t'vswap!',\n\t\t'when',\n\t\t'when-first',\n\t\t'when-let',\n\t\t'when-not',\n\t\t'when-some',\n\t\t'while',\n\t\t'with-bindings',\n\t\t'with-bindings*',\n\t\t'with-in-str',\n\t\t'with-loading-context',\n\t\t'with-local-vars',\n\t\t'with-meta',\n\t\t'with-open',\n\t\t'with-out-str',\n\t\t'with-precision',\n\t\t'with-redefs',\n\t\t'with-redefs-fn',\n\t\t'xml-seq',\n\t\t'zero?',\n\t\t'zipmap'\n\t],\n\n\ttokenizer: {\n\t\troot: [\n\t\t\t// whitespaces and comments\n\t\t\t{ include: '@whitespace' },\n\n\t\t\t// numbers\n\t\t\t[/@numbers/, 'number'],\n\n\t\t\t// characters\n\t\t\t[/@characters/, 'string'],\n\n\t\t\t// strings\n\t\t\t{ include: '@string' },\n\n\t\t\t// brackets\n\t\t\t[/[()\\[\\]{}]/, '@brackets'],\n\n\t\t\t// regular expressions\n\t\t\t[/\\/#\"(?:\\.|(?:\")|[^\"\\n])*\"\\/g/, 'regexp'],\n\n\t\t\t// reader macro characters\n\t\t\t[/[#'@^`~]/, 'meta'],\n\n\t\t\t// symbols\n\t\t\t[\n\t\t\t\t/@qualifiedSymbols/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'^:.+$': 'constant', // Clojure keywords (e.g., `:foo/bar`)\n\t\t\t\t\t\t'@specialForms': 'keyword',\n\t\t\t\t\t\t'@coreSymbols': 'keyword',\n\t\t\t\t\t\t'@constants': 'constant',\n\t\t\t\t\t\t'@default': 'identifier'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t],\n\n\t\twhitespace: [\n\t\t\t[/[\\s,]+/, 'white'],\n\t\t\t[/;.*$/, 'comment'],\n\t\t\t[/\\(comment\\b/, 'comment', '@comment']\n\t\t],\n\n\t\tcomment: [\n\t\t\t[/\\(/, 'comment', '@push'],\n\t\t\t[/\\)/, 'comment', '@pop'],\n\t\t\t[/[^()]/, 'comment']\n\t\t],\n\n\t\tstring: [[/\"/, 'string', '@multiLineString']],\n\n\t\tmultiLineString: [\n\t\t\t[/\"/, 'string', '@popall'],\n\t\t\t[/@escapes/, 'string.escape'],\n\t\t\t[/./, 'string']\n\t\t]\n\t}\n}",
  "coffee": "<languages.IMonarchLanguage>{\n\tdefaultToken: '',\n\tignoreCase: true,\n\ttokenPostfix: '.coffee',\n\n\tbrackets: [\n\t\t{ open: '{', close: '}', token: 'delimiter.curly' },\n\t\t{ open: '[', close: ']', token: 'delimiter.square' },\n\t\t{ open: '(', close: ')', token: 'delimiter.parenthesis' }\n\t],\n\n\tregEx: /\\/(?!\\/\\/)(?:[^\\/\\\\]|\\\\.)*\\/[igm]*/,\n\n\tkeywords: [\n\t\t'and',\n\t\t'or',\n\t\t'is',\n\t\t'isnt',\n\t\t'not',\n\t\t'on',\n\t\t'yes',\n\t\t'@',\n\t\t'no',\n\t\t'off',\n\t\t'true',\n\t\t'false',\n\t\t'null',\n\t\t'this',\n\t\t'new',\n\t\t'delete',\n\t\t'typeof',\n\t\t'in',\n\t\t'instanceof',\n\t\t'return',\n\t\t'throw',\n\t\t'break',\n\t\t'continue',\n\t\t'debugger',\n\t\t'if',\n\t\t'else',\n\t\t'switch',\n\t\t'for',\n\t\t'while',\n\t\t'do',\n\t\t'try',\n\t\t'catch',\n\t\t'finally',\n\t\t'class',\n\t\t'extends',\n\t\t'super',\n\t\t'undefined',\n\t\t'then',\n\t\t'unless',\n\t\t'until',\n\t\t'loop',\n\t\t'of',\n\t\t'by',\n\t\t'when'\n\t],\n\n\t// we include these common regular expressions\n\tsymbols: /[=><!~?&%|+\\-*\\/\\^\\.,\\:]+/,\n\tescapes: /\\\\(?:[abfnrtv\\\\\"'$]|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n\n\t// The main tokenizer for our languages\n\ttokenizer: {\n\t\troot: [\n\t\t\t// identifiers and keywords\n\t\t\t[/\\@[a-zA-Z_]\\w*/, 'variable.predefined'],\n\t\t\t[\n\t\t\t\t/[a-zA-Z_]\\w*/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\tthis: 'variable.predefined',\n\t\t\t\t\t\t'@keywords': { token: 'keyword.$0' },\n\t\t\t\t\t\t'@default': ''\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t// whitespace\n\t\t\t[/[ \\t\\r\\n]+/, ''],\n\n\t\t\t// Comments\n\t\t\t[/###/, 'comment', '@comment'],\n\t\t\t[/#.*$/, 'comment'],\n\n\t\t\t// regular expressions\n\t\t\t['///', { token: 'regexp', next: '@hereregexp' }],\n\n\t\t\t[/^(\\s*)(@regEx)/, ['', 'regexp']],\n\t\t\t[/(\\()(\\s*)(@regEx)/, ['@brackets', '', 'regexp']],\n\t\t\t[/(\\,)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\n\t\t\t[/(\\=)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\n\t\t\t[/(\\:)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\n\t\t\t[/(\\[)(\\s*)(@regEx)/, ['@brackets', '', 'regexp']],\n\t\t\t[/(\\!)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\n\t\t\t[/(\\&)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\n\t\t\t[/(\\|)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\n\t\t\t[/(\\?)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\n\t\t\t[/(\\{)(\\s*)(@regEx)/, ['@brackets', '', 'regexp']],\n\t\t\t[/(\\;)(\\s*)(@regEx)/, ['', '', 'regexp']],\n\n\t\t\t// delimiters\n\t\t\t[\n\t\t\t\t/}/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'$S2==interpolatedstring': {\n\t\t\t\t\t\t\ttoken: 'string',\n\t\t\t\t\t\t\tnext: '@pop'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'@default': '@brackets'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/[{}()\\[\\]]/, '@brackets'],\n\t\t\t[/@symbols/, 'delimiter'],\n\n\t\t\t// numbers\n\t\t\t[/\\d+[eE]([\\-+]?\\d+)?/, 'number.float'],\n\t\t\t[/\\d+\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\n\t\t\t[/0[xX][0-9a-fA-F]+/, 'number.hex'],\n\t\t\t[/0[0-7]+(?!\\d)/, 'number.octal'],\n\t\t\t[/\\d+/, 'number'],\n\n\t\t\t// delimiter: after number because of .\\d floats\n\t\t\t[/[,.]/, 'delimiter'],\n\n\t\t\t// strings:\n\t\t\t[/\"\"\"/, 'string', '@herestring.\"\"\"'],\n\t\t\t[/'''/, 'string', \"@herestring.'''\"],\n\t\t\t[\n\t\t\t\t/\"/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@eos': 'string',\n\t\t\t\t\t\t'@default': { token: 'string', next: '@string.\"' }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t[\n\t\t\t\t/'/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@eos': 'string',\n\t\t\t\t\t\t'@default': { token: 'string', next: \"@string.'\" }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t],\n\n\t\tstring: [\n\t\t\t[/[^\"'\\#\\\\]+/, 'string'],\n\t\t\t[/@escapes/, 'string.escape'],\n\t\t\t[/\\./, 'string.escape.invalid'],\n\t\t\t[/\\./, 'string.escape.invalid'],\n\n\t\t\t[\n\t\t\t\t/#{/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'$S2==\"': {\n\t\t\t\t\t\t\ttoken: 'string',\n\t\t\t\t\t\t\tnext: 'root.interpolatedstring'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'@default': 'string'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t[\n\t\t\t\t/[\"']/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'$#==$S2': { token: 'string', next: '@pop' },\n\t\t\t\t\t\t'@default': 'string'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/#/, 'string']\n\t\t],\n\n\t\therestring: [\n\t\t\t[\n\t\t\t\t/(\"\"\"|''')/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'$1==$S2': { token: 'string', next: '@pop' },\n\t\t\t\t\t\t'@default': 'string'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/[^#\\\\'\"]+/, 'string'],\n\t\t\t[/['\"]+/, 'string'],\n\t\t\t[/@escapes/, 'string.escape'],\n\t\t\t[/\\./, 'string.escape.invalid'],\n\n\t\t\t[/#{/, { token: 'string.quote', next: 'root.interpolatedstring' }],\n\t\t\t[/#/, 'string']\n\t\t],\n\n\t\tcomment: [\n\t\t\t[/[^#]+/, 'comment'],\n\t\t\t[/###/, 'comment', '@pop'],\n\t\t\t[/#/, 'comment']\n\t\t],\n\n\t\thereregexp: [\n\t\t\t[/[^\\\\\\/#]+/, 'regexp'],\n\t\t\t[/\\\\./, 'regexp'],\n\t\t\t[/#.*$/, 'comment'],\n\t\t\t['///[igm]*', { token: 'regexp', next: '@pop' }],\n\t\t\t[/\\//, 'regexp']\n\t\t]\n\t}\n}",
  "cpp": "<languages.IMonarchLanguage>{\n\tdefaultToken: '',\n\ttokenPostfix: '.cpp',\n\n\tbrackets: [\n\t\t{ token: 'delimiter.curly', open: '{', close: '}' },\n\t\t{ token: 'delimiter.parenthesis', open: '(', close: ')' },\n\t\t{ token: 'delimiter.square', open: '[', close: ']' },\n\t\t{ token: 'delimiter.angle', open: '<', close: '>' }\n\t],\n\n\tkeywords: [\n\t\t'abstract',\n\t\t'amp',\n\t\t'array',\n\t\t'auto',\n\t\t'bool',\n\t\t'break',\n\t\t'case',\n\t\t'catch',\n\t\t'char',\n\t\t'class',\n\t\t'const',\n\t\t'constexpr',\n\t\t'const_cast',\n\t\t'continue',\n\t\t'cpu',\n\t\t'decltype',\n\t\t'default',\n\t\t'delegate',\n\t\t'delete',\n\t\t'do',\n\t\t'double',\n\t\t'dynamic_cast',\n\t\t'each',\n\t\t'else',\n\t\t'enum',\n\t\t'event',\n\t\t'explicit',\n\t\t'export',\n\t\t'extern',\n\t\t'false',\n\t\t'final',\n\t\t'finally',\n\t\t'float',\n\t\t'for',\n\t\t'friend',\n\t\t'gcnew',\n\t\t'generic',\n\t\t'goto',\n\t\t'if',\n\t\t'in',\n\t\t'initonly',\n\t\t'inline',\n\t\t'int',\n\t\t'interface',\n\t\t'interior_ptr',\n\t\t'internal',\n\t\t'literal',\n\t\t'long',\n\t\t'mutable',\n\t\t'namespace',\n\t\t'new',\n\t\t'noexcept',\n\t\t'nullptr',\n\t\t'__nullptr',\n\t\t'operator',\n\t\t'override',\n\t\t'partial',\n\t\t'pascal',\n\t\t'pin_ptr',\n\t\t'private',\n\t\t'property',\n\t\t'protected',\n\t\t'public',\n\t\t'ref',\n\t\t'register',\n\t\t'reinterpret_cast',\n\t\t'restrict',\n\t\t'return',\n\t\t'safe_cast',\n\t\t'sealed',\n\t\t'short',\n\t\t'signed',\n\t\t'sizeof',\n\t\t'static',\n\t\t'static_assert',\n\t\t'static_cast',\n\t\t'struct',\n\t\t'switch',\n\t\t'template',\n\t\t'this',\n\t\t'thread_local',\n\t\t'throw',\n\t\t'tile_static',\n\t\t'true',\n\t\t'try',\n\t\t'typedef',\n\t\t'typeid',\n\t\t'typename',\n\t\t'union',\n\t\t'unsigned',\n\t\t'using',\n\t\t'virtual',\n\t\t'void',\n\t\t'volatile',\n\t\t'wchar_t',\n\t\t'where',\n\t\t'while',\n\n\t\t'_asm', // reserved word with one underscores\n\t\t'_based',\n\t\t'_cdecl',\n\t\t'_declspec',\n\t\t'_fastcall',\n\t\t'_if_exists',\n\t\t'_if_not_exists',\n\t\t'_inline',\n\t\t'_multiple_inheritance',\n\t\t'_pascal',\n\t\t'_single_inheritance',\n\t\t'_stdcall',\n\t\t'_virtual_inheritance',\n\t\t'_w64',\n\n\t\t'__abstract', // reserved word with two underscores\n\t\t'__alignof',\n\t\t'__asm',\n\t\t'__assume',\n\t\t'__based',\n\t\t'__box',\n\t\t'__builtin_alignof',\n\t\t'__cdecl',\n\t\t'__clrcall',\n\t\t'__declspec',\n\t\t'__delegate',\n\t\t'__event',\n\t\t'__except',\n\t\t'__fastcall',\n\t\t'__finally',\n\t\t'__forceinline',\n\t\t'__gc',\n\t\t'__hook',\n\t\t'__identifier',\n\t\t'__if_exists',\n\t\t'__if_not_exists',\n\t\t'__inline',\n\t\t'__int128',\n\t\t'__int16',\n\t\t'__int32',\n\t\t'__int64',\n\t\t'__int8',\n\t\t'__interface',\n\t\t'__leave',\n\t\t'__m128',\n\t\t'__m128d',\n\t\t'__m128i',\n\t\t'__m256',\n\t\t'__m256d',\n\t\t'__m256i',\n\t\t'__m512',\n\t\t'__m512d',\n\t\t'__m512i',\n\t\t'__m64',\n\t\t'__multiple_inheritance',\n\t\t'__newslot',\n\t\t'__nogc',\n\t\t'__noop',\n\t\t'__nounwind',\n\t\t'__novtordisp',\n\t\t'__pascal',\n\t\t'__pin',\n\t\t'__pragma',\n\t\t'__property',\n\t\t'__ptr32',\n\t\t'__ptr64',\n\t\t'__raise',\n\t\t'__restrict',\n\t\t'__resume',\n\t\t'__sealed',\n\t\t'__single_inheritance',\n\t\t'__stdcall',\n\t\t'__super',\n\t\t'__thiscall',\n\t\t'__try',\n\t\t'__try_cast',\n\t\t'__typeof',\n\t\t'__unaligned',\n\t\t'__unhook',\n\t\t'__uuidof',\n\t\t'__value',\n\t\t'__virtual_inheritance',\n\t\t'__w64',\n\t\t'__wchar_t'\n\t],\n\n\toperators: [\n\t\t'=',\n\t\t'>',\n\t\t'<',\n\t\t'!',\n\t\t'~',\n\t\t'?',\n\t\t':',\n\t\t'==',\n\t\t'<=',\n\t\t'>=',\n\t\t'!=',\n\t\t'&&',\n\t\t'||',\n\t\t'++',\n\t\t'--',\n\t\t'+',\n\t\t'-',\n\t\t'*',\n\t\t'/',\n\t\t'&',\n\t\t'|',\n\t\t'^',\n\t\t'%',\n\t\t'<<',\n\t\t'>>',\n\t\t'+=',\n\t\t'-=',\n\t\t'*=',\n\t\t'/=',\n\t\t'&=',\n\t\t'|=',\n\t\t'^=',\n\t\t'%=',\n\t\t'<<=',\n\t\t'>>='\n\t],\n\n\t// we include these common regular expressions\n\tsymbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n\tescapes: /\\\\(?:[0abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n\tintegersuffix: /([uU](ll|LL|l|L)|(ll|LL|l|L)?[uU]?)/,\n\tfloatsuffix: /[fFlL]?/,\n\tencoding: /u|u8|U|L/,\n\n\t// The main tokenizer for our languages\n\ttokenizer: {\n\t\troot: [\n\t\t\t// C++ 11 Raw String\n\t\t\t[/@encoding?R\\\"(?:([^ ()\\\\\\t]*))\\(/, { token: 'string.raw.begin', next: '@raw.$1' }],\n\n\t\t\t// identifiers and keywords\n\t\t\t[\n\t\t\t\t/[a-zA-Z_]\\w*/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@keywords': { token: 'keyword.$0' },\n\t\t\t\t\t\t'@default': 'identifier'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t// The preprocessor checks must be before whitespace as they check /^\\s*#/ which\n\t\t\t// otherwise fails to match later after other whitespace has been removed.\n\n\t\t\t// Inclusion\n\t\t\t[/^\\s*#\\s*include/, { token: 'keyword.directive.include', next: '@include' }],\n\n\t\t\t// Preprocessor directive\n\t\t\t[/^\\s*#\\s*\\w+/, 'keyword.directive'],\n\n\t\t\t// whitespace\n\t\t\t{ include: '@whitespace' },\n\n\t\t\t// [[ attributes ]].\n\t\t\t[/\\[\\s*\\[/, { token: 'annotation', next: '@annotation' }],\n\t\t\t// delimiters and operators\n\t\t\t[/[{}()<>\\[\\]]/, '@brackets'],\n\t\t\t[\n\t\t\t\t/@symbols/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@operators': 'delimiter',\n\t\t\t\t\t\t'@default': ''\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t// numbers\n\t\t\t[/\\d*\\d+[eE]([\\-+]?\\d+)?(@floatsuffix)/, 'number.float'],\n\t\t\t[/\\d*\\.\\d+([eE][\\-+]?\\d+)?(@floatsuffix)/, 'number.float'],\n\t\t\t[/0[xX][0-9a-fA-F']*[0-9a-fA-F](@integersuffix)/, 'number.hex'],\n\t\t\t[/0[0-7']*[0-7](@integersuffix)/, 'number.octal'],\n\t\t\t[/0[bB][0-1']*[0-1](@integersuffix)/, 'number.binary'],\n\t\t\t[/\\d[\\d']*\\d(@integersuffix)/, 'number'],\n\t\t\t[/\\d(@integersuffix)/, 'number'],\n\n\t\t\t// delimiter: after number because of .\\d floats\n\t\t\t[/[;,.]/, 'delimiter'],\n\n\t\t\t// strings\n\t\t\t[/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'], // non-teminated string\n\t\t\t[/\"/, 'string', '@string'],\n\n\t\t\t// characters\n\t\t\t[/'[^\\\\']'/, 'string'],\n\t\t\t[/(')(@escapes)(')/, ['string', 'string.escape', 'string']],\n\t\t\t[/'/, 'string.invalid']\n\t\t],\n\n\t\twhitespace: [\n\t\t\t[/[ \\t\\r\\n]+/, ''],\n\t\t\t[/\\/\\*\\*(?!\\/)/, 'comment.doc', '@doccomment'],\n\t\t\t[/\\/\\*/, 'comment', '@comment'],\n\t\t\t[/\\/\\/.*\\\\$/, 'comment', '@linecomment'],\n\t\t\t[/\\/\\/.*$/, 'comment']\n\t\t],\n\n\t\tcomment: [\n\t\t\t[/[^\\/*]+/, 'comment'],\n\t\t\t[/\\*\\//, 'comment', '@pop'],\n\t\t\t[/[\\/*]/, 'comment']\n\t\t],\n\n\t\t//For use with continuous line comments\n\t\tlinecomment: [\n\t\t\t[/.*[^\\\\]$/, 'comment', '@pop'],\n\t\t\t[/[^]+/, 'comment']\n\t\t],\n\n\t\t//Identical copy of comment above, except for the addition of .doc\n\t\tdoccomment: [\n\t\t\t[/[^\\/*]+/, 'comment.doc'],\n\t\t\t[/\\*\\//, 'comment.doc', '@pop'],\n\t\t\t[/[\\/*]/, 'comment.doc']\n\t\t],\n\n\t\tstring: [\n\t\t\t[/[^\\\\\"]+/, 'string'],\n\t\t\t[/@escapes/, 'string.escape'],\n\t\t\t[/\\\\./, 'string.escape.invalid'],\n\t\t\t[/\"/, 'string', '@pop']\n\t\t],\n\n\t\traw: [\n\t\t\t[/[^)]+/, 'string.raw'],\n\t\t\t[/\\)$S2\\\"/, { token: 'string.raw.end', next: '@pop' }],\n\t\t\t[/\\)/, 'string.raw']\n\t\t],\n\n\t\tannotation: [\n\t\t\t{ include: '@whitespace' },\n\t\t\t[/using|alignas/, 'keyword'],\n\t\t\t[/[a-zA-Z0-9_]+/, 'annotation'],\n\t\t\t[/[,:]/, 'delimiter'],\n\t\t\t[/[()]/, '@brackets'],\n\t\t\t[/\\]\\s*\\]/, { token: 'annotation', next: '@pop' }]\n\t\t],\n\n\t\tinclude: [\n\t\t\t[\n\t\t\t\t/(\\s*)(<)([^<>]*)(>)/,\n\t\t\t\t[\n\t\t\t\t\t'',\n\t\t\t\t\t'keyword.directive.include.begin',\n\t\t\t\t\t'string.include.identifier',\n\t\t\t\t\t{ token: 'keyword.directive.include.end', next: '@pop' }\n\t\t\t\t]\n\t\t\t],\n\t\t\t[\n\t\t\t\t/(\\s*)(\")([^\"]*)(\")/,\n\t\t\t\t[\n\t\t\t\t\t'',\n\t\t\t\t\t'keyword.directive.include.begin',\n\t\t\t\t\t'string.include.identifier',\n\t\t\t\t\t{ token: 'keyword.directive.include.end', next: '@pop' }\n\t\t\t\t]\n\t\t\t]\n\t\t]\n\t}\n}",
  "csharp": "<languages.IMonarchLanguage>{\n\tdefaultToken: '',\n\ttokenPostfix: '.cs',\n\n\tbrackets: [\n\t\t{ open: '{', close: '}', token: 'delimiter.curly' },\n\t\t{ open: '[', close: ']', token: 'delimiter.square' },\n\t\t{ open: '(', close: ')', token: 'delimiter.parenthesis' },\n\t\t{ open: '<', close: '>', token: 'delimiter.angle' }\n\t],\n\n\tkeywords: [\n\t\t'extern',\n\t\t'alias',\n\t\t'using',\n\t\t'bool',\n\t\t'decimal',\n\t\t'sbyte',\n\t\t'byte',\n\t\t'short',\n\t\t'ushort',\n\t\t'int',\n\t\t'uint',\n\t\t'long',\n\t\t'ulong',\n\t\t'char',\n\t\t'float',\n\t\t'double',\n\t\t'object',\n\t\t'dynamic',\n\t\t'string',\n\t\t'assembly',\n\t\t'is',\n\t\t'as',\n\t\t'ref',\n\t\t'out',\n\t\t'this',\n\t\t'base',\n\t\t'new',\n\t\t'typeof',\n\t\t'void',\n\t\t'checked',\n\t\t'unchecked',\n\t\t'default',\n\t\t'delegate',\n\t\t'var',\n\t\t'const',\n\t\t'if',\n\t\t'else',\n\t\t'switch',\n\t\t'case',\n\t\t'while',\n\t\t'do',\n\t\t'for',\n\t\t'foreach',\n\t\t'in',\n\t\t'break',\n\t\t'continue',\n\t\t'goto',\n\t\t'return',\n\t\t'throw',\n\t\t'try',\n\t\t'catch',\n\t\t'finally',\n\t\t'lock',\n\t\t'yield',\n\t\t'from',\n\t\t'let',\n\t\t'where',\n\t\t'join',\n\t\t'on',\n\t\t'equals',\n\t\t'into',\n\t\t'orderby',\n\t\t'ascending',\n\t\t'descending',\n\t\t'select',\n\t\t'group',\n\t\t'by',\n\t\t'namespace',\n\t\t'partial',\n\t\t'class',\n\t\t'field',\n\t\t'event',\n\t\t'method',\n\t\t'param',\n\t\t'public',\n\t\t'protected',\n\t\t'internal',\n\t\t'private',\n\t\t'abstract',\n\t\t'sealed',\n\t\t'static',\n\t\t'struct',\n\t\t'readonly',\n\t\t'volatile',\n\t\t'virtual',\n\t\t'override',\n\t\t'params',\n\t\t'get',\n\t\t'set',\n\t\t'add',\n\t\t'remove',\n\t\t'operator',\n\t\t'true',\n\t\t'false',\n\t\t'implicit',\n\t\t'explicit',\n\t\t'interface',\n\t\t'enum',\n\t\t'null',\n\t\t'async',\n\t\t'await',\n\t\t'fixed',\n\t\t'sizeof',\n\t\t'stackalloc',\n\t\t'unsafe',\n\t\t'nameof',\n\t\t'when'\n\t],\n\n\tnamespaceFollows: ['namespace', 'using'],\n\n\tparenFollows: ['if', 'for', 'while', 'switch', 'foreach', 'using', 'catch', 'when'],\n\n\toperators: [\n\t\t'=',\n\t\t'??',\n\t\t'||',\n\t\t'&&',\n\t\t'|',\n\t\t'^',\n\t\t'&',\n\t\t'==',\n\t\t'!=',\n\t\t'<=',\n\t\t'>=',\n\t\t'<<',\n\t\t'+',\n\t\t'-',\n\t\t'*',\n\t\t'/',\n\t\t'%',\n\t\t'!',\n\t\t'~',\n\t\t'++',\n\t\t'--',\n\t\t'+=',\n\t\t'-=',\n\t\t'*=',\n\t\t'/=',\n\t\t'%=',\n\t\t'&=',\n\t\t'|=',\n\t\t'^=',\n\t\t'<<=',\n\t\t'>>=',\n\t\t'>>',\n\t\t'=>'\n\t],\n\n\tsymbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n\n\t// escape sequences\n\tescapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n\n\t// The main tokenizer for our languages\n\ttokenizer: {\n\t\troot: [\n\t\t\t// identifiers and keywords\n\t\t\t[\n\t\t\t\t/\\@?[a-zA-Z_]\\w*/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@namespaceFollows': {\n\t\t\t\t\t\t\ttoken: 'keyword.$0',\n\t\t\t\t\t\t\tnext: '@namespace'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'@keywords': {\n\t\t\t\t\t\t\ttoken: 'keyword.$0',\n\t\t\t\t\t\t\tnext: '@qualified'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'@default': { token: 'identifier', next: '@qualified' }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t// whitespace\n\t\t\t{ include: '@whitespace' },\n\n\t\t\t// delimiters and operators\n\t\t\t[\n\t\t\t\t/}/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'$S2==interpolatedstring': {\n\t\t\t\t\t\t\ttoken: 'string.quote',\n\t\t\t\t\t\t\tnext: '@pop'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'$S2==litinterpstring': {\n\t\t\t\t\t\t\ttoken: 'string.quote',\n\t\t\t\t\t\t\tnext: '@pop'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'@default': '@brackets'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/[{}()\\[\\]]/, '@brackets'],\n\t\t\t[/[<>](?!@symbols)/, '@brackets'],\n\t\t\t[\n\t\t\t\t/@symbols/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@operators': 'delimiter',\n\t\t\t\t\t\t'@default': ''\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t// numbers\n\t\t\t[/[0-9_]*\\.[0-9_]+([eE][\\-+]?\\d+)?[fFdD]?/, 'number.float'],\n\t\t\t[/0[xX][0-9a-fA-F_]+/, 'number.hex'],\n\t\t\t[/0[bB][01_]+/, 'number.hex'], // binary: use same theme style as hex\n\t\t\t[/[0-9_]+/, 'number'],\n\n\t\t\t// delimiter: after number because of .\\d floats\n\t\t\t[/[;,.]/, 'delimiter'],\n\n\t\t\t// strings\n\t\t\t[/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'], // non-teminated string\n\t\t\t[/\"/, { token: 'string.quote', next: '@string' }],\n\t\t\t[/\\$\\@\"/, { token: 'string.quote', next: '@litinterpstring' }],\n\t\t\t[/\\@\"/, { token: 'string.quote', next: '@litstring' }],\n\t\t\t[/\\$\"/, { token: 'string.quote', next: '@interpolatedstring' }],\n\n\t\t\t// characters\n\t\t\t[/'[^\\\\']'/, 'string'],\n\t\t\t[/(')(@escapes)(')/, ['string', 'string.escape', 'string']],\n\t\t\t[/'/, 'string.invalid']\n\t\t],\n\n\t\tqualified: [\n\t\t\t[\n\t\t\t\t/[a-zA-Z_][\\w]*/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@keywords': { token: 'keyword.$0' },\n\t\t\t\t\t\t'@default': 'identifier'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/\\./, 'delimiter'],\n\t\t\t['', '', '@pop']\n\t\t],\n\n\t\tnamespace: [\n\t\t\t{ include: '@whitespace' },\n\t\t\t[/[A-Z]\\w*/, 'namespace'],\n\t\t\t[/[\\.=]/, 'delimiter'],\n\t\t\t['', '', '@pop']\n\t\t],\n\n\t\tcomment: [\n\t\t\t[/[^\\/*]+/, 'comment'],\n\t\t\t// [/\\/\\*/,    'comment', '@push' ],    // no nested comments :-(\n\t\t\t['\\\\*/', 'comment', '@pop'],\n\t\t\t[/[\\/*]/, 'comment']\n\t\t],\n\n\t\tstring: [\n\t\t\t[/[^\\\\\"]+/, 'string'],\n\t\t\t[/@escapes/, 'string.escape'],\n\t\t\t[/\\\\./, 'string.escape.invalid'],\n\t\t\t[/\"/, { token: 'string.quote', next: '@pop' }]\n\t\t],\n\n\t\tlitstring: [\n\t\t\t[/[^\"]+/, 'string'],\n\t\t\t[/\"\"/, 'string.escape'],\n\t\t\t[/\"/, { token: 'string.quote', next: '@pop' }]\n\t\t],\n\n\t\tlitinterpstring: [\n\t\t\t[/[^\"{]+/, 'string'],\n\t\t\t[/\"\"/, 'string.escape'],\n\t\t\t[/{{/, 'string.escape'],\n\t\t\t[/}}/, 'string.escape'],\n\t\t\t[/{/, { token: 'string.quote', next: 'root.litinterpstring' }],\n\t\t\t[/\"/, { token: 'string.quote', next: '@pop' }]\n\t\t],\n\n\t\tinterpolatedstring: [\n\t\t\t[/[^\\\\\"{]+/, 'string'],\n\t\t\t[/@escapes/, 'string.escape'],\n\t\t\t[/\\\\./, 'string.escape.invalid'],\n\t\t\t[/{{/, 'string.escape'],\n\t\t\t[/}}/, 'string.escape'],\n\t\t\t[/{/, { token: 'string.quote', next: 'root.interpolatedstring' }],\n\t\t\t[/\"/, { token: 'string.quote', next: '@pop' }]\n\t\t],\n\n\t\twhitespace: [\n\t\t\t[/^[ \\t\\v\\f]*#((r)|(load))(?=\\s)/, 'directive.csx'],\n\t\t\t[/^[ \\t\\v\\f]*#\\w.*$/, 'namespace.cpp'],\n\t\t\t[/[ \\t\\v\\f\\r\\n]+/, ''],\n\t\t\t[/\\/\\*/, 'comment', '@comment'],\n\t\t\t[/\\/\\/.*$/, 'comment']\n\t\t]\n\t}\n}",
  "csp": "<languages.IMonarchLanguage>{\n\t// Set defaultToken to invalid to see what you do not tokenize yet\n\t// defaultToken: 'invalid',\n\tkeywords: [],\n\ttypeKeywords: [],\n\ttokenPostfix: '.csp',\n\toperators: [],\n\tsymbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n\tescapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n\ttokenizer: {\n\t\troot: [\n\t\t\t[/child-src/, 'string.quote'],\n\t\t\t[/connect-src/, 'string.quote'],\n\t\t\t[/default-src/, 'string.quote'],\n\t\t\t[/font-src/, 'string.quote'],\n\t\t\t[/frame-src/, 'string.quote'],\n\t\t\t[/img-src/, 'string.quote'],\n\t\t\t[/manifest-src/, 'string.quote'],\n\t\t\t[/media-src/, 'string.quote'],\n\t\t\t[/object-src/, 'string.quote'],\n\t\t\t[/script-src/, 'string.quote'],\n\t\t\t[/style-src/, 'string.quote'],\n\t\t\t[/worker-src/, 'string.quote'],\n\t\t\t[/base-uri/, 'string.quote'],\n\t\t\t[/plugin-types/, 'string.quote'],\n\t\t\t[/sandbox/, 'string.quote'],\n\t\t\t[/disown-opener/, 'string.quote'],\n\t\t\t[/form-action/, 'string.quote'],\n\t\t\t[/frame-ancestors/, 'string.quote'],\n\t\t\t[/report-uri/, 'string.quote'],\n\t\t\t[/report-to/, 'string.quote'],\n\t\t\t[/upgrade-insecure-requests/, 'string.quote'],\n\t\t\t[/block-all-mixed-content/, 'string.quote'],\n\t\t\t[/require-sri-for/, 'string.quote'],\n\t\t\t[/reflected-xss/, 'string.quote'],\n\t\t\t[/referrer/, 'string.quote'],\n\t\t\t[/policy-uri/, 'string.quote'],\n\t\t\t[/'self'/, 'string.quote'],\n\t\t\t[/'unsafe-inline'/, 'string.quote'],\n\t\t\t[/'unsafe-eval'/, 'string.quote'],\n\t\t\t[/'strict-dynamic'/, 'string.quote'],\n\t\t\t[/'unsafe-hashed-attributes'/, 'string.quote']\n\t\t]\n\t}\n}",
  "css": "<languages.IMonarchLanguage>{\n\tdefaultToken: '',\n\ttokenPostfix: '.css',\n\n\tws: '[ \\t\\n\\r\\f]*', // whitespaces (referenced in several rules)\n\tidentifier:\n\t\t'-?-?([a-zA-Z]|(\\\\\\\\(([0-9a-fA-F]{1,6}\\\\s?)|[^[0-9a-fA-F])))([\\\\w\\\\-]|(\\\\\\\\(([0-9a-fA-F]{1,6}\\\\s?)|[^[0-9a-fA-F])))*',\n\n\tbrackets: [\n\t\t{ open: '{', close: '}', token: 'delimiter.bracket' },\n\t\t{ open: '[', close: ']', token: 'delimiter.bracket' },\n\t\t{ open: '(', close: ')', token: 'delimiter.parenthesis' },\n\t\t{ open: '<', close: '>', token: 'delimiter.angle' }\n\t],\n\n\ttokenizer: {\n\t\troot: [{ include: '@selector' }],\n\n\t\tselector: [\n\t\t\t{ include: '@comments' },\n\t\t\t{ include: '@import' },\n\t\t\t{ include: '@strings' },\n\t\t\t[\n\t\t\t\t'[@](keyframes|-webkit-keyframes|-moz-keyframes|-o-keyframes)',\n\t\t\t\t{ token: 'keyword', next: '@keyframedeclaration' }\n\t\t\t],\n\t\t\t['[@](page|content|font-face|-moz-document)', { token: 'keyword' }],\n\t\t\t['[@](charset|namespace)', { token: 'keyword', next: '@declarationbody' }],\n\t\t\t[\n\t\t\t\t'(url-prefix)(\\\\()',\n\t\t\t\t['attribute.value', { token: 'delimiter.parenthesis', next: '@urldeclaration' }]\n\t\t\t],\n\t\t\t[\n\t\t\t\t'(url)(\\\\()',\n\t\t\t\t['attribute.value', { token: 'delimiter.parenthesis', next: '@urldeclaration' }]\n\t\t\t],\n\t\t\t{ include: '@selectorname' },\n\t\t\t['[\\\\*]', 'tag'], // selector symbols\n\t\t\t['[>\\\\+,]', 'delimiter'], // selector operators\n\t\t\t['\\\\[', { token: 'delimiter.bracket', next: '@selectorattribute' }],\n\t\t\t['{', { token: 'delimiter.bracket', next: '@selectorbody' }]\n\t\t],\n\n\t\tselectorbody: [\n\t\t\t{ include: '@comments' },\n\t\t\t['[*_]?@identifier@ws:(?=(\\\\s|\\\\d|[^{;}]*[;}]))', 'attribute.name', '@rulevalue'], // rule definition: to distinguish from a nested selector check for whitespace, number or a semicolon\n\t\t\t['}', { token: 'delimiter.bracket', next: '@pop' }]\n\t\t],\n\n\t\tselectorname: [\n\t\t\t['(\\\\.|#(?=[^{])|%|(@identifier)|:)+', 'tag'] // selector (.foo, div, ...)\n\t\t],\n\n\t\tselectorattribute: [{ include: '@term' }, [']', { token: 'delimiter.bracket', next: '@pop' }]],\n\n\t\tterm: [\n\t\t\t{ include: '@comments' },\n\t\t\t[\n\t\t\t\t'(url-prefix)(\\\\()',\n\t\t\t\t['attribute.value', { token: 'delimiter.parenthesis', next: '@urldeclaration' }]\n\t\t\t],\n\t\t\t[\n\t\t\t\t'(url)(\\\\()',\n\t\t\t\t['attribute.value', { token: 'delimiter.parenthesis', next: '@urldeclaration' }]\n\t\t\t],\n\t\t\t{ include: '@functioninvocation' },\n\t\t\t{ include: '@numbers' },\n\t\t\t{ include: '@name' },\n\t\t\t{ include: '@strings' },\n\t\t\t['([<>=\\\\+\\\\-\\\\*\\\\/\\\\^\\\\|\\\\~,])', 'delimiter'],\n\t\t\t[',', 'delimiter']\n\t\t],\n\n\t\trulevalue: [\n\t\t\t{ include: '@comments' },\n\t\t\t{ include: '@strings' },\n\t\t\t{ include: '@term' },\n\t\t\t['!important', 'keyword'],\n\t\t\t[';', 'delimiter', '@pop'],\n\t\t\t['(?=})', { token: '', next: '@pop' }] // missing semicolon\n\t\t],\n\n\t\twarndebug: [['[@](warn|debug)', { token: 'keyword', next: '@declarationbody' }]],\n\n\t\timport: [['[@](import)', { token: 'keyword', next: '@declarationbody' }]],\n\n\t\turldeclaration: [\n\t\t\t{ include: '@strings' },\n\t\t\t['[^)\\r\\n]+', 'string'],\n\t\t\t['\\\\)', { token: 'delimiter.parenthesis', next: '@pop' }]\n\t\t],\n\n\t\tparenthizedterm: [\n\t\t\t{ include: '@term' },\n\t\t\t['\\\\)', { token: 'delimiter.parenthesis', next: '@pop' }]\n\t\t],\n\n\t\tdeclarationbody: [\n\t\t\t{ include: '@term' },\n\t\t\t[';', 'delimiter', '@pop'],\n\t\t\t['(?=})', { token: '', next: '@pop' }] // missing semicolon\n\t\t],\n\n\t\tcomments: [\n\t\t\t['\\\\/\\\\*', 'comment', '@comment'],\n\t\t\t['\\\\/\\\\/+.*', 'comment']\n\t\t],\n\n\t\tcomment: [\n\t\t\t['\\\\*\\\\/', 'comment', '@pop'],\n\t\t\t[/[^*/]+/, 'comment'],\n\t\t\t[/./, 'comment']\n\t\t],\n\n\t\tname: [['@identifier', 'attribute.value']],\n\n\t\tnumbers: [\n\t\t\t['-?(\\\\d*\\\\.)?\\\\d+([eE][\\\\-+]?\\\\d+)?', { token: 'attribute.value.number', next: '@units' }],\n\t\t\t['#[0-9a-fA-F_]+(?!\\\\w)', 'attribute.value.hex']\n\t\t],\n\n\t\tunits: [\n\t\t\t[\n\t\t\t\t'(em|ex|ch|rem|fr|vmin|vmax|vw|vh|vm|cm|mm|in|px|pt|pc|deg|grad|rad|turn|s|ms|Hz|kHz|%)?',\n\t\t\t\t'attribute.value.unit',\n\t\t\t\t'@pop'\n\t\t\t]\n\t\t],\n\n\t\tkeyframedeclaration: [\n\t\t\t['@identifier', 'attribute.value'],\n\t\t\t['{', { token: 'delimiter.bracket', switchTo: '@keyframebody' }]\n\t\t],\n\n\t\tkeyframebody: [\n\t\t\t{ include: '@term' },\n\t\t\t['{', { token: 'delimiter.bracket', next: '@selectorbody' }],\n\t\t\t['}', { token: 'delimiter.bracket', next: '@pop' }]\n\t\t],\n\n\t\tfunctioninvocation: [\n\t\t\t['@identifier\\\\(', { token: 'attribute.value', next: '@functionarguments' }]\n\t\t],\n\n\t\tfunctionarguments: [\n\t\t\t['\\\\$@identifier@ws:', 'attribute.name'],\n\t\t\t['[,]', 'delimiter'],\n\t\t\t{ include: '@term' },\n\t\t\t['\\\\)', { token: 'attribute.value', next: '@pop' }]\n\t\t],\n\n\t\tstrings: [\n\t\t\t['~?\"', { token: 'string', next: '@stringenddoublequote' }],\n\t\t\t[\"~?'\", { token: 'string', next: '@stringendquote' }]\n\t\t],\n\n\t\tstringenddoublequote: [\n\t\t\t['\\\\\\\\.', 'string'],\n\t\t\t['\"', { token: 'string', next: '@pop' }],\n\t\t\t[/[^\\\\\"]+/, 'string'],\n\t\t\t['.', 'string']\n\t\t],\n\n\t\tstringendquote: [\n\t\t\t['\\\\\\\\.', 'string'],\n\t\t\t[\"'\", { token: 'string', next: '@pop' }],\n\t\t\t[/[^\\\\']+/, 'string'],\n\t\t\t['.', 'string']\n\t\t]\n\t}\n}",
  "cypher": "<languages.IMonarchLanguage>{\n\tdefaultToken: '',\n\ttokenPostfix: `.cypher`,\n\tignoreCase: true,\n\n\tbrackets: [\n\t\t{ open: '{', close: '}', token: 'delimiter.curly' },\n\t\t{ open: '[', close: ']', token: 'delimiter.bracket' },\n\t\t{ open: '(', close: ')', token: 'delimiter.parenthesis' }\n\t],\n\n\tkeywords: [\n\t\t'ALL',\n\t\t'AND',\n\t\t'AS',\n\t\t'ASC',\n\t\t'ASCENDING',\n\t\t'BY',\n\t\t'CALL',\n\t\t'CASE',\n\t\t'CONTAINS',\n\t\t'CREATE',\n\t\t'DELETE',\n\t\t'DESC',\n\t\t'DESCENDING',\n\t\t'DETACH',\n\t\t'DISTINCT',\n\t\t'ELSE',\n\t\t'END',\n\t\t'ENDS',\n\t\t'EXISTS',\n\t\t'IN',\n\t\t'IS',\n\t\t'LIMIT',\n\t\t'MANDATORY',\n\t\t'MATCH',\n\t\t'MERGE',\n\t\t'NOT',\n\t\t'ON',\n\t\t'ON',\n\t\t'OPTIONAL',\n\t\t'OR',\n\t\t'ORDER',\n\t\t'REMOVE',\n\t\t'RETURN',\n\t\t'SET',\n\t\t'SKIP',\n\t\t'STARTS',\n\t\t'THEN',\n\t\t'UNION',\n\t\t'UNWIND',\n\t\t'WHEN',\n\t\t'WHERE',\n\t\t'WITH',\n\t\t'XOR',\n\t\t'YIELD'\n\t],\n\tbuiltinLiterals: ['true', 'TRUE', 'false', 'FALSE', 'null', 'NULL'],\n\tbuiltinFunctions: [\n\t\t'abs',\n\t\t'acos',\n\t\t'asin',\n\t\t'atan',\n\t\t'atan2',\n\t\t'avg',\n\t\t'ceil',\n\t\t'coalesce',\n\t\t'collect',\n\t\t'cos',\n\t\t'cot',\n\t\t'count',\n\t\t'degrees',\n\t\t'e',\n\t\t'endNode',\n\t\t'exists',\n\t\t'exp',\n\t\t'floor',\n\t\t'head',\n\t\t'id',\n\t\t'keys',\n\t\t'labels',\n\t\t'last',\n\t\t'left',\n\t\t'length',\n\t\t'log',\n\t\t'log10',\n\t\t'lTrim',\n\t\t'max',\n\t\t'min',\n\t\t'nodes',\n\t\t'percentileCont',\n\t\t'percentileDisc',\n\t\t'pi',\n\t\t'properties',\n\t\t'radians',\n\t\t'rand',\n\t\t'range',\n\t\t'relationships',\n\t\t'replace',\n\t\t'reverse',\n\t\t'right',\n\t\t'round',\n\t\t'rTrim',\n\t\t'sign',\n\t\t'sin',\n\t\t'size',\n\t\t'split',\n\t\t'sqrt',\n\t\t'startNode',\n\t\t'stDev',\n\t\t'stDevP',\n\t\t'substring',\n\t\t'sum',\n\t\t'tail',\n\t\t'tan',\n\t\t'timestamp',\n\t\t'toBoolean',\n\t\t'toFloat',\n\t\t'toInteger',\n\t\t'toLower',\n\t\t'toString',\n\t\t'toUpper',\n\t\t'trim',\n\t\t'type'\n\t],\n\n\toperators: [\n\t\t// Math operators\n\t\t'+',\n\t\t'-',\n\t\t'*',\n\t\t'/',\n\t\t'%',\n\t\t'^',\n\t\t// Comparison operators\n\t\t'=',\n\t\t'<>',\n\t\t'<',\n\t\t'>',\n\t\t'<=',\n\t\t'>=',\n\t\t// Pattern operators\n\t\t'->',\n\t\t'<-',\n\t\t'-->',\n\t\t'<--'\n\t],\n\n\tescapes: /\\\\(?:[tbnrf\\\\\"'`]|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n\tdigits: /\\d+/,\n\toctaldigits: /[0-7]+/,\n\thexdigits: /[0-9a-fA-F]+/,\n\n\ttokenizer: {\n\t\troot: [[/[{}[\\]()]/, '@brackets'], { include: 'common' }],\n\t\tcommon: [\n\t\t\t{ include: '@whitespace' },\n\t\t\t{ include: '@numbers' },\n\t\t\t{ include: '@strings' },\n\n\t\t\t// Cypher labels on nodes/relationships, e.g. (n:NodeLabel)-[e:RelationshipLabel]\n\t\t\t[/:[a-zA-Z_][\\w]*/, 'type.identifier'],\n\t\t\t[\n\t\t\t\t/[a-zA-Z_][\\w]*(?=\\()/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@builtinFunctions': 'predefined.function'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t[\n\t\t\t\t/[a-zA-Z_$][\\w$]*/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@keywords': 'keyword',\n\t\t\t\t\t\t'@builtinLiterals': 'predefined.literal',\n\t\t\t\t\t\t'@default': 'identifier'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/`/, 'identifier.escape', '@identifierBacktick'],\n\n\t\t\t// delimiter and operator after number because of `.\\d` floats and `:` in labels\n\t\t\t[/[;,.:|]/, 'delimiter'],\n\t\t\t[\n\t\t\t\t/[<>=%+\\-*/^]+/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@operators': 'delimiter',\n\t\t\t\t\t\t'@default': ''\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t],\n\t\tnumbers: [\n\t\t\t[/-?(@digits)[eE](-?(@digits))?/, 'number.float'],\n\t\t\t[/-?(@digits)?\\.(@digits)([eE]-?(@digits))?/, 'number.float'],\n\t\t\t[/-?0x(@hexdigits)/, 'number.hex'],\n\t\t\t[/-?0(@octaldigits)/, 'number.octal'],\n\t\t\t[/-?(@digits)/, 'number']\n\t\t],\n\t\tstrings: [\n\t\t\t[/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'], // non-teminated string\n\t\t\t[/'([^'\\\\]|\\\\.)*$/, 'string.invalid'], // non-teminated string\n\t\t\t[/\"/, 'string', '@stringDouble'],\n\t\t\t[/'/, 'string', '@stringSingle']\n\t\t],\n\t\twhitespace: [\n\t\t\t[/[ \\t\\r\\n]+/, 'white'],\n\t\t\t[/\\/\\*/, 'comment', '@comment'],\n\t\t\t[/\\/\\/.*$/, 'comment']\n\t\t],\n\t\tcomment: [\n\t\t\t[/\\/\\/.*/, 'comment'],\n\t\t\t[/[^/*]+/, 'comment'],\n\t\t\t[/\\*\\//, 'comment', '@pop'],\n\t\t\t[/[/*]/, 'comment']\n\t\t],\n\t\tstringDouble: [\n\t\t\t[/[^\\\\\"]+/, 'string'],\n\t\t\t[/@escapes/, 'string'],\n\t\t\t[/\\\\./, 'string.invalid'],\n\t\t\t[/\"/, 'string', '@pop']\n\t\t],\n\t\tstringSingle: [\n\t\t\t[/[^\\\\']+/, 'string'],\n\t\t\t[/@escapes/, 'string'],\n\t\t\t[/\\\\./, 'string.invalid'],\n\t\t\t[/'/, 'string', '@pop']\n\t\t],\n\t\tidentifierBacktick: [\n\t\t\t[/[^\\\\`]+/, 'identifier.escape'],\n\t\t\t[/@escapes/, 'identifier.escape'],\n\t\t\t[/\\\\./, 'identifier.escape.invalid'],\n\t\t\t[/`/, 'identifier.escape', '@pop']\n\t\t]\n\t}\n}",
  "dart": "<languages.IMonarchLanguage>{\n\tdefaultToken: 'invalid',\n\ttokenPostfix: '.dart',\n\n\tkeywords: [\n\t\t'abstract',\n\t\t'dynamic',\n\t\t'implements',\n\t\t'show',\n\t\t'as',\n\t\t'else',\n\t\t'import',\n\t\t'static',\n\t\t'assert',\n\t\t'enum',\n\t\t'in',\n\t\t'super',\n\t\t'async',\n\t\t'export',\n\t\t'interface',\n\t\t'switch',\n\t\t'await',\n\t\t'extends',\n\t\t'is',\n\t\t'sync',\n\t\t'break',\n\t\t'external',\n\t\t'library',\n\t\t'this',\n\t\t'case',\n\t\t'factory',\n\t\t'mixin',\n\t\t'throw',\n\t\t'catch',\n\t\t'false',\n\t\t'new',\n\t\t'true',\n\t\t'class',\n\t\t'final',\n\t\t'null',\n\t\t'try',\n\t\t'const',\n\t\t'finally',\n\t\t'on',\n\t\t'typedef',\n\t\t'continue',\n\t\t'for',\n\t\t'operator',\n\t\t'var',\n\t\t'covariant',\n\t\t'Function',\n\t\t'part',\n\t\t'void',\n\t\t'default',\n\t\t'get',\n\t\t'rethrow',\n\t\t'while',\n\t\t'deferred',\n\t\t'hide',\n\t\t'return',\n\t\t'with',\n\t\t'do',\n\t\t'if',\n\t\t'set',\n\t\t'yield'\n\t],\n\ttypeKeywords: ['int', 'double', 'String', 'bool'],\n\n\toperators: [\n\t\t'+',\n\t\t'-',\n\t\t'*',\n\t\t'/',\n\t\t'~/',\n\t\t'%',\n\t\t'++',\n\t\t'--',\n\t\t'==',\n\t\t'!=',\n\t\t'>',\n\t\t'<',\n\t\t'>=',\n\t\t'<=',\n\t\t'=',\n\t\t'-=',\n\t\t'/=',\n\t\t'%=',\n\t\t'>>=',\n\t\t'^=',\n\t\t'+=',\n\t\t'*=',\n\t\t'~/=',\n\t\t'<<=',\n\t\t'&=',\n\t\t'!=',\n\t\t'||',\n\t\t'&&',\n\t\t'&',\n\t\t'|',\n\t\t'^',\n\t\t'~',\n\t\t'<<',\n\t\t'>>',\n\t\t'!',\n\t\t'>>>',\n\t\t'??',\n\t\t'?',\n\t\t':',\n\t\t'|='\n\t],\n\n\t// we include these common regular expressions\n\tsymbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n\tescapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n\tdigits: /\\d+(_+\\d+)*/,\n\toctaldigits: /[0-7]+(_+[0-7]+)*/,\n\tbinarydigits: /[0-1]+(_+[0-1]+)*/,\n\thexdigits: /[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,\n\n\tregexpctl: /[(){}\\[\\]\\$\\^|\\-*+?\\.]/,\n\tregexpesc: /\\\\(?:[bBdDfnrstvwWn0\\\\\\/]|@regexpctl|c[A-Z]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4})/,\n\n\t// The main tokenizer for our languages\n\ttokenizer: {\n\t\troot: [[/[{}]/, 'delimiter.bracket'], { include: 'common' }],\n\n\t\tcommon: [\n\t\t\t// identifiers and keywords\n\t\t\t[\n\t\t\t\t/[a-z_$][\\w$]*/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@typeKeywords': 'type.identifier',\n\t\t\t\t\t\t'@keywords': 'keyword',\n\t\t\t\t\t\t'@default': 'identifier'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/[A-Z_$][\\w\\$]*/, 'type.identifier'], // show class names\n\t\t\t// [/[A-Z][\\w\\$]*/, 'identifier'],\n\n\t\t\t// whitespace\n\t\t\t{ include: '@whitespace' },\n\n\t\t\t// regular expression: ensure it is terminated before beginning (otherwise it is an opeator)\n\t\t\t[\n\t\t\t\t/\\/(?=([^\\\\\\/]|\\\\.)+\\/([gimsuy]*)(\\s*)(\\.|;|,|\\)|\\]|\\}|$))/,\n\t\t\t\t{ token: 'regexp', bracket: '@open', next: '@regexp' }\n\t\t\t],\n\n\t\t\t// @ annotations.\n\t\t\t[/@[a-zA-Z]+/, 'annotation'],\n\t\t\t// variable\n\n\t\t\t// delimiters and operators\n\t\t\t[/[()\\[\\]]/, '@brackets'],\n\t\t\t[/[<>](?!@symbols)/, '@brackets'],\n\t\t\t[/!(?=([^=]|$))/, 'delimiter'],\n\t\t\t[\n\t\t\t\t/@symbols/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@operators': 'delimiter',\n\t\t\t\t\t\t'@default': ''\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t// numbers\n\t\t\t[/(@digits)[eE]([\\-+]?(@digits))?/, 'number.float'],\n\t\t\t[/(@digits)\\.(@digits)([eE][\\-+]?(@digits))?/, 'number.float'],\n\t\t\t[/0[xX](@hexdigits)n?/, 'number.hex'],\n\t\t\t[/0[oO]?(@octaldigits)n?/, 'number.octal'],\n\t\t\t[/0[bB](@binarydigits)n?/, 'number.binary'],\n\t\t\t[/(@digits)n?/, 'number'],\n\n\t\t\t// delimiter: after number because of .\\d floats\n\t\t\t[/[;,.]/, 'delimiter'],\n\n\t\t\t// strings\n\t\t\t[/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'], // non-teminated string\n\t\t\t[/'([^'\\\\]|\\\\.)*$/, 'string.invalid'], // non-teminated string\n\t\t\t[/\"/, 'string', '@string_double'],\n\t\t\t[/'/, 'string', '@string_single']\n\n\t\t\t//   [/[a-zA-Z]+/, \"variable\"]\n\t\t],\n\n\t\twhitespace: [\n\t\t\t[/[ \\t\\r\\n]+/, ''],\n\t\t\t[/\\/\\*\\*(?!\\/)/, 'comment.doc', '@jsdoc'],\n\t\t\t[/\\/\\*/, 'comment', '@comment'],\n\t\t\t[/\\/\\/\\/.*$/, 'comment.doc'],\n\t\t\t[/\\/\\/.*$/, 'comment']\n\t\t],\n\n\t\tcomment: [\n\t\t\t[/[^\\/*]+/, 'comment'],\n\t\t\t[/\\*\\//, 'comment', '@pop'],\n\t\t\t[/[\\/*]/, 'comment']\n\t\t],\n\n\t\tjsdoc: [\n\t\t\t[/[^\\/*]+/, 'comment.doc'],\n\t\t\t[/\\*\\//, 'comment.doc', '@pop'],\n\t\t\t[/[\\/*]/, 'comment.doc']\n\t\t],\n\n\t\t// We match regular expression quite precisely\n\t\tregexp: [\n\t\t\t[\n\t\t\t\t/(\\{)(\\d+(?:,\\d*)?)(\\})/,\n\t\t\t\t['regexp.escape.control', 'regexp.escape.control', 'regexp.escape.control']\n\t\t\t],\n\t\t\t[\n\t\t\t\t/(\\[)(\\^?)(?=(?:[^\\]\\\\\\/]|\\\\.)+)/,\n\t\t\t\t['regexp.escape.control', { token: 'regexp.escape.control', next: '@regexrange' }]\n\t\t\t],\n\t\t\t[/(\\()(\\?:|\\?=|\\?!)/, ['regexp.escape.control', 'regexp.escape.control']],\n\t\t\t[/[()]/, 'regexp.escape.control'],\n\t\t\t[/@regexpctl/, 'regexp.escape.control'],\n\t\t\t[/[^\\\\\\/]/, 'regexp'],\n\t\t\t[/@regexpesc/, 'regexp.escape'],\n\t\t\t[/\\\\\\./, 'regexp.invalid'],\n\t\t\t[/(\\/)([gimsuy]*)/, [{ token: 'regexp', bracket: '@close', next: '@pop' }, 'keyword.other']]\n\t\t],\n\n\t\tregexrange: [\n\t\t\t[/-/, 'regexp.escape.control'],\n\t\t\t[/\\^/, 'regexp.invalid'],\n\t\t\t[/@regexpesc/, 'regexp.escape'],\n\t\t\t[/[^\\]]/, 'regexp'],\n\t\t\t[\n\t\t\t\t/\\]/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'regexp.escape.control',\n\t\t\t\t\tnext: '@pop',\n\t\t\t\t\tbracket: '@close'\n\t\t\t\t}\n\t\t\t]\n\t\t],\n\n\t\tstring_double: [\n\t\t\t[/[^\\\\\"\\$]+/, 'string'],\n\t\t\t[/[^\\\\\"]+/, 'string'],\n\t\t\t[/@escapes/, 'string.escape'],\n\t\t\t[/\\\\./, 'string.escape.invalid'],\n\t\t\t[/\"/, 'string', '@pop'],\n\t\t\t[/\\$\\w+/, 'identifier']\n\t\t],\n\n\t\tstring_single: [\n\t\t\t[/[^\\\\'\\$]+/, 'string'],\n\t\t\t[/@escapes/, 'string.escape'],\n\t\t\t[/\\\\./, 'string.escape.invalid'],\n\t\t\t[/'/, 'string', '@pop'],\n\t\t\t[/\\$\\w+/, 'identifier']\n\t\t]\n\t}\n}",
  "dockerfile": "<languages.IMonarchLanguage>{\n\tdefaultToken: '',\n\ttokenPostfix: '.dockerfile',\n\n\tvariable: /\\${?[\\w]+}?/,\n\n\ttokenizer: {\n\t\troot: [\n\t\t\t{ include: '@whitespace' },\n\t\t\t{ include: '@comment' },\n\n\t\t\t[/(ONBUILD)(\\s+)/, ['keyword', '']],\n\t\t\t[/(ENV)(\\s+)([\\w]+)/, ['keyword', '', { token: 'variable', next: '@arguments' }]],\n\t\t\t[\n\t\t\t\t/(FROM|MAINTAINER|RUN|EXPOSE|ENV|ADD|ARG|VOLUME|LABEL|USER|WORKDIR|COPY|CMD|STOPSIGNAL|SHELL|HEALTHCHECK|ENTRYPOINT)/,\n\t\t\t\t{ token: 'keyword', next: '@arguments' }\n\t\t\t]\n\t\t],\n\n\t\targuments: [\n\t\t\t{ include: '@whitespace' },\n\t\t\t{ include: '@strings' },\n\n\t\t\t[\n\t\t\t\t/(@variable)/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@eos': { token: 'variable', next: '@popall' },\n\t\t\t\t\t\t'@default': 'variable'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t[\n\t\t\t\t/\\\\/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@eos': '',\n\t\t\t\t\t\t'@default': ''\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t[\n\t\t\t\t/./,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@eos': { token: '', next: '@popall' },\n\t\t\t\t\t\t'@default': ''\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t],\n\n\t\t// Deal with white space, including comments\n\t\twhitespace: [\n\t\t\t[\n\t\t\t\t/\\s+/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@eos': { token: '', next: '@popall' },\n\t\t\t\t\t\t'@default': ''\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t],\n\n\t\tcomment: [[/(^#.*$)/, 'comment', '@popall']],\n\n\t\t// Recognize strings, including those broken across lines with \\ (but not without)\n\t\tstrings: [\n\t\t\t[/\\\\'$/, '', '@popall'], // \\' leaves @arguments at eol\n\t\t\t[/\\\\'/, ''], // \\' is not a string\n\t\t\t[/'$/, 'string', '@popall'],\n\t\t\t[/'/, 'string', '@stringBody'],\n\t\t\t[/\"$/, 'string', '@popall'],\n\t\t\t[/\"/, 'string', '@dblStringBody']\n\t\t],\n\t\tstringBody: [\n\t\t\t[\n\t\t\t\t/[^\\\\\\$']/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@eos': { token: 'string', next: '@popall' },\n\t\t\t\t\t\t'@default': 'string'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t[/\\\\./, 'string.escape'],\n\t\t\t[/'$/, 'string', '@popall'],\n\t\t\t[/'/, 'string', '@pop'],\n\t\t\t[/(@variable)/, 'variable'],\n\n\t\t\t[/\\\\$/, 'string'],\n\t\t\t[/$/, 'string', '@popall']\n\t\t],\n\t\tdblStringBody: [\n\t\t\t[\n\t\t\t\t/[^\\\\\\$\"]/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@eos': { token: 'string', next: '@popall' },\n\t\t\t\t\t\t'@default': 'string'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t[/\\\\./, 'string.escape'],\n\t\t\t[/\"$/, 'string', '@popall'],\n\t\t\t[/\"/, 'string', '@pop'],\n\t\t\t[/(@variable)/, 'variable'],\n\n\t\t\t[/\\\\$/, 'string'],\n\t\t\t[/$/, 'string', '@popall']\n\t\t]\n\t}\n}",
  "ecl": "<languages.IMonarchLanguage>{\n\tdefaultToken: '',\n\ttokenPostfix: '.ecl',\n\tignoreCase: true,\n\n\tbrackets: [\n\t\t{ open: '{', close: '}', token: 'delimiter.curly' },\n\t\t{ open: '[', close: ']', token: 'delimiter.square' },\n\t\t{ open: '(', close: ')', token: 'delimiter.parenthesis' },\n\t\t{ open: '<', close: '>', token: 'delimiter.angle' }\n\t],\n\n\tpounds: [\n\t\t'append',\n\t\t'break',\n\t\t'declare',\n\t\t'demangle',\n\t\t'end',\n\t\t'for',\n\t\t'getdatatype',\n\t\t'if',\n\t\t'inmodule',\n\t\t'loop',\n\t\t'mangle',\n\t\t'onwarning',\n\t\t'option',\n\t\t'set',\n\t\t'stored',\n\t\t'uniquename'\n\t].join('|'),\n\n\tkeywords: [\n\t\t'__compressed__',\n\t\t'after',\n\t\t'all',\n\t\t'and',\n\t\t'any',\n\t\t'as',\n\t\t'atmost',\n\t\t'before',\n\t\t'beginc',\n\t\t'best',\n\t\t'between',\n\t\t'case',\n\t\t'cluster',\n\t\t'compressed',\n\t\t'compression',\n\t\t'const',\n\t\t'counter',\n\t\t'csv',\n\t\t'default',\n\t\t'descend',\n\t\t'embed',\n\t\t'encoding',\n\t\t'encrypt',\n\t\t'end',\n\t\t'endc',\n\t\t'endembed',\n\t\t'endmacro',\n\t\t'enum',\n\t\t'escape',\n\t\t'except',\n\t\t'exclusive',\n\t\t'expire',\n\t\t'export',\n\t\t'extend',\n\t\t'fail',\n\t\t'few',\n\t\t'fileposition',\n\t\t'first',\n\t\t'flat',\n\t\t'forward',\n\t\t'from',\n\t\t'full',\n\t\t'function',\n\t\t'functionmacro',\n\t\t'group',\n\t\t'grouped',\n\t\t'heading',\n\t\t'hole',\n\t\t'ifblock',\n\t\t'import',\n\t\t'in',\n\t\t'inner',\n\t\t'interface',\n\t\t'internal',\n\t\t'joined',\n\t\t'keep',\n\t\t'keyed',\n\t\t'last',\n\t\t'left',\n\t\t'limit',\n\t\t'linkcounted',\n\t\t'literal',\n\t\t'little_endian',\n\t\t'load',\n\t\t'local',\n\t\t'locale',\n\t\t'lookup',\n\t\t'lzw',\n\t\t'macro',\n\t\t'many',\n\t\t'maxcount',\n\t\t'maxlength',\n\t\t'min skew',\n\t\t'module',\n\t\t'mofn',\n\t\t'multiple',\n\t\t'named',\n\t\t'namespace',\n\t\t'nocase',\n\t\t'noroot',\n\t\t'noscan',\n\t\t'nosort',\n\t\t'not',\n\t\t'noxpath',\n\t\t'of',\n\t\t'onfail',\n\t\t'only',\n\t\t'opt',\n\t\t'or',\n\t\t'outer',\n\t\t'overwrite',\n\t\t'packed',\n\t\t'partition',\n\t\t'penalty',\n\t\t'physicallength',\n\t\t'pipe',\n\t\t'prefetch',\n\t\t'quote',\n\t\t'record',\n\t\t'repeat',\n\t\t'retry',\n\t\t'return',\n\t\t'right',\n\t\t'right1',\n\t\t'right2',\n\t\t'rows',\n\t\t'rowset',\n\t\t'scan',\n\t\t'scope',\n\t\t'self',\n\t\t'separator',\n\t\t'service',\n\t\t'shared',\n\t\t'skew',\n\t\t'skip',\n\t\t'smart',\n\t\t'soapaction',\n\t\t'sql',\n\t\t'stable',\n\t\t'store',\n\t\t'terminator',\n\t\t'thor',\n\t\t'threshold',\n\t\t'timelimit',\n\t\t'timeout',\n\t\t'token',\n\t\t'transform',\n\t\t'trim',\n\t\t'type',\n\t\t'unicodeorder',\n\t\t'unordered',\n\t\t'unsorted',\n\t\t'unstable',\n\t\t'update',\n\t\t'use',\n\t\t'validate',\n\t\t'virtual',\n\t\t'whole',\n\t\t'width',\n\t\t'wild',\n\t\t'within',\n\t\t'wnotrim',\n\t\t'xml',\n\t\t'xpath'\n\t],\n\n\tfunctions: [\n\t\t'abs',\n\t\t'acos',\n\t\t'aggregate',\n\t\t'allnodes',\n\t\t'apply',\n\t\t'ascii',\n\t\t'asin',\n\t\t'assert',\n\t\t'asstring',\n\t\t'atan',\n\t\t'atan2',\n\t\t'ave',\n\t\t'build',\n\t\t'buildindex',\n\t\t'case',\n\t\t'catch',\n\t\t'choose',\n\t\t'choosen',\n\t\t'choosesets',\n\t\t'clustersize',\n\t\t'combine',\n\t\t'correlation',\n\t\t'cos',\n\t\t'cosh',\n\t\t'count',\n\t\t'covariance',\n\t\t'cron',\n\t\t'dataset',\n\t\t'dedup',\n\t\t'define',\n\t\t'denormalize',\n\t\t'dictionary',\n\t\t'distribute',\n\t\t'distributed',\n\t\t'distribution',\n\t\t'ebcdic',\n\t\t'enth',\n\t\t'error',\n\t\t'evaluate',\n\t\t'event',\n\t\t'eventextra',\n\t\t'eventname',\n\t\t'exists',\n\t\t'exp',\n\t\t'fail',\n\t\t'failcode',\n\t\t'failmessage',\n\t\t'fetch',\n\t\t'fromunicode',\n\t\t'fromxml',\n\t\t'getenv',\n\t\t'getisvalid',\n\t\t'global',\n\t\t'graph',\n\t\t'group',\n\t\t'hash',\n\t\t'hash32',\n\t\t'hash64',\n\t\t'hashcrc',\n\t\t'hashmd5',\n\t\t'having',\n\t\t'httpcall',\n\t\t'httpheader',\n\t\t'if',\n\t\t'iff',\n\t\t'index',\n\t\t'intformat',\n\t\t'isvalid',\n\t\t'iterate',\n\t\t'join',\n\t\t'keydiff',\n\t\t'keypatch',\n\t\t'keyunicode',\n\t\t'length',\n\t\t'library',\n\t\t'limit',\n\t\t'ln',\n\t\t'loadxml',\n\t\t'local',\n\t\t'log',\n\t\t'loop',\n\t\t'map',\n\t\t'matched',\n\t\t'matchlength',\n\t\t'matchposition',\n\t\t'matchtext',\n\t\t'matchunicode',\n\t\t'max',\n\t\t'merge',\n\t\t'mergejoin',\n\t\t'min',\n\t\t'nofold',\n\t\t'nolocal',\n\t\t'nonempty',\n\t\t'normalize',\n\t\t'nothor',\n\t\t'notify',\n\t\t'output',\n\t\t'parallel',\n\t\t'parse',\n\t\t'pipe',\n\t\t'power',\n\t\t'preload',\n\t\t'process',\n\t\t'project',\n\t\t'pull',\n\t\t'random',\n\t\t'range',\n\t\t'rank',\n\t\t'ranked',\n\t\t'realformat',\n\t\t'recordof',\n\t\t'regexfind',\n\t\t'regexreplace',\n\t\t'regroup',\n\t\t'rejected',\n\t\t'rollup',\n\t\t'round',\n\t\t'roundup',\n\t\t'row',\n\t\t'rowdiff',\n\t\t'sample',\n\t\t'sequential',\n\t\t'set',\n\t\t'sin',\n\t\t'sinh',\n\t\t'sizeof',\n\t\t'soapcall',\n\t\t'sort',\n\t\t'sorted',\n\t\t'sqrt',\n\t\t'stepped',\n\t\t'stored',\n\t\t'sum',\n\t\t'table',\n\t\t'tan',\n\t\t'tanh',\n\t\t'thisnode',\n\t\t'topn',\n\t\t'tounicode',\n\t\t'toxml',\n\t\t'transfer',\n\t\t'transform',\n\t\t'trim',\n\t\t'truncate',\n\t\t'typeof',\n\t\t'ungroup',\n\t\t'unicodeorder',\n\t\t'variance',\n\t\t'wait',\n\t\t'which',\n\t\t'workunit',\n\t\t'xmldecode',\n\t\t'xmlencode',\n\t\t'xmltext',\n\t\t'xmlunicode'\n\t],\n\n\ttypesint: ['integer', 'unsigned'].join('|'),\n\n\ttypesnum: ['data', 'qstring', 'string', 'unicode', 'utf8', 'varstring', 'varunicode'],\n\n\ttypesone: [\n\t\t'ascii',\n\t\t'big_endian',\n\t\t'boolean',\n\t\t'data',\n\t\t'decimal',\n\t\t'ebcdic',\n\t\t'grouped',\n\t\t'integer',\n\t\t'linkcounted',\n\t\t'pattern',\n\t\t'qstring',\n\t\t'real',\n\t\t'record',\n\t\t'rule',\n\t\t'set of',\n\t\t'streamed',\n\t\t'string',\n\t\t'token',\n\t\t'udecimal',\n\t\t'unicode',\n\t\t'unsigned',\n\t\t'utf8',\n\t\t'varstring',\n\t\t'varunicode'\n\t].join('|'),\n\n\toperators: ['+', '-', '/', ':=', '<', '<>', '=', '>', '\\\\', 'and', 'in', 'not', 'or'],\n\n\tsymbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n\n\t// escape sequences\n\tescapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n\n\t// The main tokenizer for our languages\n\ttokenizer: {\n\t\troot: [\n\t\t\t[/@typesint[4|8]/, 'type'],\n\t\t\t[/#(@pounds)/, 'type'],\n\t\t\t[/@typesone/, 'type'],\n\n\t\t\t[\n\t\t\t\t/[a-zA-Z_$][\\w-$]*/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@functions': 'keyword.function',\n\t\t\t\t\t\t'@keywords': 'keyword',\n\t\t\t\t\t\t'@operators': 'operator'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t// whitespace\n\t\t\t{ include: '@whitespace' },\n\n\t\t\t[/[{}()\\[\\]]/, '@brackets'],\n\t\t\t[/[<>](?!@symbols)/, '@brackets'],\n\t\t\t[\n\t\t\t\t/@symbols/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@operators': 'delimiter',\n\t\t\t\t\t\t'@default': ''\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t// numbers\n\t\t\t[/[0-9_]*\\.[0-9_]+([eE][\\-+]?\\d+)?/, 'number.float'],\n\t\t\t[/0[xX][0-9a-fA-F_]+/, 'number.hex'],\n\t\t\t[/0[bB][01]+/, 'number.hex'], // binary: use same theme style as hex\n\t\t\t[/[0-9_]+/, 'number'],\n\n\t\t\t// delimiter: after number because of .\\d floats\n\t\t\t[/[;,.]/, 'delimiter'],\n\n\t\t\t// strings\n\t\t\t[/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],\n\t\t\t[/\"/, 'string', '@string'],\n\n\t\t\t// characters\n\t\t\t[/'[^\\\\']'/, 'string'],\n\t\t\t[/(')(@escapes)(')/, ['string', 'string.escape', 'string']],\n\t\t\t[/'/, 'string.invalid']\n\t\t],\n\n\t\twhitespace: [\n\t\t\t[/[ \\t\\v\\f\\r\\n]+/, ''],\n\t\t\t[/\\/\\*/, 'comment', '@comment'],\n\t\t\t[/\\/\\/.*$/, 'comment']\n\t\t],\n\n\t\tcomment: [\n\t\t\t[/[^\\/*]+/, 'comment'],\n\t\t\t[/\\*\\//, 'comment', '@pop'],\n\t\t\t[/[\\/*]/, 'comment']\n\t\t],\n\n\t\tstring: [\n\t\t\t[/[^\\\\']+/, 'string'],\n\t\t\t[/@escapes/, 'string.escape'],\n\t\t\t[/\\\\./, 'string.escape.invalid'],\n\t\t\t[/'/, 'string', '@pop']\n\t\t]\n\t}\n}",
  "elixir": "<languages.IMonarchLanguage>{\n\tdefaultToken: 'source',\n\ttokenPostfix: '.elixir',\n\n\tbrackets: [\n\t\t{ open: '[', close: ']', token: 'delimiter.square' },\n\t\t{ open: '(', close: ')', token: 'delimiter.parenthesis' },\n\t\t{ open: '{', close: '}', token: 'delimiter.curly' },\n\t\t{ open: '<<', close: '>>', token: 'delimiter.angle.special' }\n\t],\n\n\t// Below are lists/regexps to which we reference later.\n\n\tdeclarationKeywords: [\n\t\t'def',\n\t\t'defp',\n\t\t'defn',\n\t\t'defnp',\n\t\t'defguard',\n\t\t'defguardp',\n\t\t'defmacro',\n\t\t'defmacrop',\n\t\t'defdelegate',\n\t\t'defcallback',\n\t\t'defmacrocallback',\n\t\t'defmodule',\n\t\t'defprotocol',\n\t\t'defexception',\n\t\t'defimpl',\n\t\t'defstruct'\n\t],\n\toperatorKeywords: ['and', 'in', 'not', 'or', 'when'],\n\tnamespaceKeywords: ['alias', 'import', 'require', 'use'],\n\totherKeywords: [\n\t\t'after',\n\t\t'case',\n\t\t'catch',\n\t\t'cond',\n\t\t'do',\n\t\t'else',\n\t\t'end',\n\t\t'fn',\n\t\t'for',\n\t\t'if',\n\t\t'quote',\n\t\t'raise',\n\t\t'receive',\n\t\t'rescue',\n\t\t'super',\n\t\t'throw',\n\t\t'try',\n\t\t'unless',\n\t\t'unquote_splicing',\n\t\t'unquote',\n\t\t'with'\n\t],\n\tconstants: ['true', 'false', 'nil'],\n\tnameBuiltin: ['__MODULE__', '__DIR__', '__ENV__', '__CALLER__', '__STACKTRACE__'],\n\n\t// Matches any of the operator names:\n\t// <<< >>> ||| &&& ^^^ ~~~ === !== ~>> <~> |~> <|> == != <= >= && || \\\\ <> ++ -- |> =~ -> <- ~> <~ :: .. = < > + - * / | . ^ & !\n\toperator:\n\t\t/-[->]?|!={0,2}|\\*{1,2}|\\/|\\\\\\\\|&{1,3}|\\.\\.?|\\^(?:\\^\\^)?|\\+\\+?|<(?:-|<<|=|>|\\|>|~>?)?|=~|={1,3}|>(?:=|>>)?|\\|~>|\\|>|\\|{1,3}|~>>?|~~~|::/,\n\n\t// See https://hexdocs.pm/elixir/syntax-reference.html#variables\n\tvariableName: /[a-z_][a-zA-Z0-9_]*[?!]?/,\n\n\t// See https://hexdocs.pm/elixir/syntax-reference.html#atoms\n\tatomName: /[a-zA-Z_][a-zA-Z0-9_@]*[?!]?|@specialAtomName|@operator/,\n\tspecialAtomName: /\\.\\.\\.|<<>>|%\\{\\}|%|\\{\\}/,\n\n\taliasPart: /[A-Z][a-zA-Z0-9_]*/,\n\tmoduleName: /@aliasPart(?:\\.@aliasPart)*/,\n\n\t// Sigil pairs are: \"\"\" \"\"\", ''' ''', \" \", ' ', / /, | |, < >, { }, [ ], ( )\n\tsigilSymmetricDelimiter: /\"\"\"|'''|\"|'|\\/|\\|/,\n\tsigilStartDelimiter: /@sigilSymmetricDelimiter|<|\\{|\\[|\\(/,\n\tsigilEndDelimiter: /@sigilSymmetricDelimiter|>|\\}|\\]|\\)/,\n\tsigilModifiers: /[a-zA-Z0-9]*/,\n\n\tdecimal: /\\d(?:_?\\d)*/,\n\thex: /[0-9a-fA-F](_?[0-9a-fA-F])*/,\n\toctal: /[0-7](_?[0-7])*/,\n\tbinary: /[01](_?[01])*/,\n\n\t// See https://hexdocs.pm/elixir/master/String.html#module-escape-characters\n\tescape: /\\\\u[0-9a-fA-F]{4}|\\\\x[0-9a-fA-F]{2}|\\\\./,\n\n\t// The keys below correspond to tokenizer states.\n\t// We start from the root state and match against its rules\n\t// until we explicitly transition into another state.\n\t// The `include` simply brings in all operations from the given state\n\t// and is useful for improving readability.\n\ttokenizer: {\n\t\troot: [\n\t\t\t{ include: '@whitespace' },\n\t\t\t{ include: '@comments' },\n\t\t\t// Keywords start as either an identifier or a string,\n\t\t\t// but end with a : so it's important to match this first.\n\t\t\t{ include: '@keywordsShorthand' },\n\t\t\t{ include: '@numbers' },\n\t\t\t{ include: '@identifiers' },\n\t\t\t{ include: '@strings' },\n\t\t\t{ include: '@atoms' },\n\t\t\t{ include: '@sigils' },\n\t\t\t{ include: '@attributes' },\n\t\t\t{ include: '@symbols' }\n\t\t],\n\n\t\t// Whitespace\n\n\t\twhitespace: [[/\\s+/, 'white']],\n\n\t\t// Comments\n\n\t\tcomments: [[/(#)(.*)/, ['comment.punctuation', 'comment']]],\n\n\t\t// Keyword list shorthand\n\n\t\tkeywordsShorthand: [\n\t\t\t[/(@atomName)(:)(\\s+)/, ['constant', 'constant.punctuation', 'white']],\n\t\t\t// Use positive look-ahead to ensure the string is followed by :\n\t\t\t// and should be considered a keyword.\n\t\t\t[\n\t\t\t\t/\"(?=([^\"]|#\\{.*?\\}|\\\\\")*\":)/,\n\t\t\t\t{ token: 'constant.delimiter', next: '@doubleQuotedStringKeyword' }\n\t\t\t],\n\t\t\t[\n\t\t\t\t/'(?=([^']|#\\{.*?\\}|\\\\')*':)/,\n\t\t\t\t{ token: 'constant.delimiter', next: '@singleQuotedStringKeyword' }\n\t\t\t]\n\t\t],\n\n\t\tdoubleQuotedStringKeyword: [\n\t\t\t[/\":/, { token: 'constant.delimiter', next: '@pop' }],\n\t\t\t{ include: '@stringConstantContentInterpol' }\n\t\t],\n\n\t\tsingleQuotedStringKeyword: [\n\t\t\t[/':/, { token: 'constant.delimiter', next: '@pop' }],\n\t\t\t{ include: '@stringConstantContentInterpol' }\n\t\t],\n\n\t\t// Numbers\n\n\t\tnumbers: [\n\t\t\t[/0b@binary/, 'number.binary'],\n\t\t\t[/0o@octal/, 'number.octal'],\n\t\t\t[/0x@hex/, 'number.hex'],\n\t\t\t[/@decimal\\.@decimal([eE]-?@decimal)?/, 'number.float'],\n\t\t\t[/@decimal/, 'number']\n\t\t],\n\n\t\t// Identifiers\n\n\t\tidentifiers: [\n\t\t\t// Tokenize identifier name in function-like definitions.\n\t\t\t// Note: given `def a + b, do: nil`, `a` is not a function name,\n\t\t\t// so we use negative look-ahead to ensure there's no operator.\n\t\t\t[\n\t\t\t\t/\\b(defp?|defnp?|defmacrop?|defguardp?|defdelegate)(\\s+)(@variableName)(?!\\s+@operator)/,\n\t\t\t\t[\n\t\t\t\t\t'keyword.declaration',\n\t\t\t\t\t'white',\n\t\t\t\t\t{\n\t\t\t\t\t\tcases: {\n\t\t\t\t\t\t\tunquote: 'keyword',\n\t\t\t\t\t\t\t'@default': 'function'\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t],\n\t\t\t// Tokenize function calls\n\t\t\t[\n\t\t\t\t// In-scope call - an identifier followed by ( or .(\n\t\t\t\t/(@variableName)(?=\\s*\\.?\\s*\\()/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t// Tokenize as keyword in cases like `if(..., do: ..., else: ...)`\n\t\t\t\t\t\t'@declarationKeywords': 'keyword.declaration',\n\t\t\t\t\t\t'@namespaceKeywords': 'keyword',\n\t\t\t\t\t\t'@otherKeywords': 'keyword',\n\t\t\t\t\t\t'@default': 'function.call'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t[\n\t\t\t\t// Referencing function in a module\n\t\t\t\t/(@moduleName)(\\s*)(\\.)(\\s*)(@variableName)/,\n\t\t\t\t['type.identifier', 'white', 'operator', 'white', 'function.call']\n\t\t\t],\n\t\t\t[\n\t\t\t\t// Referencing function in an Erlang module\n\t\t\t\t/(:)(@atomName)(\\s*)(\\.)(\\s*)(@variableName)/,\n\t\t\t\t['constant.punctuation', 'constant', 'white', 'operator', 'white', 'function.call']\n\t\t\t],\n\t\t\t[\n\t\t\t\t// Piping into a function (tokenized separately as it may not have parentheses)\n\t\t\t\t/(\\|>)(\\s*)(@variableName)/,\n\t\t\t\t[\n\t\t\t\t\t'operator',\n\t\t\t\t\t'white',\n\t\t\t\t\t{\n\t\t\t\t\t\tcases: {\n\t\t\t\t\t\t\t'@otherKeywords': 'keyword',\n\t\t\t\t\t\t\t'@default': 'function.call'\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t],\n\t\t\t[\n\t\t\t\t// Function reference passed to another function\n\t\t\t\t/(&)(\\s*)(@variableName)/,\n\t\t\t\t['operator', 'white', 'function.call']\n\t\t\t],\n\t\t\t// Language keywords, builtins, constants and variables\n\t\t\t[\n\t\t\t\t/@variableName/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@declarationKeywords': 'keyword.declaration',\n\t\t\t\t\t\t'@operatorKeywords': 'keyword.operator',\n\t\t\t\t\t\t'@namespaceKeywords': 'keyword',\n\t\t\t\t\t\t'@otherKeywords': 'keyword',\n\t\t\t\t\t\t'@constants': 'constant.language',\n\t\t\t\t\t\t'@nameBuiltin': 'variable.language',\n\t\t\t\t\t\t'_.*': 'comment.unused',\n\t\t\t\t\t\t'@default': 'identifier'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t// Module names\n\t\t\t[/@moduleName/, 'type.identifier']\n\t\t],\n\n\t\t// Strings\n\n\t\tstrings: [\n\t\t\t[/\"\"\"/, { token: 'string.delimiter', next: '@doubleQuotedHeredoc' }],\n\t\t\t[/'''/, { token: 'string.delimiter', next: '@singleQuotedHeredoc' }],\n\t\t\t[/\"/, { token: 'string.delimiter', next: '@doubleQuotedString' }],\n\t\t\t[/'/, { token: 'string.delimiter', next: '@singleQuotedString' }]\n\t\t],\n\n\t\tdoubleQuotedHeredoc: [\n\t\t\t[/\"\"\"/, { token: 'string.delimiter', next: '@pop' }],\n\t\t\t{ include: '@stringContentInterpol' }\n\t\t],\n\n\t\tsingleQuotedHeredoc: [\n\t\t\t[/'''/, { token: 'string.delimiter', next: '@pop' }],\n\t\t\t{ include: '@stringContentInterpol' }\n\t\t],\n\n\t\tdoubleQuotedString: [\n\t\t\t[/\"/, { token: 'string.delimiter', next: '@pop' }],\n\t\t\t{ include: '@stringContentInterpol' }\n\t\t],\n\n\t\tsingleQuotedString: [\n\t\t\t[/'/, { token: 'string.delimiter', next: '@pop' }],\n\t\t\t{ include: '@stringContentInterpol' }\n\t\t],\n\n\t\t// Atoms\n\n\t\tatoms: [\n\t\t\t[/(:)(@atomName)/, ['constant.punctuation', 'constant']],\n\t\t\t[/:\"/, { token: 'constant.delimiter', next: '@doubleQuotedStringAtom' }],\n\t\t\t[/:'/, { token: 'constant.delimiter', next: '@singleQuotedStringAtom' }]\n\t\t],\n\n\t\tdoubleQuotedStringAtom: [\n\t\t\t[/\"/, { token: 'constant.delimiter', next: '@pop' }],\n\t\t\t{ include: '@stringConstantContentInterpol' }\n\t\t],\n\n\t\tsingleQuotedStringAtom: [\n\t\t\t[/'/, { token: 'constant.delimiter', next: '@pop' }],\n\t\t\t{ include: '@stringConstantContentInterpol' }\n\t\t],\n\n\t\t// Sigils\n\n\t\t// See https://elixir-lang.org/getting-started/sigils.html\n\t\t// Sigils allow for typing values using their textual representation.\n\t\t// All sigils start with ~ followed by a letter or\n\t\t// multi-letter uppercase starting at Elixir v1.15.0, indicating sigil type\n\t\t// and then a delimiter pair enclosing the textual representation.\n\t\t// Optional modifiers are allowed after the closing delimiter.\n\t\t// For instance a regular expressions can be written as:\n\t\t// ~r/foo|bar/ ~r{foo|bar} ~r/foo|bar/g\n\t\t//\n\t\t// In general lowercase sigils allow for interpolation\n\t\t// and escaped characters, whereas uppercase sigils don't\n\t\t//\n\t\t// During tokenization we want to distinguish some\n\t\t// specific sigil types, namely string and regexp,\n\t\t// so that they cen be themed separately.\n\t\t//\n\t\t// To reasonably handle all those combinations we leverage\n\t\t// dot-separated states, so if we transition to @sigilStart.interpol.s.{.}\n\t\t// then \"sigilStart.interpol.s\" state will match and also all\n\t\t// the individual dot-separated parameters can be accessed.\n\n\t\tsigils: [\n\t\t\t[/~[a-z]@sigilStartDelimiter/, { token: '@rematch', next: '@sigil.interpol' }],\n\t\t\t[/~([A-Z]+)@sigilStartDelimiter/, { token: '@rematch', next: '@sigil.noInterpol' }]\n\t\t],\n\n\t\tsigil: [\n\t\t\t[/~([a-z]|[A-Z]+)\\{/, { token: '@rematch', switchTo: '@sigilStart.$S2.$1.{.}' }],\n\t\t\t[/~([a-z]|[A-Z]+)\\[/, { token: '@rematch', switchTo: '@sigilStart.$S2.$1.[.]' }],\n\t\t\t[/~([a-z]|[A-Z]+)\\(/, { token: '@rematch', switchTo: '@sigilStart.$S2.$1.(.)' }],\n\t\t\t[/~([a-z]|[A-Z]+)\\</, { token: '@rematch', switchTo: '@sigilStart.$S2.$1.<.>' }],\n\t\t\t[\n\t\t\t\t/~([a-z]|[A-Z]+)(@sigilSymmetricDelimiter)/,\n\t\t\t\t{ token: '@rematch', switchTo: '@sigilStart.$S2.$1.$2.$2' }\n\t\t\t]\n\t\t],\n\n\t\t// The definitions below expect states to be of the form:\n\t\t//\n\t\t// sigilStart.<interpol-or-noInterpol>.<sigil-letter>.<start-delimiter>.<end-delimiter>\n\t\t// sigilContinue.<interpol-or-noInterpol>.<sigil-letter>.<start-delimiter>.<end-delimiter>\n\t\t//\n\t\t// The sigilStart state is used only to properly classify the token (as string/regex/sigil)\n\t\t// and immediately switches to the sigilContinue sate, which handles the actual content\n\t\t// and waits for the corresponding end delimiter.\n\n\t\t'sigilStart.interpol.s': [\n\t\t\t[\n\t\t\t\t/~s@sigilStartDelimiter/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'string.delimiter',\n\t\t\t\t\tswitchTo: '@sigilContinue.$S2.$S3.$S4.$S5'\n\t\t\t\t}\n\t\t\t]\n\t\t],\n\n\t\t'sigilContinue.interpol.s': [\n\t\t\t[\n\t\t\t\t/(@sigilEndDelimiter)@sigilModifiers/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'$1==$S5': { token: 'string.delimiter', next: '@pop' },\n\t\t\t\t\t\t'@default': 'string'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t{ include: '@stringContentInterpol' }\n\t\t],\n\n\t\t'sigilStart.noInterpol.S': [\n\t\t\t[\n\t\t\t\t/~S@sigilStartDelimiter/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'string.delimiter',\n\t\t\t\t\tswitchTo: '@sigilContinue.$S2.$S3.$S4.$S5'\n\t\t\t\t}\n\t\t\t]\n\t\t],\n\n\t\t'sigilContinue.noInterpol.S': [\n\t\t\t// Ignore escaped sigil end\n\t\t\t[/(^|[^\\\\])\\\\@sigilEndDelimiter/, 'string'],\n\t\t\t[\n\t\t\t\t/(@sigilEndDelimiter)@sigilModifiers/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'$1==$S5': { token: 'string.delimiter', next: '@pop' },\n\t\t\t\t\t\t'@default': 'string'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t{ include: '@stringContent' }\n\t\t],\n\n\t\t'sigilStart.interpol.r': [\n\t\t\t[\n\t\t\t\t/~r@sigilStartDelimiter/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'regexp.delimiter',\n\t\t\t\t\tswitchTo: '@sigilContinue.$S2.$S3.$S4.$S5'\n\t\t\t\t}\n\t\t\t]\n\t\t],\n\n\t\t'sigilContinue.interpol.r': [\n\t\t\t[\n\t\t\t\t/(@sigilEndDelimiter)@sigilModifiers/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'$1==$S5': { token: 'regexp.delimiter', next: '@pop' },\n\t\t\t\t\t\t'@default': 'regexp'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t{ include: '@regexpContentInterpol' }\n\t\t],\n\n\t\t'sigilStart.noInterpol.R': [\n\t\t\t[\n\t\t\t\t/~R@sigilStartDelimiter/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'regexp.delimiter',\n\t\t\t\t\tswitchTo: '@sigilContinue.$S2.$S3.$S4.$S5'\n\t\t\t\t}\n\t\t\t]\n\t\t],\n\n\t\t'sigilContinue.noInterpol.R': [\n\t\t\t// Ignore escaped sigil end\n\t\t\t[/(^|[^\\\\])\\\\@sigilEndDelimiter/, 'regexp'],\n\t\t\t[\n\t\t\t\t/(@sigilEndDelimiter)@sigilModifiers/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'$1==$S5': { token: 'regexp.delimiter', next: '@pop' },\n\t\t\t\t\t\t'@default': 'regexp'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t{ include: '@regexpContent' }\n\t\t],\n\n\t\t// Fallback to the generic sigil by default\n\t\t'sigilStart.interpol': [\n\t\t\t[\n\t\t\t\t/~([a-z]|[A-Z]+)@sigilStartDelimiter/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'sigil.delimiter',\n\t\t\t\t\tswitchTo: '@sigilContinue.$S2.$S3.$S4.$S5'\n\t\t\t\t}\n\t\t\t]\n\t\t],\n\n\t\t'sigilContinue.interpol': [\n\t\t\t[\n\t\t\t\t/(@sigilEndDelimiter)@sigilModifiers/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'$1==$S5': { token: 'sigil.delimiter', next: '@pop' },\n\t\t\t\t\t\t'@default': 'sigil'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t{ include: '@sigilContentInterpol' }\n\t\t],\n\n\t\t'sigilStart.noInterpol': [\n\t\t\t[\n\t\t\t\t/~([a-z]|[A-Z]+)@sigilStartDelimiter/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'sigil.delimiter',\n\t\t\t\t\tswitchTo: '@sigilContinue.$S2.$S3.$S4.$S5'\n\t\t\t\t}\n\t\t\t]\n\t\t],\n\n\t\t'sigilContinue.noInterpol': [\n\t\t\t// Ignore escaped sigil end\n\t\t\t[/(^|[^\\\\])\\\\@sigilEndDelimiter/, 'sigil'],\n\t\t\t[\n\t\t\t\t/(@sigilEndDelimiter)@sigilModifiers/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'$1==$S5': { token: 'sigil.delimiter', next: '@pop' },\n\t\t\t\t\t\t'@default': 'sigil'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t{ include: '@sigilContent' }\n\t\t],\n\n\t\t// Attributes\n\n\t\tattributes: [\n\t\t\t// Module @doc* attributes - tokenized as comments\n\t\t\t[\n\t\t\t\t/\\@(module|type)?doc (~[sS])?\"\"\"/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'comment.block.documentation',\n\t\t\t\t\tnext: '@doubleQuotedHeredocDocstring'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[\n\t\t\t\t/\\@(module|type)?doc (~[sS])?'''/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'comment.block.documentation',\n\t\t\t\t\tnext: '@singleQuotedHeredocDocstring'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[\n\t\t\t\t/\\@(module|type)?doc (~[sS])?\"/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'comment.block.documentation',\n\t\t\t\t\tnext: '@doubleQuotedStringDocstring'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[\n\t\t\t\t/\\@(module|type)?doc (~[sS])?'/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'comment.block.documentation',\n\t\t\t\t\tnext: '@singleQuotedStringDocstring'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/\\@(module|type)?doc false/, 'comment.block.documentation'],\n\t\t\t// Module attributes\n\t\t\t[/\\@(@variableName)/, 'variable']\n\t\t],\n\n\t\tdoubleQuotedHeredocDocstring: [\n\t\t\t[/\"\"\"/, { token: 'comment.block.documentation', next: '@pop' }],\n\t\t\t{ include: '@docstringContent' }\n\t\t],\n\n\t\tsingleQuotedHeredocDocstring: [\n\t\t\t[/'''/, { token: 'comment.block.documentation', next: '@pop' }],\n\t\t\t{ include: '@docstringContent' }\n\t\t],\n\n\t\tdoubleQuotedStringDocstring: [\n\t\t\t[/\"/, { token: 'comment.block.documentation', next: '@pop' }],\n\t\t\t{ include: '@docstringContent' }\n\t\t],\n\n\t\tsingleQuotedStringDocstring: [\n\t\t\t[/'/, { token: 'comment.block.documentation', next: '@pop' }],\n\t\t\t{ include: '@docstringContent' }\n\t\t],\n\n\t\t// Operators, punctuation, brackets\n\n\t\tsymbols: [\n\t\t\t// Code point operator (either with regular character ?a or an escaped one ?\\n)\n\t\t\t[/\\?(\\\\.|[^\\\\\\s])/, 'number.constant'],\n\t\t\t// Anonymous function arguments\n\t\t\t[/&\\d+/, 'operator'],\n\t\t\t// Bitshift operators (must go before delimiters, so that << >> don't match first)\n\t\t\t[/<<<|>>>/, 'operator'],\n\t\t\t// Delimiter pairs\n\t\t\t[/[()\\[\\]\\{\\}]|<<|>>/, '@brackets'],\n\t\t\t// Triple dot is a valid name (must go before operators, so that .. doesn't match instead)\n\t\t\t[/\\.\\.\\./, 'identifier'],\n\t\t\t// Punctuation => (must go before operators, so it's not tokenized as = then >)\n\t\t\t[/=>/, 'punctuation'],\n\t\t\t// Operators\n\t\t\t[/@operator/, 'operator'],\n\t\t\t// Punctuation\n\t\t\t[/[:;,.%]/, 'punctuation']\n\t\t],\n\n\t\t// Generic helpers\n\n\t\tstringContentInterpol: [\n\t\t\t{ include: '@interpolation' },\n\t\t\t{ include: '@escapeChar' },\n\t\t\t{ include: '@stringContent' }\n\t\t],\n\n\t\tstringContent: [[/./, 'string']],\n\n\t\tstringConstantContentInterpol: [\n\t\t\t{ include: '@interpolation' },\n\t\t\t{ include: '@escapeChar' },\n\t\t\t{ include: '@stringConstantContent' }\n\t\t],\n\n\t\tstringConstantContent: [[/./, 'constant']],\n\n\t\tregexpContentInterpol: [\n\t\t\t{ include: '@interpolation' },\n\t\t\t{ include: '@escapeChar' },\n\t\t\t{ include: '@regexpContent' }\n\t\t],\n\n\t\tregexpContent: [\n\t\t\t// # may be a regular regexp char, so we use a heuristic\n\t\t\t// assuming a # surrounded by whitespace is actually a comment.\n\t\t\t[/(\\s)(#)(\\s.*)$/, ['white', 'comment.punctuation', 'comment']],\n\t\t\t[/./, 'regexp']\n\t\t],\n\n\t\tsigilContentInterpol: [\n\t\t\t{ include: '@interpolation' },\n\t\t\t{ include: '@escapeChar' },\n\t\t\t{ include: '@sigilContent' }\n\t\t],\n\n\t\tsigilContent: [[/./, 'sigil']],\n\n\t\tdocstringContent: [[/./, 'comment.block.documentation']],\n\n\t\tescapeChar: [[/@escape/, 'constant.character.escape']],\n\n\t\tinterpolation: [[/#{/, { token: 'delimiter.bracket.embed', next: '@interpolationContinue' }]],\n\n\t\tinterpolationContinue: [\n\t\t\t[/}/, { token: 'delimiter.bracket.embed', next: '@pop' }],\n\t\t\t// Interpolation brackets may contain arbitrary code,\n\t\t\t// so we simply match against all the root rules,\n\t\t\t// until we reach interpolation end (the above matches).\n\t\t\t{ include: '@root' }\n\t\t]\n\t}\n}",
  "flow9": "<languages.IMonarchLanguage>{\n\tdefaultToken: '',\n\ttokenPostfix: '.flow',\n\n\tkeywords: [\n\t\t'import',\n\t\t'require',\n\t\t'export',\n\t\t'forbid',\n\t\t'native',\n\t\t'if',\n\t\t'else',\n\t\t'cast',\n\t\t'unsafe',\n\t\t'switch',\n\t\t'default'\n\t],\n\n\ttypes: [\n\t\t'io',\n\t\t'mutable',\n\t\t'bool',\n\t\t'int',\n\t\t'double',\n\t\t'string',\n\t\t'flow',\n\t\t'void',\n\t\t'ref',\n\t\t'true',\n\t\t'false',\n\t\t'with'\n\t],\n\n\toperators: [\n\t\t'=',\n\t\t'>',\n\t\t'<',\n\t\t'<=',\n\t\t'>=',\n\t\t'==',\n\t\t'!',\n\t\t'!=',\n\t\t':=',\n\t\t'::=',\n\t\t'&&',\n\t\t'||',\n\t\t'+',\n\t\t'-',\n\t\t'*',\n\t\t'/',\n\t\t'@',\n\t\t'&',\n\t\t'%',\n\t\t':',\n\t\t'->',\n\t\t'\\\\',\n\t\t'$',\n\t\t'??',\n\t\t'^'\n\t],\n\n\tsymbols: /[@$=><!~?:&|+\\-*\\\\\\/\\^%]+/,\n\tescapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n\n\t// The main tokenizer for our languages\n\ttokenizer: {\n\t\troot: [\n\t\t\t// identifiers and keywords\n\t\t\t[\n\t\t\t\t/[a-zA-Z_]\\w*/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@keywords': 'keyword',\n\t\t\t\t\t\t'@types': 'type',\n\t\t\t\t\t\t'@default': 'identifier'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t// whitespace\n\t\t\t{ include: '@whitespace' },\n\n\t\t\t// delimiters and operators\n\t\t\t[/[{}()\\[\\]]/, 'delimiter'],\n\t\t\t[/[<>](?!@symbols)/, 'delimiter'],\n\t\t\t[\n\t\t\t\t/@symbols/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@operators': 'delimiter',\n\t\t\t\t\t\t'@default': ''\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t// numbers\n\t\t\t[/((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)/, 'number'],\n\n\t\t\t// delimiter: after number because of .\\d floats\n\t\t\t[/[;,.]/, 'delimiter'],\n\n\t\t\t// strings\n\t\t\t[/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],\n\t\t\t[/\"/, 'string', '@string']\n\t\t],\n\n\t\twhitespace: [\n\t\t\t[/[ \\t\\r\\n]+/, ''],\n\t\t\t[/\\/\\*/, 'comment', '@comment'],\n\t\t\t[/\\/\\/.*$/, 'comment']\n\t\t],\n\n\t\tcomment: [\n\t\t\t[/[^\\/*]+/, 'comment'],\n\t\t\t[/\\*\\//, 'comment', '@pop'],\n\t\t\t[/[\\/*]/, 'comment']\n\t\t],\n\n\t\tstring: [\n\t\t\t[/[^\\\\\"]+/, 'string'],\n\t\t\t[/@escapes/, 'string.escape'],\n\t\t\t[/\\\\./, 'string.escape.invalid'],\n\t\t\t[/\"/, 'string', '@pop']\n\t\t]\n\t}\n}",
  "fsharp": "<languages.IMonarchLanguage>{\n\tdefaultToken: '',\n\ttokenPostfix: '.fs',\n\n\tkeywords: [\n\t\t'abstract',\n\t\t'and',\n\t\t'atomic',\n\t\t'as',\n\t\t'assert',\n\t\t'asr',\n\t\t'base',\n\t\t'begin',\n\t\t'break',\n\t\t'checked',\n\t\t'component',\n\t\t'const',\n\t\t'constraint',\n\t\t'constructor',\n\t\t'continue',\n\t\t'class',\n\t\t'default',\n\t\t'delegate',\n\t\t'do',\n\t\t'done',\n\t\t'downcast',\n\t\t'downto',\n\t\t'elif',\n\t\t'else',\n\t\t'end',\n\t\t'exception',\n\t\t'eager',\n\t\t'event',\n\t\t'external',\n\t\t'extern',\n\t\t'false',\n\t\t'finally',\n\t\t'for',\n\t\t'fun',\n\t\t'function',\n\t\t'fixed',\n\t\t'functor',\n\t\t'global',\n\t\t'if',\n\t\t'in',\n\t\t'include',\n\t\t'inherit',\n\t\t'inline',\n\t\t'interface',\n\t\t'internal',\n\t\t'land',\n\t\t'lor',\n\t\t'lsl',\n\t\t'lsr',\n\t\t'lxor',\n\t\t'lazy',\n\t\t'let',\n\t\t'match',\n\t\t'member',\n\t\t'mod',\n\t\t'module',\n\t\t'mutable',\n\t\t'namespace',\n\t\t'method',\n\t\t'mixin',\n\t\t'new',\n\t\t'not',\n\t\t'null',\n\t\t'of',\n\t\t'open',\n\t\t'or',\n\t\t'object',\n\t\t'override',\n\t\t'private',\n\t\t'parallel',\n\t\t'process',\n\t\t'protected',\n\t\t'pure',\n\t\t'public',\n\t\t'rec',\n\t\t'return',\n\t\t'static',\n\t\t'sealed',\n\t\t'struct',\n\t\t'sig',\n\t\t'then',\n\t\t'to',\n\t\t'true',\n\t\t'tailcall',\n\t\t'trait',\n\t\t'try',\n\t\t'type',\n\t\t'upcast',\n\t\t'use',\n\t\t'val',\n\t\t'void',\n\t\t'virtual',\n\t\t'volatile',\n\t\t'when',\n\t\t'while',\n\t\t'with',\n\t\t'yield'\n\t],\n\n\t// we include these common regular expressions\n\tsymbols: /[=><!~?:&|+\\-*\\^%;\\.,\\/]+/,\n\tescapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n\tintegersuffix: /[uU]?[yslnLI]?/,\n\tfloatsuffix: /[fFmM]?/,\n\n\t// The main tokenizer for our languages\n\ttokenizer: {\n\t\troot: [\n\t\t\t// identifiers and keywords\n\t\t\t[\n\t\t\t\t/[a-zA-Z_]\\w*/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@keywords': { token: 'keyword.$0' },\n\t\t\t\t\t\t'@default': 'identifier'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t// whitespace\n\t\t\t{ include: '@whitespace' },\n\n\t\t\t// [< attributes >].\n\t\t\t[/\\[<.*>\\]/, 'annotation'],\n\n\t\t\t// Preprocessor directive\n\t\t\t[/^#(if|else|endif)/, 'keyword'],\n\n\t\t\t// delimiters and operators\n\t\t\t[/[{}()\\[\\]]/, '@brackets'],\n\t\t\t[/[<>](?!@symbols)/, '@brackets'],\n\t\t\t[/@symbols/, 'delimiter'],\n\n\t\t\t// numbers\n\t\t\t[/\\d*\\d+[eE]([\\-+]?\\d+)?(@floatsuffix)/, 'number.float'],\n\t\t\t[/\\d*\\.\\d+([eE][\\-+]?\\d+)?(@floatsuffix)/, 'number.float'],\n\t\t\t[/0x[0-9a-fA-F]+LF/, 'number.float'],\n\t\t\t[/0x[0-9a-fA-F]+(@integersuffix)/, 'number.hex'],\n\t\t\t[/0b[0-1]+(@integersuffix)/, 'number.bin'],\n\t\t\t[/\\d+(@integersuffix)/, 'number'],\n\n\t\t\t// delimiter: after number because of .\\d floats\n\t\t\t[/[;,.]/, 'delimiter'],\n\n\t\t\t// strings\n\t\t\t[/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'], // non-teminated string\n\t\t\t[/\"\"\"/, 'string', '@string.\"\"\"'],\n\t\t\t[/\"/, 'string', '@string.\"'],\n\n\t\t\t// literal string\n\t\t\t[/\\@\"/, { token: 'string.quote', next: '@litstring' }],\n\n\t\t\t// characters\n\t\t\t[/'[^\\\\']'B?/, 'string'],\n\t\t\t[/(')(@escapes)(')/, ['string', 'string.escape', 'string']],\n\t\t\t[/'/, 'string.invalid']\n\t\t],\n\n\t\twhitespace: [\n\t\t\t[/[ \\t\\r\\n]+/, ''],\n\t\t\t[/\\(\\*(?!\\))/, 'comment', '@comment'],\n\t\t\t[/\\/\\/.*$/, 'comment']\n\t\t],\n\n\t\tcomment: [\n\t\t\t[/[^*(]+/, 'comment'],\n\t\t\t[/\\*\\)/, 'comment', '@pop'],\n\t\t\t[/\\*/, 'comment'],\n\t\t\t[/\\(\\*\\)/, 'comment'],\n\t\t\t[/\\(/, 'comment']\n\t\t],\n\n\t\tstring: [\n\t\t\t[/[^\\\\\"]+/, 'string'],\n\t\t\t[/@escapes/, 'string.escape'],\n\t\t\t[/\\\\./, 'string.escape.invalid'],\n\t\t\t[\n\t\t\t\t/(\"\"\"|\"B?)/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'$#==$S2': { token: 'string', next: '@pop' },\n\t\t\t\t\t\t'@default': 'string'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t],\n\n\t\tlitstring: [\n\t\t\t[/[^\"]+/, 'string'],\n\t\t\t[/\"\"/, 'string.escape'],\n\t\t\t[/\"/, { token: 'string.quote', next: '@pop' }]\n\t\t]\n\t}\n}",
  "go": "<languages.IMonarchLanguage>{\n\tdefaultToken: '',\n\ttokenPostfix: '.go',\n\n\tkeywords: [\n\t\t'break',\n\t\t'case',\n\t\t'chan',\n\t\t'const',\n\t\t'continue',\n\t\t'default',\n\t\t'defer',\n\t\t'else',\n\t\t'fallthrough',\n\t\t'for',\n\t\t'func',\n\t\t'go',\n\t\t'goto',\n\t\t'if',\n\t\t'import',\n\t\t'interface',\n\t\t'map',\n\t\t'package',\n\t\t'range',\n\t\t'return',\n\t\t'select',\n\t\t'struct',\n\t\t'switch',\n\t\t'type',\n\t\t'var',\n\t\t'bool',\n\t\t'true',\n\t\t'false',\n\t\t'uint8',\n\t\t'uint16',\n\t\t'uint32',\n\t\t'uint64',\n\t\t'int8',\n\t\t'int16',\n\t\t'int32',\n\t\t'int64',\n\t\t'float32',\n\t\t'float64',\n\t\t'complex64',\n\t\t'complex128',\n\t\t'byte',\n\t\t'rune',\n\t\t'uint',\n\t\t'int',\n\t\t'uintptr',\n\t\t'string',\n\t\t'nil'\n\t],\n\n\toperators: [\n\t\t'+',\n\t\t'-',\n\t\t'*',\n\t\t'/',\n\t\t'%',\n\t\t'&',\n\t\t'|',\n\t\t'^',\n\t\t'<<',\n\t\t'>>',\n\t\t'&^',\n\t\t'+=',\n\t\t'-=',\n\t\t'*=',\n\t\t'/=',\n\t\t'%=',\n\t\t'&=',\n\t\t'|=',\n\t\t'^=',\n\t\t'<<=',\n\t\t'>>=',\n\t\t'&^=',\n\t\t'&&',\n\t\t'||',\n\t\t'<-',\n\t\t'++',\n\t\t'--',\n\t\t'==',\n\t\t'<',\n\t\t'>',\n\t\t'=',\n\t\t'!',\n\t\t'!=',\n\t\t'<=',\n\t\t'>=',\n\t\t':=',\n\t\t'...',\n\t\t'(',\n\t\t')',\n\t\t'',\n\t\t']',\n\t\t'{',\n\t\t'}',\n\t\t',',\n\t\t';',\n\t\t'.',\n\t\t':'\n\t],\n\n\t// we include these common regular expressions\n\tsymbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n\tescapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n\n\t// The main tokenizer for our languages\n\ttokenizer: {\n\t\troot: [\n\t\t\t// identifiers and keywords\n\t\t\t[\n\t\t\t\t/[a-zA-Z_]\\w*/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@keywords': { token: 'keyword.$0' },\n\t\t\t\t\t\t'@default': 'identifier'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t// whitespace\n\t\t\t{ include: '@whitespace' },\n\n\t\t\t// [[ attributes ]].\n\t\t\t[/\\[\\[.*\\]\\]/, 'annotation'],\n\n\t\t\t// Preprocessor directive\n\t\t\t[/^\\s*#\\w+/, 'keyword'],\n\n\t\t\t// delimiters and operators\n\t\t\t[/[{}()\\[\\]]/, '@brackets'],\n\t\t\t[/[<>](?!@symbols)/, '@brackets'],\n\t\t\t[\n\t\t\t\t/@symbols/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@operators': 'delimiter',\n\t\t\t\t\t\t'@default': ''\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t// numbers\n\t\t\t[/\\d*\\d+[eE]([\\-+]?\\d+)?/, 'number.float'],\n\t\t\t[/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\n\t\t\t[/0[xX][0-9a-fA-F']*[0-9a-fA-F]/, 'number.hex'],\n\t\t\t[/0[0-7']*[0-7]/, 'number.octal'],\n\t\t\t[/0[bB][0-1']*[0-1]/, 'number.binary'],\n\t\t\t[/\\d[\\d']*/, 'number'],\n\t\t\t[/\\d/, 'number'],\n\n\t\t\t// delimiter: after number because of .\\d floats\n\t\t\t[/[;,.]/, 'delimiter'],\n\n\t\t\t// strings\n\t\t\t[/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'], // non-teminated string\n\t\t\t[/\"/, 'string', '@string'],\n\t\t\t[/`/, 'string', '@rawstring'],\n\n\t\t\t// characters\n\t\t\t[/'[^\\\\']'/, 'string'],\n\t\t\t[/(')(@escapes)(')/, ['string', 'string.escape', 'string']],\n\t\t\t[/'/, 'string.invalid']\n\t\t],\n\n\t\twhitespace: [\n\t\t\t[/[ \\t\\r\\n]+/, ''],\n\t\t\t[/\\/\\*\\*(?!\\/)/, 'comment.doc', '@doccomment'],\n\t\t\t[/\\/\\*/, 'comment', '@comment'],\n\t\t\t[/\\/\\/.*$/, 'comment']\n\t\t],\n\n\t\tcomment: [\n\t\t\t[/[^\\/*]+/, 'comment'],\n\t\t\t// [/\\/\\*/, 'comment', '@push' ],    // nested comment not allowed :-(\n\t\t\t// [/\\/\\*/,    'comment.invalid' ],    // this breaks block comments in the shape of /* //*/\n\t\t\t[/\\*\\//, 'comment', '@pop'],\n\t\t\t[/[\\/*]/, 'comment']\n\t\t],\n\t\t//Identical copy of comment above, except for the addition of .doc\n\t\tdoccomment: [\n\t\t\t[/[^\\/*]+/, 'comment.doc'],\n\t\t\t// [/\\/\\*/, 'comment.doc', '@push' ],    // nested comment not allowed :-(\n\t\t\t[/\\/\\*/, 'comment.doc.invalid'],\n\t\t\t[/\\*\\//, 'comment.doc', '@pop'],\n\t\t\t[/[\\/*]/, 'comment.doc']\n\t\t],\n\n\t\tstring: [\n\t\t\t[/[^\\\\\"]+/, 'string'],\n\t\t\t[/@escapes/, 'string.escape'],\n\t\t\t[/\\\\./, 'string.escape.invalid'],\n\t\t\t[/\"/, 'string', '@pop']\n\t\t],\n\n\t\trawstring: [\n\t\t\t[/[^\\`]/, 'string'],\n\t\t\t[/`/, 'string', '@pop']\n\t\t]\n\t}\n}",
  "graphql": "<languages.IMonarchLanguage>{\n\t// Set defaultToken to invalid to see what you do not tokenize yet\n\tdefaultToken: 'invalid',\n\ttokenPostfix: '.gql',\n\n\tkeywords: [\n\t\t'null',\n\t\t'true',\n\t\t'false',\n\t\t'query',\n\t\t'mutation',\n\t\t'subscription',\n\t\t'extend',\n\t\t'schema',\n\t\t'directive',\n\t\t'scalar',\n\t\t'type',\n\t\t'interface',\n\t\t'union',\n\t\t'enum',\n\t\t'input',\n\t\t'implements',\n\t\t'fragment',\n\t\t'on'\n\t],\n\n\ttypeKeywords: ['Int', 'Float', 'String', 'Boolean', 'ID'],\n\n\tdirectiveLocations: [\n\t\t'SCHEMA',\n\t\t'SCALAR',\n\t\t'OBJECT',\n\t\t'FIELD_DEFINITION',\n\t\t'ARGUMENT_DEFINITION',\n\t\t'INTERFACE',\n\t\t'UNION',\n\t\t'ENUM',\n\t\t'ENUM_VALUE',\n\t\t'INPUT_OBJECT',\n\t\t'INPUT_FIELD_DEFINITION',\n\t\t'QUERY',\n\t\t'MUTATION',\n\t\t'SUBSCRIPTION',\n\t\t'FIELD',\n\t\t'FRAGMENT_DEFINITION',\n\t\t'FRAGMENT_SPREAD',\n\t\t'INLINE_FRAGMENT',\n\t\t'VARIABLE_DEFINITION'\n\t],\n\n\toperators: ['=', '!', '?', ':', '&', '|'],\n\n\t// we include these common regular expressions\n\tsymbols: /[=!?:&|]+/,\n\n\t// https://facebook.github.io/graphql/draft/#sec-String-Value\n\tescapes: /\\\\(?:[\"\\\\\\/bfnrt]|u[0-9A-Fa-f]{4})/,\n\n\t// The main tokenizer for our languages\n\ttokenizer: {\n\t\troot: [\n\t\t\t// fields and argument names\n\t\t\t[\n\t\t\t\t/[a-z_][\\w$]*/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@keywords': 'keyword',\n\t\t\t\t\t\t'@default': 'key.identifier'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t// identify typed input variables\n\t\t\t[\n\t\t\t\t/[$][\\w$]*/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@keywords': 'keyword',\n\t\t\t\t\t\t'@default': 'argument.identifier'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t// to show class names nicely\n\t\t\t[\n\t\t\t\t/[A-Z][\\w\\$]*/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@typeKeywords': 'keyword',\n\t\t\t\t\t\t'@default': 'type.identifier'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t// whitespace\n\t\t\t{ include: '@whitespace' },\n\n\t\t\t// delimiters and operators\n\t\t\t[/[{}()\\[\\]]/, '@brackets'],\n\t\t\t[/@symbols/, { cases: { '@operators': 'operator', '@default': '' } }],\n\n\t\t\t// @ annotations.\n\t\t\t// As an example, we emit a debugging log message on these tokens.\n\t\t\t// Note: message are supressed during the first load -- change some lines to see them.\n\t\t\t[/@\\s*[a-zA-Z_\\$][\\w\\$]*/, { token: 'annotation', log: 'annotation token: $0' }],\n\n\t\t\t// numbers\n\t\t\t[/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\n\t\t\t[/0[xX][0-9a-fA-F]+/, 'number.hex'],\n\t\t\t[/\\d+/, 'number'],\n\n\t\t\t// delimiter: after number because of .\\d floats\n\t\t\t[/[;,.]/, 'delimiter'],\n\n\t\t\t[/\"\"\"/, { token: 'string', next: '@mlstring', nextEmbedded: 'markdown' }],\n\n\t\t\t// strings\n\t\t\t[/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'], // non-teminated string\n\t\t\t[/\"/, { token: 'string.quote', bracket: '@open', next: '@string' }]\n\t\t],\n\n\t\tmlstring: [\n\t\t\t[/[^\"]+/, 'string'],\n\t\t\t['\"\"\"', { token: 'string', next: '@pop', nextEmbedded: '@pop' }]\n\t\t],\n\n\t\tstring: [\n\t\t\t[/[^\\\\\"]+/, 'string'],\n\t\t\t[/@escapes/, 'string.escape'],\n\t\t\t[/\\\\./, 'string.escape.invalid'],\n\t\t\t[/\"/, { token: 'string.quote', bracket: '@close', next: '@pop' }]\n\t\t],\n\n\t\twhitespace: [\n\t\t\t[/[ \\t\\r\\n]+/, ''],\n\t\t\t[/#.*$/, 'comment']\n\t\t]\n\t}\n}",
  "handlebars": "<languages.IMonarchLanguage>{\n\tdefaultToken: '',\n\ttokenPostfix: '',\n\t// ignoreCase: true,\n\n\t// The main tokenizer for our languages\n\ttokenizer: {\n\t\troot: [\n\t\t\t[/\\{\\{!--/, 'comment.block.start.handlebars', '@commentBlock'],\n\t\t\t[/\\{\\{!/, 'comment.start.handlebars', '@comment'],\n\t\t\t[/\\{\\{/, { token: '@rematch', switchTo: '@handlebarsInSimpleState.root' }],\n\t\t\t[/<!DOCTYPE/, 'metatag.html', '@doctype'],\n\t\t\t[/<!--/, 'comment.html', '@commentHtml'],\n\t\t\t[/(<)(\\w+)(\\/>)/, ['delimiter.html', 'tag.html', 'delimiter.html']],\n\t\t\t[/(<)(script)/, ['delimiter.html', { token: 'tag.html', next: '@script' }]],\n\t\t\t[/(<)(style)/, ['delimiter.html', { token: 'tag.html', next: '@style' }]],\n\t\t\t[/(<)([:\\w]+)/, ['delimiter.html', { token: 'tag.html', next: '@otherTag' }]],\n\t\t\t[/(<\\/)(\\w+)/, ['delimiter.html', { token: 'tag.html', next: '@otherTag' }]],\n\t\t\t[/</, 'delimiter.html'],\n\t\t\t[/\\{/, 'delimiter.html'],\n\t\t\t[/[^<{]+/] // text\n\t\t],\n\n\t\tdoctype: [\n\t\t\t[\n\t\t\t\t/\\{\\{/,\n\t\t\t\t{\n\t\t\t\t\ttoken: '@rematch',\n\t\t\t\t\tswitchTo: '@handlebarsInSimpleState.comment'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/[^>]+/, 'metatag.content.html'],\n\t\t\t[/>/, 'metatag.html', '@pop']\n\t\t],\n\n\t\tcomment: [\n\t\t\t[/\\}\\}/, 'comment.end.handlebars', '@pop'],\n\t\t\t[/./, 'comment.content.handlebars']\n\t\t],\n\n\t\tcommentBlock: [\n\t\t\t[/--\\}\\}/, 'comment.block.end.handlebars', '@pop'],\n\t\t\t[/./, 'comment.content.handlebars']\n\t\t],\n\n\t\tcommentHtml: [\n\t\t\t[\n\t\t\t\t/\\{\\{/,\n\t\t\t\t{\n\t\t\t\t\ttoken: '@rematch',\n\t\t\t\t\tswitchTo: '@handlebarsInSimpleState.comment'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/-->/, 'comment.html', '@pop'],\n\t\t\t[/[^-]+/, 'comment.content.html'],\n\t\t\t[/./, 'comment.content.html']\n\t\t],\n\n\t\totherTag: [\n\t\t\t[\n\t\t\t\t/\\{\\{/,\n\t\t\t\t{\n\t\t\t\t\ttoken: '@rematch',\n\t\t\t\t\tswitchTo: '@handlebarsInSimpleState.otherTag'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/\\/?>/, 'delimiter.html', '@pop'],\n\t\t\t[/\"([^\"]*)\"/, 'attribute.value'],\n\t\t\t[/'([^']*)'/, 'attribute.value'],\n\t\t\t[/[\\w\\-]+/, 'attribute.name'],\n\t\t\t[/=/, 'delimiter'],\n\t\t\t[/[ \\t\\r\\n]+/] // whitespace\n\t\t],\n\n\t\t// -- BEGIN <script> tags handling\n\n\t\t// After <script\n\t\tscript: [\n\t\t\t[\n\t\t\t\t/\\{\\{/,\n\t\t\t\t{\n\t\t\t\t\ttoken: '@rematch',\n\t\t\t\t\tswitchTo: '@handlebarsInSimpleState.script'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/type/, 'attribute.name', '@scriptAfterType'],\n\t\t\t[/\"([^\"]*)\"/, 'attribute.value'],\n\t\t\t[/'([^']*)'/, 'attribute.value'],\n\t\t\t[/[\\w\\-]+/, 'attribute.name'],\n\t\t\t[/=/, 'delimiter'],\n\t\t\t[\n\t\t\t\t/>/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'delimiter.html',\n\t\t\t\t\tnext: '@scriptEmbedded.text/javascript',\n\t\t\t\t\tnextEmbedded: 'text/javascript'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/[ \\t\\r\\n]+/], // whitespace\n\t\t\t[\n\t\t\t\t/(<\\/)(script\\s*)(>)/,\n\t\t\t\t['delimiter.html', 'tag.html', { token: 'delimiter.html', next: '@pop' }]\n\t\t\t]\n\t\t],\n\n\t\t// After <script ... type\n\t\tscriptAfterType: [\n\t\t\t[\n\t\t\t\t/\\{\\{/,\n\t\t\t\t{\n\t\t\t\t\ttoken: '@rematch',\n\t\t\t\t\tswitchTo: '@handlebarsInSimpleState.scriptAfterType'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/=/, 'delimiter', '@scriptAfterTypeEquals'],\n\t\t\t[\n\t\t\t\t/>/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'delimiter.html',\n\t\t\t\t\tnext: '@scriptEmbedded.text/javascript',\n\t\t\t\t\tnextEmbedded: 'text/javascript'\n\t\t\t\t}\n\t\t\t], // cover invalid e.g. <script type>\n\t\t\t[/[ \\t\\r\\n]+/], // whitespace\n\t\t\t[/<\\/script\\s*>/, { token: '@rematch', next: '@pop' }]\n\t\t],\n\n\t\t// After <script ... type =\n\t\tscriptAfterTypeEquals: [\n\t\t\t[\n\t\t\t\t/\\{\\{/,\n\t\t\t\t{\n\t\t\t\t\ttoken: '@rematch',\n\t\t\t\t\tswitchTo: '@handlebarsInSimpleState.scriptAfterTypeEquals'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[\n\t\t\t\t/\"([^\"]*)\"/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'attribute.value',\n\t\t\t\t\tswitchTo: '@scriptWithCustomType.$1'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[\n\t\t\t\t/'([^']*)'/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'attribute.value',\n\t\t\t\t\tswitchTo: '@scriptWithCustomType.$1'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[\n\t\t\t\t/>/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'delimiter.html',\n\t\t\t\t\tnext: '@scriptEmbedded.text/javascript',\n\t\t\t\t\tnextEmbedded: 'text/javascript'\n\t\t\t\t}\n\t\t\t], // cover invalid e.g. <script type=>\n\t\t\t[/[ \\t\\r\\n]+/], // whitespace\n\t\t\t[/<\\/script\\s*>/, { token: '@rematch', next: '@pop' }]\n\t\t],\n\n\t\t// After <script ... type = $S2\n\t\tscriptWithCustomType: [\n\t\t\t[\n\t\t\t\t/\\{\\{/,\n\t\t\t\t{\n\t\t\t\t\ttoken: '@rematch',\n\t\t\t\t\tswitchTo: '@handlebarsInSimpleState.scriptWithCustomType.$S2'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[\n\t\t\t\t/>/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'delimiter.html',\n\t\t\t\t\tnext: '@scriptEmbedded.$S2',\n\t\t\t\t\tnextEmbedded: '$S2'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/\"([^\"]*)\"/, 'attribute.value'],\n\t\t\t[/'([^']*)'/, 'attribute.value'],\n\t\t\t[/[\\w\\-]+/, 'attribute.name'],\n\t\t\t[/=/, 'delimiter'],\n\t\t\t[/[ \\t\\r\\n]+/], // whitespace\n\t\t\t[/<\\/script\\s*>/, { token: '@rematch', next: '@pop' }]\n\t\t],\n\n\t\tscriptEmbedded: [\n\t\t\t[\n\t\t\t\t/\\{\\{/,\n\t\t\t\t{\n\t\t\t\t\ttoken: '@rematch',\n\t\t\t\t\tswitchTo: '@handlebarsInEmbeddedState.scriptEmbedded.$S2',\n\t\t\t\t\tnextEmbedded: '@pop'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/<\\/script/, { token: '@rematch', next: '@pop', nextEmbedded: '@pop' }]\n\t\t],\n\n\t\t// -- END <script> tags handling\n\n\t\t// -- BEGIN <style> tags handling\n\n\t\t// After <style\n\t\tstyle: [\n\t\t\t[\n\t\t\t\t/\\{\\{/,\n\t\t\t\t{\n\t\t\t\t\ttoken: '@rematch',\n\t\t\t\t\tswitchTo: '@handlebarsInSimpleState.style'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/type/, 'attribute.name', '@styleAfterType'],\n\t\t\t[/\"([^\"]*)\"/, 'attribute.value'],\n\t\t\t[/'([^']*)'/, 'attribute.value'],\n\t\t\t[/[\\w\\-]+/, 'attribute.name'],\n\t\t\t[/=/, 'delimiter'],\n\t\t\t[\n\t\t\t\t/>/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'delimiter.html',\n\t\t\t\t\tnext: '@styleEmbedded.text/css',\n\t\t\t\t\tnextEmbedded: 'text/css'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/[ \\t\\r\\n]+/], // whitespace\n\t\t\t[\n\t\t\t\t/(<\\/)(style\\s*)(>)/,\n\t\t\t\t['delimiter.html', 'tag.html', { token: 'delimiter.html', next: '@pop' }]\n\t\t\t]\n\t\t],\n\n\t\t// After <style ... type\n\t\tstyleAfterType: [\n\t\t\t[\n\t\t\t\t/\\{\\{/,\n\t\t\t\t{\n\t\t\t\t\ttoken: '@rematch',\n\t\t\t\t\tswitchTo: '@handlebarsInSimpleState.styleAfterType'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/=/, 'delimiter', '@styleAfterTypeEquals'],\n\t\t\t[\n\t\t\t\t/>/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'delimiter.html',\n\t\t\t\t\tnext: '@styleEmbedded.text/css',\n\t\t\t\t\tnextEmbedded: 'text/css'\n\t\t\t\t}\n\t\t\t], // cover invalid e.g. <style type>\n\t\t\t[/[ \\t\\r\\n]+/], // whitespace\n\t\t\t[/<\\/style\\s*>/, { token: '@rematch', next: '@pop' }]\n\t\t],\n\n\t\t// After <style ... type =\n\t\tstyleAfterTypeEquals: [\n\t\t\t[\n\t\t\t\t/\\{\\{/,\n\t\t\t\t{\n\t\t\t\t\ttoken: '@rematch',\n\t\t\t\t\tswitchTo: '@handlebarsInSimpleState.styleAfterTypeEquals'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[\n\t\t\t\t/\"([^\"]*)\"/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'attribute.value',\n\t\t\t\t\tswitchTo: '@styleWithCustomType.$1'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[\n\t\t\t\t/'([^']*)'/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'attribute.value',\n\t\t\t\t\tswitchTo: '@styleWithCustomType.$1'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[\n\t\t\t\t/>/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'delimiter.html',\n\t\t\t\t\tnext: '@styleEmbedded.text/css',\n\t\t\t\t\tnextEmbedded: 'text/css'\n\t\t\t\t}\n\t\t\t], // cover invalid e.g. <style type=>\n\t\t\t[/[ \\t\\r\\n]+/], // whitespace\n\t\t\t[/<\\/style\\s*>/, { token: '@rematch', next: '@pop' }]\n\t\t],\n\n\t\t// After <style ... type = $S2\n\t\tstyleWithCustomType: [\n\t\t\t[\n\t\t\t\t/\\{\\{/,\n\t\t\t\t{\n\t\t\t\t\ttoken: '@rematch',\n\t\t\t\t\tswitchTo: '@handlebarsInSimpleState.styleWithCustomType.$S2'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[\n\t\t\t\t/>/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'delimiter.html',\n\t\t\t\t\tnext: '@styleEmbedded.$S2',\n\t\t\t\t\tnextEmbedded: '$S2'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/\"([^\"]*)\"/, 'attribute.value'],\n\t\t\t[/'([^']*)'/, 'attribute.value'],\n\t\t\t[/[\\w\\-]+/, 'attribute.name'],\n\t\t\t[/=/, 'delimiter'],\n\t\t\t[/[ \\t\\r\\n]+/], // whitespace\n\t\t\t[/<\\/style\\s*>/, { token: '@rematch', next: '@pop' }]\n\t\t],\n\n\t\tstyleEmbedded: [\n\t\t\t[\n\t\t\t\t/\\{\\{/,\n\t\t\t\t{\n\t\t\t\t\ttoken: '@rematch',\n\t\t\t\t\tswitchTo: '@handlebarsInEmbeddedState.styleEmbedded.$S2',\n\t\t\t\t\tnextEmbedded: '@pop'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/<\\/style/, { token: '@rematch', next: '@pop', nextEmbedded: '@pop' }]\n\t\t],\n\n\t\t// -- END <style> tags handling\n\n\t\thandlebarsInSimpleState: [\n\t\t\t[/\\{\\{\\{?/, 'delimiter.handlebars'],\n\t\t\t[/\\}\\}\\}?/, { token: 'delimiter.handlebars', switchTo: '@$S2.$S3' }],\n\t\t\t{ include: 'handlebarsRoot' }\n\t\t],\n\n\t\thandlebarsInEmbeddedState: [\n\t\t\t[/\\{\\{\\{?/, 'delimiter.handlebars'],\n\t\t\t[\n\t\t\t\t/\\}\\}\\}?/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'delimiter.handlebars',\n\t\t\t\t\tswitchTo: '@$S2.$S3',\n\t\t\t\t\tnextEmbedded: '$S3'\n\t\t\t\t}\n\t\t\t],\n\t\t\t{ include: 'handlebarsRoot' }\n\t\t],\n\n\t\thandlebarsRoot: [\n\t\t\t[/\"[^\"]*\"/, 'string.handlebars'],\n\t\t\t[/[#/][^\\s}]+/, 'keyword.helper.handlebars'],\n\t\t\t[/else\\b/, 'keyword.helper.handlebars'],\n\t\t\t[/[\\s]+/],\n\t\t\t[/[^}]/, 'variable.parameter.handlebars']\n\t\t]\n\t}\n}",
  "hcl": "<languages.IMonarchLanguage>{\n\tdefaultToken: '',\n\ttokenPostfix: '.hcl',\n\n\tkeywords: [\n\t\t'var',\n\t\t'local',\n\t\t'path',\n\t\t'for_each',\n\t\t'any',\n\t\t'string',\n\t\t'number',\n\t\t'bool',\n\t\t'true',\n\t\t'false',\n\t\t'null',\n\t\t'if ',\n\t\t'else ',\n\t\t'endif ',\n\t\t'for ',\n\t\t'in',\n\t\t'endfor'\n\t],\n\n\toperators: [\n\t\t'=',\n\t\t'>=',\n\t\t'<=',\n\t\t'==',\n\t\t'!=',\n\t\t'+',\n\t\t'-',\n\t\t'*',\n\t\t'/',\n\t\t'%',\n\t\t'&&',\n\t\t'||',\n\t\t'!',\n\t\t'<',\n\t\t'>',\n\t\t'?',\n\t\t'...',\n\t\t':'\n\t],\n\n\tsymbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n\tescapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n\tterraformFunctions:\n\t\t/(abs|ceil|floor|log|max|min|pow|signum|chomp|format|formatlist|indent|join|lower|regex|regexall|replace|split|strrev|substr|title|trimspace|upper|chunklist|coalesce|coalescelist|compact|concat|contains|distinct|element|flatten|index|keys|length|list|lookup|map|matchkeys|merge|range|reverse|setintersection|setproduct|setunion|slice|sort|transpose|values|zipmap|base64decode|base64encode|base64gzip|csvdecode|jsondecode|jsonencode|urlencode|yamldecode|yamlencode|abspath|dirname|pathexpand|basename|file|fileexists|fileset|filebase64|templatefile|formatdate|timeadd|timestamp|base64sha256|base64sha512|bcrypt|filebase64sha256|filebase64sha512|filemd5|filemd1|filesha256|filesha512|md5|rsadecrypt|sha1|sha256|sha512|uuid|uuidv5|cidrhost|cidrnetmask|cidrsubnet|tobool|tolist|tomap|tonumber|toset|tostring)/,\n\tterraformMainBlocks: /(module|data|terraform|resource|provider|variable|output|locals)/,\n\ttokenizer: {\n\t\troot: [\n\t\t\t// highlight main blocks\n\t\t\t[\n\t\t\t\t/^@terraformMainBlocks([ \\t]*)([\\w-]+|\"[\\w-]+\"|)([ \\t]*)([\\w-]+|\"[\\w-]+\"|)([ \\t]*)(\\{)/,\n\t\t\t\t['type', '', 'string', '', 'string', '', '@brackets']\n\t\t\t],\n\t\t\t// highlight all the remaining blocks\n\t\t\t[\n\t\t\t\t/(\\w+[ \\t]+)([ \\t]*)([\\w-]+|\"[\\w-]+\"|)([ \\t]*)([\\w-]+|\"[\\w-]+\"|)([ \\t]*)(\\{)/,\n\t\t\t\t['identifier', '', 'string', '', 'string', '', '@brackets']\n\t\t\t],\n\t\t\t// highlight block\n\t\t\t[\n\t\t\t\t/(\\w+[ \\t]+)([ \\t]*)([\\w-]+|\"[\\w-]+\"|)([ \\t]*)([\\w-]+|\"[\\w-]+\"|)(=)(\\{)/,\n\t\t\t\t['identifier', '', 'string', '', 'operator', '', '@brackets']\n\t\t\t],\n\t\t\t// terraform general highlight - shared with expressions\n\t\t\t{ include: '@terraform' }\n\t\t],\n\t\tterraform: [\n\t\t\t// highlight terraform functions\n\t\t\t[/@terraformFunctions(\\()/, ['type', '@brackets']],\n\t\t\t// all other words are variables or keywords\n\t\t\t[\n\t\t\t\t/[a-zA-Z_]\\w*-*/, // must work with variables such as foo-bar and also with negative numbers\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@keywords': { token: 'keyword.$0' },\n\t\t\t\t\t\t'@default': 'variable'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t{ include: '@whitespace' },\n\t\t\t{ include: '@heredoc' },\n\t\t\t// delimiters and operators\n\t\t\t[/[{}()\\[\\]]/, '@brackets'],\n\t\t\t[/[<>](?!@symbols)/, '@brackets'],\n\t\t\t[\n\t\t\t\t/@symbols/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@operators': 'operator',\n\t\t\t\t\t\t'@default': ''\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t// numbers\n\t\t\t[/\\d*\\d+[eE]([\\-+]?\\d+)?/, 'number.float'],\n\t\t\t[/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\n\t\t\t[/\\d[\\d']*/, 'number'],\n\t\t\t[/\\d/, 'number'],\n\t\t\t[/[;,.]/, 'delimiter'], // delimiter: after number because of .\\d floats\n\t\t\t// strings\n\t\t\t[/\"/, 'string', '@string'], // this will include expressions\n\t\t\t[/'/, 'invalid']\n\t\t],\n\t\theredoc: [\n\t\t\t[/<<[-]*\\s*[\"]?([\\w\\-]+)[\"]?/, { token: 'string.heredoc.delimiter', next: '@heredocBody.$1' }]\n\t\t],\n\t\theredocBody: [\n\t\t\t[\n\t\t\t\t/([\\w\\-]+)$/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'$1==$S2': [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttoken: 'string.heredoc.delimiter',\n\t\t\t\t\t\t\t\tnext: '@popall'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t],\n\t\t\t\t\t\t'@default': 'string.heredoc'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/./, 'string.heredoc']\n\t\t],\n\t\twhitespace: [\n\t\t\t[/[ \\t\\r\\n]+/, ''],\n\t\t\t[/\\/\\*/, 'comment', '@comment'],\n\t\t\t[/\\/\\/.*$/, 'comment'],\n\t\t\t[/#.*$/, 'comment']\n\t\t],\n\t\tcomment: [\n\t\t\t[/[^\\/*]+/, 'comment'],\n\t\t\t[/\\*\\//, 'comment', '@pop'],\n\t\t\t[/[\\/*]/, 'comment']\n\t\t],\n\t\tstring: [\n\t\t\t[/\\$\\{/, { token: 'delimiter', next: '@stringExpression' }],\n\t\t\t[/[^\\\\\"\\$]+/, 'string'],\n\t\t\t[/@escapes/, 'string.escape'],\n\t\t\t[/\\\\./, 'string.escape.invalid'],\n\t\t\t[/\"/, 'string', '@popall']\n\t\t],\n\t\tstringInsideExpression: [\n\t\t\t[/[^\\\\\"]+/, 'string'],\n\t\t\t[/@escapes/, 'string.escape'],\n\t\t\t[/\\\\./, 'string.escape.invalid'],\n\t\t\t[/\"/, 'string', '@pop']\n\t\t],\n\t\tstringExpression: [\n\t\t\t[/\\}/, { token: 'delimiter', next: '@pop' }],\n\t\t\t[/\"/, 'string', '@stringInsideExpression'],\n\t\t\t{ include: '@terraform' }\n\t\t]\n\t}\n}",
  "html": "<languages.IMonarchLanguage>{\n\tdefaultToken: '',\n\ttokenPostfix: '.html',\n\tignoreCase: true,\n\n\t// The main tokenizer for our languages\n\ttokenizer: {\n\t\troot: [\n\t\t\t[/<!DOCTYPE/, 'metatag', '@doctype'],\n\t\t\t[/<!--/, 'comment', '@comment'],\n\t\t\t[/(<)((?:[\\w\\-]+:)?[\\w\\-]+)(\\s*)(\\/>)/, ['delimiter', 'tag', '', 'delimiter']],\n\t\t\t[/(<)(script)/, ['delimiter', { token: 'tag', next: '@script' }]],\n\t\t\t[/(<)(style)/, ['delimiter', { token: 'tag', next: '@style' }]],\n\t\t\t[/(<)((?:[\\w\\-]+:)?[\\w\\-]+)/, ['delimiter', { token: 'tag', next: '@otherTag' }]],\n\t\t\t[/(<\\/)((?:[\\w\\-]+:)?[\\w\\-]+)/, ['delimiter', { token: 'tag', next: '@otherTag' }]],\n\t\t\t[/</, 'delimiter'],\n\t\t\t[/[^<]+/] // text\n\t\t],\n\n\t\tdoctype: [\n\t\t\t[/[^>]+/, 'metatag.content'],\n\t\t\t[/>/, 'metatag', '@pop']\n\t\t],\n\n\t\tcomment: [\n\t\t\t[/-->/, 'comment', '@pop'],\n\t\t\t[/[^-]+/, 'comment.content'],\n\t\t\t[/./, 'comment.content']\n\t\t],\n\n\t\totherTag: [\n\t\t\t[/\\/?>/, 'delimiter', '@pop'],\n\t\t\t[/\"([^\"]*)\"/, 'attribute.value'],\n\t\t\t[/'([^']*)'/, 'attribute.value'],\n\t\t\t[/[\\w\\-]+/, 'attribute.name'],\n\t\t\t[/=/, 'delimiter'],\n\t\t\t[/[ \\t\\r\\n]+/] // whitespace\n\t\t],\n\n\t\t// -- BEGIN <script> tags handling\n\n\t\t// After <script\n\t\tscript: [\n\t\t\t[/type/, 'attribute.name', '@scriptAfterType'],\n\t\t\t[/\"([^\"]*)\"/, 'attribute.value'],\n\t\t\t[/'([^']*)'/, 'attribute.value'],\n\t\t\t[/[\\w\\-]+/, 'attribute.name'],\n\t\t\t[/=/, 'delimiter'],\n\t\t\t[\n\t\t\t\t/>/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'delimiter',\n\t\t\t\t\tnext: '@scriptEmbedded',\n\t\t\t\t\tnextEmbedded: 'text/javascript'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/[ \\t\\r\\n]+/], // whitespace\n\t\t\t[/(<\\/)(script\\s*)(>)/, ['delimiter', 'tag', { token: 'delimiter', next: '@pop' }]]\n\t\t],\n\n\t\t// After <script ... type\n\t\tscriptAfterType: [\n\t\t\t[/=/, 'delimiter', '@scriptAfterTypeEquals'],\n\t\t\t[\n\t\t\t\t/>/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'delimiter',\n\t\t\t\t\tnext: '@scriptEmbedded',\n\t\t\t\t\tnextEmbedded: 'text/javascript'\n\t\t\t\t}\n\t\t\t], // cover invalid e.g. <script type>\n\t\t\t[/[ \\t\\r\\n]+/], // whitespace\n\t\t\t[/<\\/script\\s*>/, { token: '@rematch', next: '@pop' }]\n\t\t],\n\n\t\t// After <script ... type =\n\t\tscriptAfterTypeEquals: [\n\t\t\t[\n\t\t\t\t/\"module\"/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'attribute.value',\n\t\t\t\t\tswitchTo: '@scriptWithCustomType.text/javascript'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[\n\t\t\t\t/'module'/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'attribute.value',\n\t\t\t\t\tswitchTo: '@scriptWithCustomType.text/javascript'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[\n\t\t\t\t/\"([^\"]*)\"/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'attribute.value',\n\t\t\t\t\tswitchTo: '@scriptWithCustomType.$1'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[\n\t\t\t\t/'([^']*)'/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'attribute.value',\n\t\t\t\t\tswitchTo: '@scriptWithCustomType.$1'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[\n\t\t\t\t/>/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'delimiter',\n\t\t\t\t\tnext: '@scriptEmbedded',\n\t\t\t\t\tnextEmbedded: 'text/javascript'\n\t\t\t\t}\n\t\t\t], // cover invalid e.g. <script type=>\n\t\t\t[/[ \\t\\r\\n]+/], // whitespace\n\t\t\t[/<\\/script\\s*>/, { token: '@rematch', next: '@pop' }]\n\t\t],\n\n\t\t// After <script ... type = $S2\n\t\tscriptWithCustomType: [\n\t\t\t[\n\t\t\t\t/>/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'delimiter',\n\t\t\t\t\tnext: '@scriptEmbedded.$S2',\n\t\t\t\t\tnextEmbedded: '$S2'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/\"([^\"]*)\"/, 'attribute.value'],\n\t\t\t[/'([^']*)'/, 'attribute.value'],\n\t\t\t[/[\\w\\-]+/, 'attribute.name'],\n\t\t\t[/=/, 'delimiter'],\n\t\t\t[/[ \\t\\r\\n]+/], // whitespace\n\t\t\t[/<\\/script\\s*>/, { token: '@rematch', next: '@pop' }]\n\t\t],\n\n\t\tscriptEmbedded: [\n\t\t\t[/<\\/script/, { token: '@rematch', next: '@pop', nextEmbedded: '@pop' }],\n\t\t\t[/[^<]+/, '']\n\t\t],\n\n\t\t// -- END <script> tags handling\n\n\t\t// -- BEGIN <style> tags handling\n\n\t\t// After <style\n\t\tstyle: [\n\t\t\t[/type/, 'attribute.name', '@styleAfterType'],\n\t\t\t[/\"([^\"]*)\"/, 'attribute.value'],\n\t\t\t[/'([^']*)'/, 'attribute.value'],\n\t\t\t[/[\\w\\-]+/, 'attribute.name'],\n\t\t\t[/=/, 'delimiter'],\n\t\t\t[\n\t\t\t\t/>/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'delimiter',\n\t\t\t\t\tnext: '@styleEmbedded',\n\t\t\t\t\tnextEmbedded: 'text/css'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/[ \\t\\r\\n]+/], // whitespace\n\t\t\t[/(<\\/)(style\\s*)(>)/, ['delimiter', 'tag', { token: 'delimiter', next: '@pop' }]]\n\t\t],\n\n\t\t// After <style ... type\n\t\tstyleAfterType: [\n\t\t\t[/=/, 'delimiter', '@styleAfterTypeEquals'],\n\t\t\t[\n\t\t\t\t/>/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'delimiter',\n\t\t\t\t\tnext: '@styleEmbedded',\n\t\t\t\t\tnextEmbedded: 'text/css'\n\t\t\t\t}\n\t\t\t], // cover invalid e.g. <style type>\n\t\t\t[/[ \\t\\r\\n]+/], // whitespace\n\t\t\t[/<\\/style\\s*>/, { token: '@rematch', next: '@pop' }]\n\t\t],\n\n\t\t// After <style ... type =\n\t\tstyleAfterTypeEquals: [\n\t\t\t[\n\t\t\t\t/\"([^\"]*)\"/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'attribute.value',\n\t\t\t\t\tswitchTo: '@styleWithCustomType.$1'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[\n\t\t\t\t/'([^']*)'/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'attribute.value',\n\t\t\t\t\tswitchTo: '@styleWithCustomType.$1'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[\n\t\t\t\t/>/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'delimiter',\n\t\t\t\t\tnext: '@styleEmbedded',\n\t\t\t\t\tnextEmbedded: 'text/css'\n\t\t\t\t}\n\t\t\t], // cover invalid e.g. <style type=>\n\t\t\t[/[ \\t\\r\\n]+/], // whitespace\n\t\t\t[/<\\/style\\s*>/, { token: '@rematch', next: '@pop' }]\n\t\t],\n\n\t\t// After <style ... type = $S2\n\t\tstyleWithCustomType: [\n\t\t\t[\n\t\t\t\t/>/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'delimiter',\n\t\t\t\t\tnext: '@styleEmbedded.$S2',\n\t\t\t\t\tnextEmbedded: '$S2'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/\"([^\"]*)\"/, 'attribute.value'],\n\t\t\t[/'([^']*)'/, 'attribute.value'],\n\t\t\t[/[\\w\\-]+/, 'attribute.name'],\n\t\t\t[/=/, 'delimiter'],\n\t\t\t[/[ \\t\\r\\n]+/], // whitespace\n\t\t\t[/<\\/style\\s*>/, { token: '@rematch', next: '@pop' }]\n\t\t],\n\n\t\tstyleEmbedded: [\n\t\t\t[/<\\/style/, { token: '@rematch', next: '@pop', nextEmbedded: '@pop' }],\n\t\t\t[/[^<]+/, '']\n\t\t]\n\n\t\t// -- END <style> tags handling\n\t}\n}",
  "ini": "<languages.IMonarchLanguage>{\n\tdefaultToken: '',\n\ttokenPostfix: '.ini',\n\n\t// we include these common regular expressions\n\tescapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n\n\t// The main tokenizer for our languages\n\ttokenizer: {\n\t\troot: [\n\t\t\t// sections\n\t\t\t[/^\\[[^\\]]*\\]/, 'metatag'],\n\n\t\t\t// keys\n\t\t\t[/(^\\w+)(\\s*)(\\=)/, ['key', '', 'delimiter']],\n\n\t\t\t// whitespace\n\t\t\t{ include: '@whitespace' },\n\n\t\t\t// numbers\n\t\t\t[/\\d+/, 'number'],\n\n\t\t\t// strings: recover on non-terminated strings\n\t\t\t[/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'], // non-teminated string\n\t\t\t[/'([^'\\\\]|\\\\.)*$/, 'string.invalid'], // non-teminated string\n\t\t\t[/\"/, 'string', '@string.\"'],\n\t\t\t[/'/, 'string', \"@string.'\"]\n\t\t],\n\n\t\twhitespace: [\n\t\t\t[/[ \\t\\r\\n]+/, ''],\n\t\t\t[/^\\s*[#;].*$/, 'comment']\n\t\t],\n\n\t\tstring: [\n\t\t\t[/[^\\\\\"']+/, 'string'],\n\t\t\t[/@escapes/, 'string.escape'],\n\t\t\t[/\\\\./, 'string.escape.invalid'],\n\t\t\t[\n\t\t\t\t/[\"']/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'$#==$S2': { token: 'string', next: '@pop' },\n\t\t\t\t\t\t'@default': 'string'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t]\n\t}\n}",
  "java": "<languages.IMonarchLanguage>{\n\tdefaultToken: '',\n\ttokenPostfix: '.java',\n\n\tkeywords: [\n\t\t'abstract',\n\t\t'continue',\n\t\t'for',\n\t\t'new',\n\t\t'switch',\n\t\t'assert',\n\t\t'default',\n\t\t'goto',\n\t\t'package',\n\t\t'synchronized',\n\t\t'boolean',\n\t\t'do',\n\t\t'if',\n\t\t'private',\n\t\t'this',\n\t\t'break',\n\t\t'double',\n\t\t'implements',\n\t\t'protected',\n\t\t'throw',\n\t\t'byte',\n\t\t'else',\n\t\t'import',\n\t\t'public',\n\t\t'throws',\n\t\t'case',\n\t\t'enum',\n\t\t'instanceof',\n\t\t'return',\n\t\t'transient',\n\t\t'catch',\n\t\t'extends',\n\t\t'int',\n\t\t'short',\n\t\t'try',\n\t\t'char',\n\t\t'final',\n\t\t'interface',\n\t\t'static',\n\t\t'void',\n\t\t'class',\n\t\t'finally',\n\t\t'long',\n\t\t'strictfp',\n\t\t'volatile',\n\t\t'const',\n\t\t'float',\n\t\t'native',\n\t\t'super',\n\t\t'while',\n\t\t'true',\n\t\t'false',\n\t\t'yield',\n\t\t'record',\n\t\t'sealed',\n\t\t'non-sealed',\n\t\t'permits'\n\t],\n\n\toperators: [\n\t\t'=',\n\t\t'>',\n\t\t'<',\n\t\t'!',\n\t\t'~',\n\t\t'?',\n\t\t':',\n\t\t'==',\n\t\t'<=',\n\t\t'>=',\n\t\t'!=',\n\t\t'&&',\n\t\t'||',\n\t\t'++',\n\t\t'--',\n\t\t'+',\n\t\t'-',\n\t\t'*',\n\t\t'/',\n\t\t'&',\n\t\t'|',\n\t\t'^',\n\t\t'%',\n\t\t'<<',\n\t\t'>>',\n\t\t'>>>',\n\t\t'+=',\n\t\t'-=',\n\t\t'*=',\n\t\t'/=',\n\t\t'&=',\n\t\t'|=',\n\t\t'^=',\n\t\t'%=',\n\t\t'<<=',\n\t\t'>>=',\n\t\t'>>>='\n\t],\n\n\t// we include these common regular expressions\n\tsymbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n\tescapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n\tdigits: /\\d+(_+\\d+)*/,\n\toctaldigits: /[0-7]+(_+[0-7]+)*/,\n\tbinarydigits: /[0-1]+(_+[0-1]+)*/,\n\thexdigits: /[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,\n\n\t// The main tokenizer for our languages\n\ttokenizer: {\n\t\troot: [\n\t\t\t// Special keyword with a dash\n\t\t\t['non-sealed', 'keyword.non-sealed'],\n\n\t\t\t// identifiers and keywords\n\t\t\t[\n\t\t\t\t/[a-zA-Z_$][\\w$]*/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@keywords': { token: 'keyword.$0' },\n\t\t\t\t\t\t'@default': 'identifier'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t// whitespace\n\t\t\t{ include: '@whitespace' },\n\n\t\t\t// delimiters and operators\n\t\t\t[/[{}()\\[\\]]/, '@brackets'],\n\t\t\t[/[<>](?!@symbols)/, '@brackets'],\n\t\t\t[\n\t\t\t\t/@symbols/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@operators': 'delimiter',\n\t\t\t\t\t\t'@default': ''\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t// @ annotations.\n\t\t\t[/@\\s*[a-zA-Z_\\$][\\w\\$]*/, 'annotation'],\n\n\t\t\t// numbers\n\t\t\t[/(@digits)[eE]([\\-+]?(@digits))?[fFdD]?/, 'number.float'],\n\t\t\t[/(@digits)\\.(@digits)([eE][\\-+]?(@digits))?[fFdD]?/, 'number.float'],\n\t\t\t[/0[xX](@hexdigits)[Ll]?/, 'number.hex'],\n\t\t\t[/0(@octaldigits)[Ll]?/, 'number.octal'],\n\t\t\t[/0[bB](@binarydigits)[Ll]?/, 'number.binary'],\n\t\t\t[/(@digits)[fFdD]/, 'number.float'],\n\t\t\t[/(@digits)[lL]?/, 'number'],\n\n\t\t\t// delimiter: after number because of .\\d floats\n\t\t\t[/[;,.]/, 'delimiter'],\n\n\t\t\t// strings\n\t\t\t[/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'], // non-teminated string\n\t\t\t[/\"\"\"/, 'string', '@multistring'],\n\t\t\t[/\"/, 'string', '@string'],\n\n\t\t\t// characters\n\t\t\t[/'[^\\\\']'/, 'string'],\n\t\t\t[/(')(@escapes)(')/, ['string', 'string.escape', 'string']],\n\t\t\t[/'/, 'string.invalid']\n\t\t],\n\n\t\twhitespace: [\n\t\t\t[/[ \\t\\r\\n]+/, ''],\n\t\t\t[/\\/\\*\\*(?!\\/)/, 'comment.doc', '@javadoc'],\n\t\t\t[/\\/\\*/, 'comment', '@comment'],\n\t\t\t[/\\/\\/.*$/, 'comment']\n\t\t],\n\n\t\tcomment: [\n\t\t\t[/[^\\/*]+/, 'comment'],\n\t\t\t// [/\\/\\*/, 'comment', '@push' ],    // nested comment not allowed :-(\n\t\t\t// [/\\/\\*/,    'comment.invalid' ],    // this breaks block comments in the shape of /* //*/\n\t\t\t[/\\*\\//, 'comment', '@pop'],\n\t\t\t[/[\\/*]/, 'comment']\n\t\t],\n\t\t//Identical copy of comment above, except for the addition of .doc\n\t\tjavadoc: [\n\t\t\t[/[^\\/*]+/, 'comment.doc'],\n\t\t\t// [/\\/\\*/, 'comment.doc', '@push' ],    // nested comment not allowed :-(\n\t\t\t[/\\/\\*/, 'comment.doc.invalid'],\n\t\t\t[/\\*\\//, 'comment.doc', '@pop'],\n\t\t\t[/[\\/*]/, 'comment.doc']\n\t\t],\n\n\t\tstring: [\n\t\t\t[/[^\\\\\"]+/, 'string'],\n\t\t\t[/@escapes/, 'string.escape'],\n\t\t\t[/\\\\./, 'string.escape.invalid'],\n\t\t\t[/\"/, 'string', '@pop']\n\t\t],\n\n\t\tmultistring: [\n\t\t\t[/[^\\\\\"]+/, 'string'],\n\t\t\t[/@escapes/, 'string.escape'],\n\t\t\t[/\\\\./, 'string.escape.invalid'],\n\t\t\t[/\"\"\"/, 'string', '@pop'],\n\t\t\t[/./, 'string']\n\t\t]\n\t}\n}",
  "javascript": "<languages.IMonarchLanguage>{\n\t// Set defaultToken to invalid to see what you do not tokenize yet\n\tdefaultToken: 'invalid',\n\ttokenPostfix: '.js',\n\n\tkeywords: [\n\t\t'break',\n\t\t'case',\n\t\t'catch',\n\t\t'class',\n\t\t'continue',\n\t\t'const',\n\t\t'constructor',\n\t\t'debugger',\n\t\t'default',\n\t\t'delete',\n\t\t'do',\n\t\t'else',\n\t\t'export',\n\t\t'extends',\n\t\t'false',\n\t\t'finally',\n\t\t'for',\n\t\t'from',\n\t\t'function',\n\t\t'get',\n\t\t'if',\n\t\t'import',\n\t\t'in',\n\t\t'instanceof',\n\t\t'let',\n\t\t'new',\n\t\t'null',\n\t\t'return',\n\t\t'set',\n\t\t'static',\n\t\t'super',\n\t\t'switch',\n\t\t'symbol',\n\t\t'this',\n\t\t'throw',\n\t\t'true',\n\t\t'try',\n\t\t'typeof',\n\t\t'undefined',\n\t\t'var',\n\t\t'void',\n\t\t'while',\n\t\t'with',\n\t\t'yield',\n\t\t'async',\n\t\t'await',\n\t\t'of'\n\t],\n\ttypeKeywords: [],\n\n\toperators: tsLanguage.operators,\n\tsymbols: tsLanguage.symbols,\n\tescapes: tsLanguage.escapes,\n\tdigits: tsLanguage.digits,\n\toctaldigits: tsLanguage.octaldigits,\n\tbinarydigits: tsLanguage.binarydigits,\n\thexdigits: tsLanguage.hexdigits,\n\tregexpctl: tsLanguage.regexpctl,\n\tregexpesc: tsLanguage.regexpesc,\n\ttokenizer: tsLanguage.tokenizer\n}",
  "julia": "<languages.IMonarchLanguage>{\n\ttokenPostfix: '.julia',\n\n\tkeywords: [\n\t\t'begin',\n\t\t'while',\n\t\t'if',\n\t\t'for',\n\t\t'try',\n\t\t'return',\n\t\t'break',\n\t\t'continue',\n\t\t'function',\n\t\t'macro',\n\t\t'quote',\n\t\t'let',\n\t\t'local',\n\t\t'global',\n\t\t'const',\n\t\t'do',\n\t\t'struct',\n\t\t'module',\n\t\t'baremodule',\n\t\t'using',\n\t\t'import',\n\t\t'export',\n\t\t'end',\n\t\t'else',\n\t\t'elseif',\n\t\t'catch',\n\t\t'finally',\n\t\t'mutable',\n\t\t'primitive',\n\t\t'abstract',\n\t\t'type',\n\t\t'in',\n\t\t'isa',\n\t\t'where',\n\t\t'new'\n\t],\n\n\ttypes: [\n\t\t'LinRange',\n\t\t'LineNumberNode',\n\t\t'LinearIndices',\n\t\t'LoadError',\n\t\t'MIME',\n\t\t'Matrix',\n\t\t'Method',\n\t\t'MethodError',\n\t\t'Missing',\n\t\t'MissingException',\n\t\t'Module',\n\t\t'NTuple',\n\t\t'NamedTuple',\n\t\t'Nothing',\n\t\t'Number',\n\t\t'OrdinalRange',\n\t\t'OutOfMemoryError',\n\t\t'OverflowError',\n\t\t'Pair',\n\t\t'PartialQuickSort',\n\t\t'PermutedDimsArray',\n\t\t'Pipe',\n\t\t'Ptr',\n\t\t'QuoteNode',\n\t\t'Rational',\n\t\t'RawFD',\n\t\t'ReadOnlyMemoryError',\n\t\t'Real',\n\t\t'ReentrantLock',\n\t\t'Ref',\n\t\t'Regex',\n\t\t'RegexMatch',\n\t\t'RoundingMode',\n\t\t'SegmentationFault',\n\t\t'Set',\n\t\t'Signed',\n\t\t'Some',\n\t\t'StackOverflowError',\n\t\t'StepRange',\n\t\t'StepRangeLen',\n\t\t'StridedArray',\n\t\t'StridedMatrix',\n\t\t'StridedVecOrMat',\n\t\t'StridedVector',\n\t\t'String',\n\t\t'StringIndexError',\n\t\t'SubArray',\n\t\t'SubString',\n\t\t'SubstitutionString',\n\t\t'Symbol',\n\t\t'SystemError',\n\t\t'Task',\n\t\t'Text',\n\t\t'TextDisplay',\n\t\t'Timer',\n\t\t'Tuple',\n\t\t'Type',\n\t\t'TypeError',\n\t\t'TypeVar',\n\t\t'UInt',\n\t\t'UInt128',\n\t\t'UInt16',\n\t\t'UInt32',\n\t\t'UInt64',\n\t\t'UInt8',\n\t\t'UndefInitializer',\n\t\t'AbstractArray',\n\t\t'UndefKeywordError',\n\t\t'AbstractChannel',\n\t\t'UndefRefError',\n\t\t'AbstractChar',\n\t\t'UndefVarError',\n\t\t'AbstractDict',\n\t\t'Union',\n\t\t'AbstractDisplay',\n\t\t'UnionAll',\n\t\t'AbstractFloat',\n\t\t'UnitRange',\n\t\t'AbstractIrrational',\n\t\t'Unsigned',\n\t\t'AbstractMatrix',\n\t\t'AbstractRange',\n\t\t'Val',\n\t\t'AbstractSet',\n\t\t'Vararg',\n\t\t'AbstractString',\n\t\t'VecElement',\n\t\t'AbstractUnitRange',\n\t\t'VecOrMat',\n\t\t'AbstractVecOrMat',\n\t\t'Vector',\n\t\t'AbstractVector',\n\t\t'VersionNumber',\n\t\t'Any',\n\t\t'WeakKeyDict',\n\t\t'ArgumentError',\n\t\t'WeakRef',\n\t\t'Array',\n\t\t'AssertionError',\n\t\t'BigFloat',\n\t\t'BigInt',\n\t\t'BitArray',\n\t\t'BitMatrix',\n\t\t'BitSet',\n\t\t'BitVector',\n\t\t'Bool',\n\t\t'BoundsError',\n\t\t'CapturedException',\n\t\t'CartesianIndex',\n\t\t'CartesianIndices',\n\t\t'Cchar',\n\t\t'Cdouble',\n\t\t'Cfloat',\n\t\t'Channel',\n\t\t'Char',\n\t\t'Cint',\n\t\t'Cintmax_t',\n\t\t'Clong',\n\t\t'Clonglong',\n\t\t'Cmd',\n\t\t'Colon',\n\t\t'Complex',\n\t\t'ComplexF16',\n\t\t'ComplexF32',\n\t\t'ComplexF64',\n\t\t'CompositeException',\n\t\t'Condition',\n\t\t'Cptrdiff_t',\n\t\t'Cshort',\n\t\t'Csize_t',\n\t\t'Cssize_t',\n\t\t'Cstring',\n\t\t'Cuchar',\n\t\t'Cuint',\n\t\t'Cuintmax_t',\n\t\t'Culong',\n\t\t'Culonglong',\n\t\t'Cushort',\n\t\t'Cvoid',\n\t\t'Cwchar_t',\n\t\t'Cwstring',\n\t\t'DataType',\n\t\t'DenseArray',\n\t\t'DenseMatrix',\n\t\t'DenseVecOrMat',\n\t\t'DenseVector',\n\t\t'Dict',\n\t\t'DimensionMismatch',\n\t\t'Dims',\n\t\t'DivideError',\n\t\t'DomainError',\n\t\t'EOFError',\n\t\t'Enum',\n\t\t'ErrorException',\n\t\t'Exception',\n\t\t'ExponentialBackOff',\n\t\t'Expr',\n\t\t'Float16',\n\t\t'Float32',\n\t\t'Float64',\n\t\t'Function',\n\t\t'GlobalRef',\n\t\t'HTML',\n\t\t'IO',\n\t\t'IOBuffer',\n\t\t'IOContext',\n\t\t'IOStream',\n\t\t'IdDict',\n\t\t'IndexCartesian',\n\t\t'IndexLinear',\n\t\t'IndexStyle',\n\t\t'InexactError',\n\t\t'InitError',\n\t\t'Int',\n\t\t'Int128',\n\t\t'Int16',\n\t\t'Int32',\n\t\t'Int64',\n\t\t'Int8',\n\t\t'Integer',\n\t\t'InterruptException',\n\t\t'InvalidStateException',\n\t\t'Irrational',\n\t\t'KeyError'\n\t],\n\n\tkeywordops: ['<:', '>:', ':', '=>', '...', '.', '->', '?'],\n\n\tallops: /[^\\w\\d\\s()\\[\\]{}\"'#]+/,\n\n\tconstants: [\n\t\t'true',\n\t\t'false',\n\t\t'nothing',\n\t\t'missing',\n\t\t'undef',\n\t\t'Inf',\n\t\t'pi',\n\t\t'NaN',\n\t\t'π',\n\t\t'ℯ',\n\t\t'ans',\n\t\t'PROGRAM_FILE',\n\t\t'ARGS',\n\t\t'C_NULL',\n\t\t'VERSION',\n\t\t'DEPOT_PATH',\n\t\t'LOAD_PATH'\n\t],\n\n\toperators: [\n\t\t'!',\n\t\t'!=',\n\t\t'!==',\n\t\t'%',\n\t\t'&',\n\t\t'*',\n\t\t'+',\n\t\t'-',\n\t\t'/',\n\t\t'//',\n\t\t'<',\n\t\t'<<',\n\t\t'<=',\n\t\t'==',\n\t\t'===',\n\t\t'=>',\n\t\t'>',\n\t\t'>=',\n\t\t'>>',\n\t\t'>>>',\n\t\t'\\\\',\n\t\t'^',\n\t\t'|',\n\t\t'|>',\n\t\t'~',\n\t\t'÷',\n\t\t'∈',\n\t\t'∉',\n\t\t'∋',\n\t\t'∌',\n\t\t'∘',\n\t\t'√',\n\t\t'∛',\n\t\t'∩',\n\t\t'∪',\n\t\t'≈',\n\t\t'≉',\n\t\t'≠',\n\t\t'≡',\n\t\t'≢',\n\t\t'≤',\n\t\t'≥',\n\t\t'⊆',\n\t\t'⊇',\n\t\t'⊈',\n\t\t'⊉',\n\t\t'⊊',\n\t\t'⊋',\n\t\t'⊻'\n\t],\n\n\tbrackets: [\n\t\t{ open: '(', close: ')', token: 'delimiter.parenthesis' },\n\t\t{ open: '{', close: '}', token: 'delimiter.curly' },\n\t\t{ open: '[', close: ']', token: 'delimiter.square' }\n\t],\n\n\tident: /π|ℯ|\\b(?!\\d)\\w+\\b/,\n\n\t// escape sequences\n\tescape: /(?:[abefnrstv\\\\\"'\\n\\r]|[0-7]{1,3}|x[0-9A-Fa-f]{1,2}|u[0-9A-Fa-f]{4})/,\n\tescapes: /\\\\(?:C\\-(@escape|.)|c(@escape|.)|@escape)/,\n\n\t// The main tokenizer for our languages\n\ttokenizer: {\n\t\troot: [\n\t\t\t[/(::)\\s*|\\b(isa)\\s+/, 'keyword', '@typeanno'],\n\t\t\t[/\\b(isa)(\\s*\\(@ident\\s*,\\s*)/, ['keyword', { token: '', next: '@typeanno' }]],\n\t\t\t[/\\b(type|struct)[ \\t]+/, 'keyword', '@typeanno'],\n\n\t\t\t// symbols\n\t\t\t[/^\\s*:@ident[!?]?/, 'metatag'],\n\t\t\t[/(return)(\\s*:@ident[!?]?)/, ['keyword', 'metatag']],\n\t\t\t[/(\\(|\\[|\\{|@allops)(\\s*:@ident[!?]?)/, ['', 'metatag']],\n\t\t\t[/:\\(/, 'metatag', '@quote'],\n\n\t\t\t// regular expressions\n\t\t\t[/r\"\"\"/, 'regexp.delim', '@tregexp'],\n\t\t\t[/r\"/, 'regexp.delim', '@sregexp'],\n\n\t\t\t// strings\n\t\t\t[/raw\"\"\"/, 'string.delim', '@rtstring'],\n\t\t\t[/[bv]?\"\"\"/, 'string.delim', '@dtstring'],\n\n\t\t\t[/raw\"/, 'string.delim', '@rsstring'],\n\t\t\t[/[bv]?\"/, 'string.delim', '@dsstring'],\n\n\t\t\t[\n\t\t\t\t/(@ident)\\{/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'$1@types': { token: 'type', next: '@gen' },\n\t\t\t\t\t\t'@default': { token: 'type', next: '@gen' }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t[\n\t\t\t\t/@ident[!?'']?(?=\\.?\\()/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@types': 'type',\n\t\t\t\t\t\t'@keywords': 'keyword',\n\t\t\t\t\t\t'@constants': 'variable',\n\t\t\t\t\t\t'@default': 'keyword.flow'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t[\n\t\t\t\t/@ident[!?']?/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@types': 'type',\n\t\t\t\t\t\t'@keywords': 'keyword',\n\t\t\t\t\t\t'@constants': 'variable',\n\t\t\t\t\t\t'@default': 'identifier'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t[/\\$\\w+/, 'key'],\n\t\t\t[/\\$\\(/, 'key', '@paste'],\n\n\t\t\t[/@@@ident/, 'annotation'],\n\n\t\t\t// whitespace\n\t\t\t{ include: '@whitespace' },\n\n\t\t\t// characters\n\t\t\t[/'(?:@escapes|.)'/, 'string.character'],\n\n\t\t\t// delimiters and operators\n\t\t\t[/[()\\[\\]{}]/, '@brackets'],\n\t\t\t[\n\t\t\t\t/@allops/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@keywordops': 'keyword',\n\t\t\t\t\t\t'@operators': 'operator'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/[;,]/, 'delimiter'],\n\n\t\t\t// numbers\n\t\t\t[/0[xX][0-9a-fA-F](_?[0-9a-fA-F])*/, 'number.hex'],\n\t\t\t[/0[_oO][0-7](_?[0-7])*/, 'number.octal'],\n\t\t\t[/0[bB][01](_?[01])*/, 'number.binary'],\n\t\t\t[/[+\\-]?\\d+(\\.\\d+)?(im?|[eE][+\\-]?\\d+(\\.\\d+)?)?/, 'number']\n\t\t],\n\n\t\t// type\n\t\ttypeanno: [\n\t\t\t[/[a-zA-Z_]\\w*(?:\\.[a-zA-Z_]\\w*)*\\{/, 'type', '@gen'],\n\t\t\t[/([a-zA-Z_]\\w*(?:\\.[a-zA-Z_]\\w*)*)(\\s*<:\\s*)/, ['type', 'keyword']],\n\t\t\t[/[a-zA-Z_]\\w*(?:\\.[a-zA-Z_]\\w*)*/, 'type', '@pop'],\n\t\t\t['', '', '@pop']\n\t\t],\n\n\t\t// generic type\n\t\tgen: [\n\t\t\t[/[a-zA-Z_]\\w*(?:\\.[a-zA-Z_]\\w*)*\\{/, 'type', '@push'],\n\t\t\t[/[a-zA-Z_]\\w*(?:\\.[a-zA-Z_]\\w*)*/, 'type'],\n\t\t\t[/<:/, 'keyword'],\n\t\t\t[/(\\})(\\s*<:\\s*)/, ['type', { token: 'keyword', next: '@pop' }]],\n\t\t\t[/\\}/, 'type', '@pop'],\n\t\t\t{ include: '@root' }\n\t\t],\n\n\t\t// $(...)\n\t\tquote: [\n\t\t\t[/\\$\\(/, 'key', '@paste'],\n\t\t\t[/\\(/, '@brackets', '@paren'],\n\t\t\t[/\\)/, 'metatag', '@pop'],\n\t\t\t{ include: '@root' }\n\t\t],\n\n\t\t// :(...)\n\t\tpaste: [\n\t\t\t[/:\\(/, 'metatag', '@quote'],\n\t\t\t[/\\(/, '@brackets', '@paren'],\n\t\t\t[/\\)/, 'key', '@pop'],\n\t\t\t{ include: '@root' }\n\t\t],\n\n\t\t// (...)\n\t\tparen: [\n\t\t\t[/\\$\\(/, 'key', '@paste'],\n\t\t\t[/:\\(/, 'metatag', '@quote'],\n\t\t\t[/\\(/, '@brackets', '@push'],\n\t\t\t[/\\)/, '@brackets', '@pop'],\n\t\t\t{ include: '@root' }\n\t\t],\n\n\t\t// r\"egex string\"\n\t\tsregexp: [\n\t\t\t[/^.*/, 'invalid'],\n\t\t\t[/[^\\\\\"()\\[\\]{}]/, 'regexp'],\n\t\t\t[/[()\\[\\]{}]/, '@brackets'],\n\t\t\t[/\\\\./, 'operator.scss'],\n\t\t\t[/\"[imsx]*/, 'regexp.delim', '@pop']\n\t\t],\n\t\ttregexp: [\n\t\t\t[/[^\\\\\"()\\[\\]{}]/, 'regexp'],\n\t\t\t[/[()\\[\\]{}]/, '@brackets'],\n\t\t\t[/\\\\./, 'operator.scss'],\n\t\t\t[/\"(?!\"\")/, 'string'],\n\t\t\t[/\"\"\"[imsx]*/, 'regexp.delim', '@pop']\n\t\t],\n\n\t\t// raw\"string\"\n\t\trsstring: [\n\t\t\t[/^.*/, 'invalid'],\n\t\t\t[/[^\\\\\"]/, 'string'],\n\t\t\t[/\\\\./, 'string.escape'],\n\t\t\t[/\"/, 'string.delim', '@pop']\n\t\t],\n\t\trtstring: [\n\t\t\t[/[^\\\\\"]/, 'string'],\n\t\t\t[/\\\\./, 'string.escape'],\n\t\t\t[/\"(?!\"\")/, 'string'],\n\t\t\t[/\"\"\"/, 'string.delim', '@pop']\n\t\t],\n\n\t\t// \"string\".\n\t\tdsstring: [\n\t\t\t[/^.*/, 'invalid'],\n\t\t\t[/[^\\\\\"\\$]/, 'string'],\n\t\t\t[/\\$/, '', '@interpolated'],\n\t\t\t[/@escapes/, 'string.escape'],\n\t\t\t[/\\\\./, 'string.escape.invalid'],\n\t\t\t[/\"/, 'string.delim', '@pop']\n\t\t],\n\t\tdtstring: [\n\t\t\t[/[^\\\\\"\\$]/, 'string'],\n\t\t\t[/\\$/, '', '@interpolated'],\n\t\t\t[/@escapes/, 'string.escape'],\n\t\t\t[/\\\\./, 'string.escape.invalid'],\n\t\t\t[/\"(?!\"\")/, 'string'],\n\t\t\t[/\"\"\"/, 'string.delim', '@pop']\n\t\t],\n\n\t\t// interpolated sequence\n\t\tinterpolated: [\n\t\t\t[/\\(/, { token: '', switchTo: '@interpolated_compound' }],\n\t\t\t[/[a-zA-Z_]\\w*/, 'identifier'],\n\t\t\t['', '', '@pop'] // just a $ is interpreted as a $\n\t\t],\n\n\t\t// any code\n\t\tinterpolated_compound: [[/\\)/, '', '@pop'], { include: '@root' }],\n\n\t\t// whitespace & comments\n\t\twhitespace: [\n\t\t\t[/[ \\t\\r\\n]+/, ''],\n\t\t\t[/#=/, 'comment', '@multi_comment'],\n\t\t\t[/#.*$/, 'comment']\n\t\t],\n\n\t\tmulti_comment: [\n\t\t\t[/#=/, 'comment', '@push'],\n\t\t\t[/=#/, 'comment', '@pop'],\n\t\t\t[/=(?!#)|#(?!=)/, 'comment'],\n\t\t\t[/[^#=]+/, 'comment']\n\t\t]\n\t}\n}",
  "kotlin": "<languages.IMonarchLanguage>{\n\tdefaultToken: '',\n\ttokenPostfix: '.kt',\n\n\tkeywords: [\n\t\t'as',\n\t\t'as?',\n\t\t'break',\n\t\t'class',\n\t\t'continue',\n\t\t'do',\n\t\t'else',\n\t\t'false',\n\t\t'for',\n\t\t'fun',\n\t\t'if',\n\t\t'in',\n\t\t'!in',\n\t\t'interface',\n\t\t'is',\n\t\t'!is',\n\t\t'null',\n\t\t'object',\n\t\t'package',\n\t\t'return',\n\t\t'super',\n\t\t'this',\n\t\t'throw',\n\t\t'true',\n\t\t'try',\n\t\t'typealias',\n\t\t'val',\n\t\t'var',\n\t\t'when',\n\t\t'while',\n\t\t'by',\n\t\t'catch',\n\t\t'constructor',\n\t\t'delegate',\n\t\t'dynamic',\n\t\t'field',\n\t\t'file',\n\t\t'finally',\n\t\t'get',\n\t\t'import',\n\t\t'init',\n\t\t'param',\n\t\t'property',\n\t\t'receiver',\n\t\t'set',\n\t\t'setparam',\n\t\t'where',\n\t\t'actual',\n\t\t'abstract',\n\t\t'annotation',\n\t\t'companion',\n\t\t'const',\n\t\t'crossinline',\n\t\t'data',\n\t\t'enum',\n\t\t'expect',\n\t\t'external',\n\t\t'final',\n\t\t'infix',\n\t\t'inline',\n\t\t'inner',\n\t\t'internal',\n\t\t'lateinit',\n\t\t'noinline',\n\t\t'open',\n\t\t'operator',\n\t\t'out',\n\t\t'override',\n\t\t'private',\n\t\t'protected',\n\t\t'public',\n\t\t'reified',\n\t\t'sealed',\n\t\t'suspend',\n\t\t'tailrec',\n\t\t'vararg',\n\t\t'field',\n\t\t'it'\n\t],\n\n\toperators: [\n\t\t'+',\n\t\t'-',\n\t\t'*',\n\t\t'/',\n\t\t'%',\n\t\t'=',\n\t\t'+=',\n\t\t'-=',\n\t\t'*=',\n\t\t'/=',\n\t\t'%=',\n\t\t'++',\n\t\t'--',\n\t\t'&&',\n\t\t'||',\n\t\t'!',\n\t\t'==',\n\t\t'!=',\n\t\t'===',\n\t\t'!==',\n\t\t'>',\n\t\t'<',\n\t\t'<=',\n\t\t'>=',\n\t\t'[',\n\t\t']',\n\t\t'!!',\n\t\t'?.',\n\t\t'?:',\n\t\t'::',\n\t\t'..',\n\t\t':',\n\t\t'?',\n\t\t'->',\n\t\t'@',\n\t\t';',\n\t\t'$',\n\t\t'_'\n\t],\n\n\t// we include these common regular expressions\n\tsymbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n\tescapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n\tdigits: /\\d+(_+\\d+)*/,\n\toctaldigits: /[0-7]+(_+[0-7]+)*/,\n\tbinarydigits: /[0-1]+(_+[0-1]+)*/,\n\thexdigits: /[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,\n\n\t// The main tokenizer for our languages\n\ttokenizer: {\n\t\troot: [\n\t\t\t// class name highlighting\n\t\t\t[/[A-Z][\\w\\$]*/, 'type.identifier'],\n\n\t\t\t// identifiers and keywords\n\t\t\t[\n\t\t\t\t/[a-zA-Z_$][\\w$]*/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@keywords': { token: 'keyword.$0' },\n\t\t\t\t\t\t'@default': 'identifier'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t// whitespace\n\t\t\t{ include: '@whitespace' },\n\n\t\t\t// delimiters and operators\n\t\t\t[/[{}()\\[\\]]/, '@brackets'],\n\t\t\t[/[<>](?!@symbols)/, '@brackets'],\n\t\t\t[\n\t\t\t\t/@symbols/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@operators': 'delimiter',\n\t\t\t\t\t\t'@default': ''\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t// @ annotations.\n\t\t\t[/@\\s*[a-zA-Z_\\$][\\w\\$]*/, 'annotation'],\n\n\t\t\t// numbers\n\t\t\t[/(@digits)[eE]([\\-+]?(@digits))?[fFdD]?/, 'number.float'],\n\t\t\t[/(@digits)\\.(@digits)([eE][\\-+]?(@digits))?[fFdD]?/, 'number.float'],\n\t\t\t[/0[xX](@hexdigits)[Ll]?/, 'number.hex'],\n\t\t\t[/0(@octaldigits)[Ll]?/, 'number.octal'],\n\t\t\t[/0[bB](@binarydigits)[Ll]?/, 'number.binary'],\n\t\t\t[/(@digits)[fFdD]/, 'number.float'],\n\t\t\t[/(@digits)[lL]?/, 'number'],\n\n\t\t\t// delimiter: after number because of .\\d floats\n\t\t\t[/[;,.]/, 'delimiter'],\n\n\t\t\t// strings\n\t\t\t[/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'], // non-teminated string\n\t\t\t[/\"\"\"/, 'string', '@multistring'],\n\t\t\t[/\"/, 'string', '@string'],\n\n\t\t\t// characters\n\t\t\t[/'[^\\\\']'/, 'string'],\n\t\t\t[/(')(@escapes)(')/, ['string', 'string.escape', 'string']],\n\t\t\t[/'/, 'string.invalid']\n\t\t],\n\n\t\twhitespace: [\n\t\t\t[/[ \\t\\r\\n]+/, ''],\n\t\t\t[/\\/\\*\\*(?!\\/)/, 'comment.doc', '@javadoc'],\n\t\t\t[/\\/\\*/, 'comment', '@comment'],\n\t\t\t[/\\/\\/.*$/, 'comment']\n\t\t],\n\n\t\tcomment: [\n\t\t\t[/[^\\/*]+/, 'comment'],\n\t\t\t[/\\/\\*/, 'comment', '@comment'],\n\t\t\t[/\\*\\//, 'comment', '@pop'],\n\t\t\t[/[\\/*]/, 'comment']\n\t\t],\n\t\t//Identical copy of comment above, except for the addition of .doc\n\t\tjavadoc: [\n\t\t\t[/[^\\/*]+/, 'comment.doc'],\n\t\t\t[/\\/\\*/, 'comment.doc', '@push'],\n\t\t\t[/\\/\\*/, 'comment.doc.invalid'],\n\t\t\t[/\\*\\//, 'comment.doc', '@pop'],\n\t\t\t[/[\\/*]/, 'comment.doc']\n\t\t],\n\n\t\tstring: [\n\t\t\t[/[^\\\\\"]+/, 'string'],\n\t\t\t[/@escapes/, 'string.escape'],\n\t\t\t[/\\\\./, 'string.escape.invalid'],\n\t\t\t[/\"/, 'string', '@pop']\n\t\t],\n\n\t\tmultistring: [\n\t\t\t[/[^\\\\\"]+/, 'string'],\n\t\t\t[/@escapes/, 'string.escape'],\n\t\t\t[/\\\\./, 'string.escape.invalid'],\n\t\t\t[/\"\"\"/, 'string', '@pop'],\n\t\t\t[/./, 'string']\n\t\t]\n\t}\n}",
  "less": "<languages.IMonarchLanguage>{\n\tdefaultToken: '',\n\ttokenPostfix: '.less',\n\n\tidentifier:\n\t\t'-?-?([a-zA-Z]|(\\\\\\\\(([0-9a-fA-F]{1,6}\\\\s?)|[^[0-9a-fA-F])))([\\\\w\\\\-]|(\\\\\\\\(([0-9a-fA-F]{1,6}\\\\s?)|[^[0-9a-fA-F])))*',\n\tidentifierPlus:\n\t\t'-?-?([a-zA-Z:.]|(\\\\\\\\(([0-9a-fA-F]{1,6}\\\\s?)|[^[0-9a-fA-F])))([\\\\w\\\\-:.]|(\\\\\\\\(([0-9a-fA-F]{1,6}\\\\s?)|[^[0-9a-fA-F])))*',\n\n\tbrackets: [\n\t\t{ open: '{', close: '}', token: 'delimiter.curly' },\n\t\t{ open: '[', close: ']', token: 'delimiter.bracket' },\n\t\t{ open: '(', close: ')', token: 'delimiter.parenthesis' },\n\t\t{ open: '<', close: '>', token: 'delimiter.angle' }\n\t],\n\n\ttokenizer: {\n\t\troot: <any[]>[\n\t\t\t{ include: '@nestedJSBegin' },\n\n\t\t\t['[ \\\\t\\\\r\\\\n]+', ''],\n\n\t\t\t{ include: '@comments' },\n\t\t\t{ include: '@keyword' },\n\t\t\t{ include: '@strings' },\n\t\t\t{ include: '@numbers' },\n\t\t\t['[*_]?[a-zA-Z\\\\-\\\\s]+(?=:.*(;|(\\\\\\\\$)))', 'attribute.name', '@attribute'],\n\n\t\t\t['url(\\\\-prefix)?\\\\(', { token: 'tag', next: '@urldeclaration' }],\n\n\t\t\t['[{}()\\\\[\\\\]]', '@brackets'],\n\t\t\t['[,:;]', 'delimiter'],\n\n\t\t\t['#@identifierPlus', 'tag.id'],\n\t\t\t['&', 'tag'],\n\n\t\t\t['\\\\.@identifierPlus(?=\\\\()', 'tag.class', '@attribute'],\n\t\t\t['\\\\.@identifierPlus', 'tag.class'],\n\n\t\t\t['@identifierPlus', 'tag'],\n\t\t\t{ include: '@operators' },\n\n\t\t\t['@(@identifier(?=[:,\\\\)]))', 'variable', '@attribute'],\n\t\t\t['@(@identifier)', 'variable'],\n\t\t\t['@', 'key', '@atRules']\n\t\t],\n\n\t\tnestedJSBegin: [\n\t\t\t['``', 'delimiter.backtick'],\n\t\t\t[\n\t\t\t\t'`',\n\t\t\t\t{\n\t\t\t\t\ttoken: 'delimiter.backtick',\n\t\t\t\t\tnext: '@nestedJSEnd',\n\t\t\t\t\tnextEmbedded: 'text/javascript'\n\t\t\t\t}\n\t\t\t]\n\t\t],\n\n\t\tnestedJSEnd: [\n\t\t\t[\n\t\t\t\t'`',\n\t\t\t\t{\n\t\t\t\t\ttoken: 'delimiter.backtick',\n\t\t\t\t\tnext: '@pop',\n\t\t\t\t\tnextEmbedded: '@pop'\n\t\t\t\t}\n\t\t\t]\n\t\t],\n\n\t\toperators: [['[<>=\\\\+\\\\-\\\\*\\\\/\\\\^\\\\|\\\\~]', 'operator']],\n\n\t\tkeyword: [\n\t\t\t[\n\t\t\t\t'(@[\\\\s]*import|![\\\\s]*important|true|false|when|iscolor|isnumber|isstring|iskeyword|isurl|ispixel|ispercentage|isem|hue|saturation|lightness|alpha|lighten|darken|saturate|desaturate|fadein|fadeout|fade|spin|mix|round|ceil|floor|percentage)\\\\b',\n\t\t\t\t'keyword'\n\t\t\t]\n\t\t],\n\n\t\turldeclaration: [\n\t\t\t{ include: '@strings' },\n\t\t\t['[^)\\r\\n]+', 'string'],\n\t\t\t['\\\\)', { token: 'tag', next: '@pop' }]\n\t\t],\n\n\t\tattribute: <any[]>[\n\t\t\t{ include: '@nestedJSBegin' },\n\t\t\t{ include: '@comments' },\n\t\t\t{ include: '@strings' },\n\t\t\t{ include: '@numbers' },\n\n\t\t\t{ include: '@keyword' },\n\n\t\t\t['[a-zA-Z\\\\-]+(?=\\\\()', 'attribute.value', '@attribute'],\n\t\t\t['>', 'operator', '@pop'],\n\t\t\t['@identifier', 'attribute.value'],\n\t\t\t{ include: '@operators' },\n\t\t\t['@(@identifier)', 'variable'],\n\n\t\t\t['[)\\\\}]', '@brackets', '@pop'],\n\t\t\t['[{}()\\\\[\\\\]>]', '@brackets'],\n\n\t\t\t['[;]', 'delimiter', '@pop'],\n\t\t\t['[,=:]', 'delimiter'],\n\n\t\t\t['\\\\s', ''],\n\t\t\t['.', 'attribute.value']\n\t\t],\n\n\t\tcomments: [\n\t\t\t['\\\\/\\\\*', 'comment', '@comment'],\n\t\t\t['\\\\/\\\\/+.*', 'comment']\n\t\t],\n\n\t\tcomment: [\n\t\t\t['\\\\*\\\\/', 'comment', '@pop'],\n\t\t\t['.', 'comment']\n\t\t],\n\n\t\tnumbers: [\n\t\t\t['(\\\\d*\\\\.)?\\\\d+([eE][\\\\-+]?\\\\d+)?', { token: 'attribute.value.number', next: '@units' }],\n\t\t\t['#[0-9a-fA-F_]+(?!\\\\w)', 'attribute.value.hex']\n\t\t],\n\n\t\tunits: [\n\t\t\t[\n\t\t\t\t'(em|ex|ch|rem|fr|vmin|vmax|vw|vh|vm|cm|mm|in|px|pt|pc|deg|grad|rad|turn|s|ms|Hz|kHz|%)?',\n\t\t\t\t'attribute.value.unit',\n\t\t\t\t'@pop'\n\t\t\t]\n\t\t],\n\n\t\tstrings: [\n\t\t\t<any[]>['~?\"', { token: 'string.delimiter', next: '@stringsEndDoubleQuote' }],\n\t\t\t<any[]>[\"~?'\", { token: 'string.delimiter', next: '@stringsEndQuote' }]\n\t\t],\n\n\t\tstringsEndDoubleQuote: [\n\t\t\t['\\\\\\\\\"', 'string'],\n\t\t\t<any[]>['\"', { token: 'string.delimiter', next: '@popall' }],\n\t\t\t['.', 'string']\n\t\t],\n\n\t\tstringsEndQuote: [\n\t\t\t[\"\\\\\\\\'\", 'string'],\n\t\t\t<any[]>[\"'\", { token: 'string.delimiter', next: '@popall' }],\n\t\t\t['.', 'string']\n\t\t],\n\n\t\tatRules: <any[]>[\n\t\t\t{ include: '@comments' },\n\t\t\t{ include: '@strings' },\n\t\t\t['[()]', 'delimiter'],\n\t\t\t['[\\\\{;]', 'delimiter', '@pop'],\n\t\t\t['.', 'key']\n\t\t]\n\t}\n}",
  "lexon": "<languages.IMonarchLanguage>{\n\t// Set defaultToken to invalid to see what you do not tokenize yet\n\t// defaultToken: 'invalid',\n\ttokenPostfix: '.lexon',\n\tignoreCase: true,\n\n\tkeywords: [\n\t\t'lexon',\n\t\t'lex',\n\t\t'clause',\n\t\t'terms',\n\t\t'contracts',\n\t\t'may',\n\t\t'pay',\n\t\t'pays',\n\t\t'appoints',\n\t\t'into',\n\t\t'to'\n\t],\n\n\ttypeKeywords: ['amount', 'person', 'key', 'time', 'date', 'asset', 'text'],\n\n\toperators: [\n\t\t'less',\n\t\t'greater',\n\t\t'equal',\n\t\t'le',\n\t\t'gt',\n\t\t'or',\n\t\t'and',\n\t\t'add',\n\t\t'added',\n\t\t'subtract',\n\t\t'subtracted',\n\t\t'multiply',\n\t\t'multiplied',\n\t\t'times',\n\t\t'divide',\n\t\t'divided',\n\t\t'is',\n\t\t'be',\n\t\t'certified'\n\t],\n\n\t// we include these common regular expressions\n\tsymbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n\n\t// The main tokenizer for our languages\n\ttokenizer: {\n\t\troot: [\n\t\t\t// comment\n\t\t\t[/^(\\s*)(comment:?(?:\\s.*|))$/, ['', 'comment']],\n\n\t\t\t// special identifier cases\n\t\t\t[\n\t\t\t\t/\"/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'identifier.quote',\n\t\t\t\t\tbracket: '@open',\n\t\t\t\t\tnext: '@quoted_identifier'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[\n\t\t\t\t'LEX$',\n\t\t\t\t{\n\t\t\t\t\ttoken: 'keyword',\n\t\t\t\t\tbracket: '@open',\n\t\t\t\t\tnext: '@identifier_until_period'\n\t\t\t\t}\n\t\t\t],\n\t\t\t['LEXON', { token: 'keyword', bracket: '@open', next: '@semver' }],\n\t\t\t[\n\t\t\t\t':',\n\t\t\t\t{\n\t\t\t\t\ttoken: 'delimiter',\n\t\t\t\t\tbracket: '@open',\n\t\t\t\t\tnext: '@identifier_until_period'\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t// identifiers and keywords\n\t\t\t[\n\t\t\t\t/[a-z_$][\\w$]*/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@operators': 'operator',\n\t\t\t\t\t\t'@typeKeywords': 'keyword.type',\n\t\t\t\t\t\t'@keywords': 'keyword',\n\t\t\t\t\t\t'@default': 'identifier'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t// whitespace\n\t\t\t{ include: '@whitespace' },\n\n\t\t\t// delimiters and operators\n\t\t\t[/[{}()\\[\\]]/, '@brackets'],\n\t\t\t[/[<>](?!@symbols)/, '@brackets'],\n\t\t\t[/@symbols/, 'delimiter'],\n\n\t\t\t// numbers\n\t\t\t[/\\d*\\.\\d*\\.\\d*/, 'number.semver'],\n\t\t\t[/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\n\t\t\t[/0[xX][0-9a-fA-F]+/, 'number.hex'],\n\t\t\t[/\\d+/, 'number'],\n\n\t\t\t// delimiter: after number because of .\\d floats\n\t\t\t[/[;,.]/, 'delimiter']\n\t\t],\n\n\t\tquoted_identifier: [\n\t\t\t[/[^\\\\\"]+/, 'identifier'],\n\t\t\t[/\"/, { token: 'identifier.quote', bracket: '@close', next: '@pop' }]\n\t\t],\n\n\t\tspace_identifier_until_period: [\n\t\t\t[':', 'delimiter'],\n\t\t\t[' ', { token: 'white', next: '@identifier_rest' }]\n\t\t],\n\n\t\tidentifier_until_period: [\n\t\t\t{ include: '@whitespace' },\n\t\t\t[':', { token: 'delimiter', next: '@identifier_rest' }],\n\t\t\t[/[^\\\\.]+/, 'identifier'],\n\t\t\t[/\\./, { token: 'delimiter', bracket: '@close', next: '@pop' }]\n\t\t],\n\n\t\tidentifier_rest: [\n\t\t\t[/[^\\\\.]+/, 'identifier'],\n\t\t\t[/\\./, { token: 'delimiter', bracket: '@close', next: '@pop' }]\n\t\t],\n\n\t\tsemver: [\n\t\t\t{ include: '@whitespace' },\n\t\t\t[':', 'delimiter'],\n\t\t\t[/\\d*\\.\\d*\\.\\d*/, { token: 'number.semver', bracket: '@close', next: '@pop' }]\n\t\t],\n\n\t\twhitespace: [[/[ \\t\\r\\n]+/, 'white']]\n\t}\n}",
  "liquid": "<languages.IMonarchLanguage>{\n\tdefaultToken: '',\n\ttokenPostfix: '',\n\n\tbuiltinTags: [\n\t\t'if',\n\t\t'else',\n\t\t'elseif',\n\t\t'endif',\n\t\t'render',\n\t\t'assign',\n\t\t'capture',\n\t\t'endcapture',\n\t\t'case',\n\t\t'endcase',\n\t\t'comment',\n\t\t'endcomment',\n\t\t'cycle',\n\t\t'decrement',\n\t\t'for',\n\t\t'endfor',\n\t\t'include',\n\t\t'increment',\n\t\t'layout',\n\t\t'raw',\n\t\t'endraw',\n\t\t'render',\n\t\t'tablerow',\n\t\t'endtablerow',\n\t\t'unless',\n\t\t'endunless'\n\t],\n\n\tbuiltinFilters: [\n\t\t'abs',\n\t\t'append',\n\t\t'at_least',\n\t\t'at_most',\n\t\t'capitalize',\n\t\t'ceil',\n\t\t'compact',\n\t\t'date',\n\t\t'default',\n\t\t'divided_by',\n\t\t'downcase',\n\t\t'escape',\n\t\t'escape_once',\n\t\t'first',\n\t\t'floor',\n\t\t'join',\n\t\t'json',\n\t\t'last',\n\t\t'lstrip',\n\t\t'map',\n\t\t'minus',\n\t\t'modulo',\n\t\t'newline_to_br',\n\t\t'plus',\n\t\t'prepend',\n\t\t'remove',\n\t\t'remove_first',\n\t\t'replace',\n\t\t'replace_first',\n\t\t'reverse',\n\t\t'round',\n\t\t'rstrip',\n\t\t'size',\n\t\t'slice',\n\t\t'sort',\n\t\t'sort_natural',\n\t\t'split',\n\t\t'strip',\n\t\t'strip_html',\n\t\t'strip_newlines',\n\t\t'times',\n\t\t'truncate',\n\t\t'truncatewords',\n\t\t'uniq',\n\t\t'upcase',\n\t\t'url_decode',\n\t\t'url_encode',\n\t\t'where'\n\t],\n\n\tconstants: ['true', 'false'],\n\toperators: ['==', '!=', '>', '<', '>=', '<='],\n\n\tsymbol: /[=><!]+/,\n\tidentifier: /[a-zA-Z_][\\w]*/,\n\n\ttokenizer: {\n\t\troot: [\n\t\t\t[/\\{\\%\\s*comment\\s*\\%\\}/, 'comment.start.liquid', '@comment'],\n\t\t\t[/\\{\\{/, { token: '@rematch', switchTo: '@liquidState.root' }],\n\t\t\t[/\\{\\%/, { token: '@rematch', switchTo: '@liquidState.root' }],\n\t\t\t[/(<)([\\w\\-]+)(\\/>)/, ['delimiter.html', 'tag.html', 'delimiter.html']],\n\t\t\t[/(<)([:\\w]+)/, ['delimiter.html', { token: 'tag.html', next: '@otherTag' }]],\n\t\t\t[/(<\\/)([\\w\\-]+)/, ['delimiter.html', { token: 'tag.html', next: '@otherTag' }]],\n\t\t\t[/</, 'delimiter.html'],\n\t\t\t[/\\{/, 'delimiter.html'],\n\t\t\t[/[^<{]+/] // text\n\t\t],\n\n\t\tcomment: [\n\t\t\t[/\\{\\%\\s*endcomment\\s*\\%\\}/, 'comment.end.liquid', '@pop'],\n\t\t\t[/./, 'comment.content.liquid']\n\t\t],\n\n\t\totherTag: [\n\t\t\t[\n\t\t\t\t/\\{\\{/,\n\t\t\t\t{\n\t\t\t\t\ttoken: '@rematch',\n\t\t\t\t\tswitchTo: '@liquidState.otherTag'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[\n\t\t\t\t/\\{\\%/,\n\t\t\t\t{\n\t\t\t\t\ttoken: '@rematch',\n\t\t\t\t\tswitchTo: '@liquidState.otherTag'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/\\/?>/, 'delimiter.html', '@pop'],\n\t\t\t[/\"([^\"]*)\"/, 'attribute.value'],\n\t\t\t[/'([^']*)'/, 'attribute.value'],\n\t\t\t[/[\\w\\-]+/, 'attribute.name'],\n\t\t\t[/=/, 'delimiter'],\n\t\t\t[/[ \\t\\r\\n]+/] // whitespace\n\t\t],\n\n\t\tliquidState: [\n\t\t\t[/\\{\\{/, 'delimiter.output.liquid'],\n\t\t\t[/\\}\\}/, { token: 'delimiter.output.liquid', switchTo: '@$S2.$S3' }],\n\t\t\t[/\\{\\%/, 'delimiter.tag.liquid'],\n\t\t\t[/raw\\s*\\%\\}/, 'delimiter.tag.liquid', '@liquidRaw'],\n\t\t\t[/\\%\\}/, { token: 'delimiter.tag.liquid', switchTo: '@$S2.$S3' }],\n\t\t\t{ include: 'liquidRoot' }\n\t\t],\n\n\t\tliquidRaw: [\n\t\t\t[/^(?!\\{\\%\\s*endraw\\s*\\%\\}).+/],\n\t\t\t[/\\{\\%/, 'delimiter.tag.liquid'],\n\t\t\t[/@identifier/],\n\t\t\t[/\\%\\}/, { token: 'delimiter.tag.liquid', next: '@root' }]\n\t\t],\n\n\t\tliquidRoot: [\n\t\t\t[/\\d+(\\.\\d+)?/, 'number.liquid'],\n\t\t\t[/\"[^\"]*\"/, 'string.liquid'],\n\t\t\t[/'[^']*'/, 'string.liquid'],\n\t\t\t[/\\s+/],\n\t\t\t[\n\t\t\t\t/@symbol/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@operators': 'operator.liquid',\n\t\t\t\t\t\t'@default': ''\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/\\./],\n\t\t\t[\n\t\t\t\t/@identifier/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@constants': 'keyword.liquid',\n\t\t\t\t\t\t'@builtinFilters': 'predefined.liquid',\n\t\t\t\t\t\t'@builtinTags': 'predefined.liquid',\n\t\t\t\t\t\t'@default': 'variable.liquid'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/[^}|%]/, 'variable.liquid']\n\t\t]\n\t}\n}",
  "lua": "<languages.IMonarchLanguage>{\n\tdefaultToken: '',\n\ttokenPostfix: '.lua',\n\n\tkeywords: [\n\t\t'and',\n\t\t'break',\n\t\t'do',\n\t\t'else',\n\t\t'elseif',\n\t\t'end',\n\t\t'false',\n\t\t'for',\n\t\t'function',\n\t\t'goto',\n\t\t'if',\n\t\t'in',\n\t\t'local',\n\t\t'nil',\n\t\t'not',\n\t\t'or',\n\t\t'repeat',\n\t\t'return',\n\t\t'then',\n\t\t'true',\n\t\t'until',\n\t\t'while'\n\t],\n\n\tbrackets: [\n\t\t{ token: 'delimiter.bracket', open: '{', close: '}' },\n\t\t{ token: 'delimiter.array', open: '[', close: ']' },\n\t\t{ token: 'delimiter.parenthesis', open: '(', close: ')' }\n\t],\n\n\toperators: [\n\t\t'+',\n\t\t'-',\n\t\t'*',\n\t\t'/',\n\t\t'%',\n\t\t'^',\n\t\t'#',\n\t\t'==',\n\t\t'~=',\n\t\t'<=',\n\t\t'>=',\n\t\t'<',\n\t\t'>',\n\t\t'=',\n\t\t';',\n\t\t':',\n\t\t',',\n\t\t'.',\n\t\t'..',\n\t\t'...'\n\t],\n\n\t// we include these common regular expressions\n\tsymbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n\tescapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n\n\t// The main tokenizer for our languages\n\ttokenizer: {\n\t\troot: [\n\t\t\t// identifiers and keywords\n\t\t\t[\n\t\t\t\t/[a-zA-Z_]\\w*/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@keywords': { token: 'keyword.$0' },\n\t\t\t\t\t\t'@default': 'identifier'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t// whitespace\n\t\t\t{ include: '@whitespace' },\n\n\t\t\t// keys\n\t\t\t[/(,)(\\s*)([a-zA-Z_]\\w*)(\\s*)(:)(?!:)/, ['delimiter', '', 'key', '', 'delimiter']],\n\t\t\t[/({)(\\s*)([a-zA-Z_]\\w*)(\\s*)(:)(?!:)/, ['@brackets', '', 'key', '', 'delimiter']],\n\n\t\t\t// delimiters and operators\n\t\t\t[/[{}()\\[\\]]/, '@brackets'],\n\t\t\t[\n\t\t\t\t/@symbols/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@operators': 'delimiter',\n\t\t\t\t\t\t'@default': ''\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t// numbers\n\t\t\t[/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\n\t\t\t[/0[xX][0-9a-fA-F_]*[0-9a-fA-F]/, 'number.hex'],\n\t\t\t[/\\d+?/, 'number'],\n\n\t\t\t// delimiter: after number because of .\\d floats\n\t\t\t[/[;,.]/, 'delimiter'],\n\n\t\t\t// strings: recover on non-terminated strings\n\t\t\t[/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'], // non-teminated string\n\t\t\t[/'([^'\\\\]|\\\\.)*$/, 'string.invalid'], // non-teminated string\n\t\t\t[/\"/, 'string', '@string.\"'],\n\t\t\t[/'/, 'string', \"@string.'\"]\n\t\t],\n\n\t\twhitespace: [\n\t\t\t[/[ \\t\\r\\n]+/, ''],\n\t\t\t[/--\\[([=]*)\\[/, 'comment', '@comment.$1'],\n\t\t\t[/--.*$/, 'comment']\n\t\t],\n\n\t\tcomment: [\n\t\t\t[/[^\\]]+/, 'comment'],\n\t\t\t[\n\t\t\t\t/\\]([=]*)\\]/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'$1==$S2': { token: 'comment', next: '@pop' },\n\t\t\t\t\t\t'@default': 'comment'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/./, 'comment']\n\t\t],\n\n\t\tstring: [\n\t\t\t[/[^\\\\\"']+/, 'string'],\n\t\t\t[/@escapes/, 'string.escape'],\n\t\t\t[/\\\\./, 'string.escape.invalid'],\n\t\t\t[\n\t\t\t\t/[\"']/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'$#==$S2': { token: 'string', next: '@pop' },\n\t\t\t\t\t\t'@default': 'string'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t]\n\t}\n}",
  "m3": "<languages.IMonarchLanguage>{\n\tdefaultToken: '',\n\ttokenPostfix: '.m3',\n\n\tbrackets: [\n\t\t{ token: 'delimiter.curly', open: '{', close: '}' },\n\t\t{ token: 'delimiter.parenthesis', open: '(', close: ')' },\n\t\t{ token: 'delimiter.square', open: '[', close: ']' }\n\t],\n\tkeywords: [\n\t\t'AND',\n\t\t'ANY',\n\t\t'ARRAY',\n\t\t'AS',\n\t\t'BEGIN',\n\t\t'BITS',\n\t\t'BRANDED',\n\t\t'BY',\n\t\t'CASE',\n\t\t'CONST',\n\t\t'DIV',\n\t\t'DO',\n\t\t'ELSE',\n\t\t'ELSIF',\n\t\t'END',\n\t\t'EVAL',\n\t\t'EXCEPT',\n\t\t'EXCEPTION',\n\t\t'EXIT',\n\t\t'EXPORTS',\n\t\t'FINALLY',\n\t\t'FOR',\n\t\t'FROM',\n\t\t'GENERIC',\n\t\t'IF',\n\t\t'IMPORT',\n\t\t'IN',\n\t\t'INTERFACE',\n\t\t'LOCK',\n\t\t'LOOP',\n\t\t'METHODS',\n\t\t'MOD',\n\t\t'MODULE',\n\t\t'NOT',\n\t\t'OBJECT',\n\t\t'OF',\n\t\t'OR',\n\t\t'OVERRIDES',\n\t\t'PROCEDURE',\n\t\t'RAISE',\n\t\t'RAISES',\n\t\t'READONLY',\n\t\t'RECORD',\n\t\t'REF',\n\t\t'REPEAT',\n\t\t'RETURN',\n\t\t'REVEAL',\n\t\t'SET',\n\t\t'THEN',\n\t\t'TO',\n\t\t'TRY',\n\t\t'TYPE',\n\t\t'TYPECASE',\n\t\t'UNSAFE',\n\t\t'UNTIL',\n\t\t'UNTRACED',\n\t\t'VALUE',\n\t\t'VAR',\n\t\t'WHILE',\n\t\t'WITH'\n\t],\n\treservedConstNames: [\n\t\t'ABS',\n\t\t'ADR',\n\t\t'ADRSIZE',\n\t\t'BITSIZE',\n\t\t'BYTESIZE',\n\t\t'CEILING',\n\t\t'DEC',\n\t\t'DISPOSE',\n\t\t'FALSE',\n\t\t'FIRST',\n\t\t'FLOAT',\n\t\t'FLOOR',\n\t\t'INC',\n\t\t'ISTYPE',\n\t\t'LAST',\n\t\t'LOOPHOLE',\n\t\t'MAX',\n\t\t'MIN',\n\t\t'NARROW',\n\t\t'NEW',\n\t\t'NIL',\n\t\t'NUMBER',\n\t\t'ORD',\n\t\t'ROUND',\n\t\t'SUBARRAY',\n\t\t'TRUE',\n\t\t'TRUNC',\n\t\t'TYPECODE',\n\t\t'VAL'\n\t],\n\treservedTypeNames: [\n\t\t'ADDRESS',\n\t\t'ANY',\n\t\t'BOOLEAN',\n\t\t'CARDINAL',\n\t\t'CHAR',\n\t\t'EXTENDED',\n\t\t'INTEGER',\n\t\t'LONGCARD',\n\t\t'LONGINT',\n\t\t'LONGREAL',\n\t\t'MUTEX',\n\t\t'NULL',\n\t\t'REAL',\n\t\t'REFANY',\n\t\t'ROOT',\n\t\t'TEXT'\n\t],\n\toperators: ['+', '-', '*', '/', '&', '^', '.'],\n\trelations: ['=', '#', '<', '<=', '>', '>=', '<:', ':'],\n\tdelimiters: ['|', '..', '=>', ',', ';', ':='],\n\tsymbols: /[>=<#.,:;+\\-*/&^]+/,\n\tescapes: /\\\\(?:[\\\\fnrt\"']|[0-7]{3})/,\n\n\ttokenizer: {\n\t\troot: [\n\t\t\t// Identifiers and keywords\n\t\t\t[/_\\w*/, 'invalid'],\n\t\t\t[\n\t\t\t\t/[a-zA-Z][a-zA-Z0-9_]*/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@keywords': { token: 'keyword.$0' },\n\t\t\t\t\t\t'@reservedConstNames': { token: 'constant.reserved.$0' },\n\t\t\t\t\t\t'@reservedTypeNames': { token: 'type.reserved.$0' },\n\t\t\t\t\t\t'@default': 'identifier'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t// Whitespace\n\t\t\t{ include: '@whitespace' },\n\t\t\t[/[{}()\\[\\]]/, '@brackets'],\n\n\t\t\t// Integer- and real literals\n\t\t\t[/[0-9]+\\.[0-9]+(?:[DdEeXx][\\+\\-]?[0-9]+)?/, 'number.float'],\n\t\t\t[/[0-9]+(?:\\_[0-9a-fA-F]+)?L?/, 'number'],\n\n\t\t\t// Operators, relations, and delimiters\n\t\t\t[\n\t\t\t\t/@symbols/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@operators': 'operators',\n\t\t\t\t\t\t'@relations': 'operators',\n\t\t\t\t\t\t'@delimiters': 'delimiter',\n\t\t\t\t\t\t'@default': 'invalid'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t// Character literals\n\t\t\t[/'[^\\\\']'/, 'string.char'],\n\t\t\t[/(')(@escapes)(')/, ['string.char', 'string.escape', 'string.char']],\n\t\t\t[/'/, 'invalid'],\n\n\t\t\t// Text literals\n\t\t\t[/\"([^\"\\\\]|\\\\.)*$/, 'invalid'],\n\t\t\t[/\"/, 'string.text', '@text']\n\t\t],\n\n\t\ttext: [\n\t\t\t[/[^\\\\\"]+/, 'string.text'],\n\t\t\t[/@escapes/, 'string.escape'],\n\t\t\t[/\\\\./, 'invalid'],\n\t\t\t[/\"/, 'string.text', '@pop']\n\t\t],\n\n\t\tcomment: [\n\t\t\t[/\\(\\*/, 'comment', '@push'],\n\t\t\t[/\\*\\)/, 'comment', '@pop'],\n\t\t\t[/./, 'comment']\n\t\t],\n\n\t\tpragma: [\n\t\t\t[/<\\*/, 'keyword.pragma', '@push'],\n\t\t\t[/\\*>/, 'keyword.pragma', '@pop'],\n\t\t\t[/./, 'keyword.pragma']\n\t\t],\n\n\t\twhitespace: [\n\t\t\t[/[ \\t\\r\\n]+/, 'white'],\n\t\t\t[/\\(\\*/, 'comment', '@comment'],\n\t\t\t[/<\\*/, 'keyword.pragma', '@pragma']\n\t\t]\n\t}\n}",
  "markdown": "<languages.IMonarchLanguage>{\n\tdefaultToken: '',\n\ttokenPostfix: '.md',\n\n\t// escape codes\n\tcontrol: /[\\\\`*_\\[\\]{}()#+\\-\\.!]/,\n\tnoncontrol: /[^\\\\`*_\\[\\]{}()#+\\-\\.!]/,\n\tescapes: /\\\\(?:@control)/,\n\n\t// escape codes for javascript/CSS strings\n\tjsescapes: /\\\\(?:[btnfr\\\\\"']|[0-7][0-7]?|[0-3][0-7]{2})/,\n\n\t// non matched elements\n\tempty: [\n\t\t'area',\n\t\t'base',\n\t\t'basefont',\n\t\t'br',\n\t\t'col',\n\t\t'frame',\n\t\t'hr',\n\t\t'img',\n\t\t'input',\n\t\t'isindex',\n\t\t'link',\n\t\t'meta',\n\t\t'param'\n\t],\n\n\ttokenizer: {\n\t\troot: [\n\t\t\t// markdown tables\n\t\t\t[/^\\s*\\|/, '@rematch', '@table_header'],\n\n\t\t\t// headers (with #)\n\t\t\t[/^(\\s{0,3})(#+)((?:[^\\\\#]|@escapes)+)((?:#+)?)/, ['white', 'keyword', 'keyword', 'keyword']],\n\n\t\t\t// headers (with =)\n\t\t\t[/^\\s*(=+|\\-+)\\s*$/, 'keyword'],\n\n\t\t\t// headers (with ***)\n\t\t\t[/^\\s*((\\*[ ]?)+)\\s*$/, 'meta.separator'],\n\n\t\t\t// quote\n\t\t\t[/^\\s*>+/, 'comment'],\n\n\t\t\t// list (starting with * or number)\n\t\t\t[/^\\s*([\\*\\-+:]|\\d+\\.)\\s/, 'keyword'],\n\n\t\t\t// code block (4 spaces indent)\n\t\t\t[/^(\\t|[ ]{4})[^ ].*$/, 'string'],\n\n\t\t\t// code block (3 tilde)\n\t\t\t[/^\\s*~~~\\s*((?:\\w|[\\/\\-#])+)?\\s*$/, { token: 'string', next: '@codeblock' }],\n\n\t\t\t// github style code blocks (with backticks and language)\n\t\t\t[\n\t\t\t\t/^\\s*```\\s*((?:\\w|[\\/\\-#])+).*$/,\n\t\t\t\t{ token: 'string', next: '@codeblockgh', nextEmbedded: '$1' }\n\t\t\t],\n\n\t\t\t// github style code blocks (with backticks but no language)\n\t\t\t[/^\\s*```\\s*$/, { token: 'string', next: '@codeblock' }],\n\n\t\t\t// markup within lines\n\t\t\t{ include: '@linecontent' }\n\t\t],\n\n\t\ttable_header: [\n\t\t\t{ include: '@table_common' },\n\t\t\t[/[^\\|]+/, 'keyword.table.header'] // table header\n\t\t],\n\n\t\ttable_body: [{ include: '@table_common' }, { include: '@linecontent' }],\n\n\t\ttable_common: [\n\t\t\t[/\\s*[\\-:]+\\s*/, { token: 'keyword', switchTo: 'table_body' }], // header-divider\n\t\t\t[/^\\s*\\|/, 'keyword.table.left'], // opening |\n\t\t\t[/^\\s*[^\\|]/, '@rematch', '@pop'], // exiting\n\t\t\t[/^\\s*$/, '@rematch', '@pop'], // exiting\n\t\t\t[\n\t\t\t\t/\\|/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@eos': 'keyword.table.right', // closing |\n\t\t\t\t\t\t'@default': 'keyword.table.middle' // inner |\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t],\n\n\t\tcodeblock: [\n\t\t\t[/^\\s*~~~\\s*$/, { token: 'string', next: '@pop' }],\n\t\t\t[/^\\s*```\\s*$/, { token: 'string', next: '@pop' }],\n\t\t\t[/.*$/, 'variable.source']\n\t\t],\n\n\t\t// github style code blocks\n\t\tcodeblockgh: [\n\t\t\t[/```\\s*$/, { token: 'string', next: '@pop', nextEmbedded: '@pop' }],\n\t\t\t[/[^`]+/, 'variable.source']\n\t\t],\n\n\t\tlinecontent: [\n\t\t\t// escapes\n\t\t\t[/&\\w+;/, 'string.escape'],\n\t\t\t[/@escapes/, 'escape'],\n\n\t\t\t// various markup\n\t\t\t[/\\b__([^\\\\_]|@escapes|_(?!_))+__\\b/, 'strong'],\n\t\t\t[/\\*\\*([^\\\\*]|@escapes|\\*(?!\\*))+\\*\\*/, 'strong'],\n\t\t\t[/\\b_[^_]+_\\b/, 'emphasis'],\n\t\t\t[/\\*([^\\\\*]|@escapes)+\\*/, 'emphasis'],\n\t\t\t[/`([^\\\\`]|@escapes)+`/, 'variable'],\n\n\t\t\t// links\n\t\t\t[/\\{+[^}]+\\}+/, 'string.target'],\n\t\t\t[/(!?\\[)((?:[^\\]\\\\]|@escapes)*)(\\]\\([^\\)]+\\))/, ['string.link', '', 'string.link']],\n\t\t\t[/(!?\\[)((?:[^\\]\\\\]|@escapes)*)(\\])/, 'string.link'],\n\n\t\t\t// or html\n\t\t\t{ include: 'html' }\n\t\t],\n\n\t\t// Note: it is tempting to rather switch to the real HTML mode instead of building our own here\n\t\t// but currently there is a limitation in Monarch that prevents us from doing it: The opening\n\t\t// '<' would start the HTML mode, however there is no way to jump 1 character back to let the\n\t\t// HTML mode also tokenize the opening angle bracket. Thus, even though we could jump to HTML,\n\t\t// we cannot correctly tokenize it in that mode yet.\n\t\thtml: [\n\t\t\t// html tags\n\t\t\t[/<(\\w+)\\/>/, 'tag'],\n\t\t\t[\n\t\t\t\t/<(\\w+)(\\-|\\w)*/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@empty': { token: 'tag', next: '@tag.$1' },\n\t\t\t\t\t\t'@default': { token: 'tag', next: '@tag.$1' }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/<\\/(\\w+)(\\-|\\w)*\\s*>/, { token: 'tag' }],\n\n\t\t\t[/<!--/, 'comment', '@comment']\n\t\t],\n\n\t\tcomment: [\n\t\t\t[/[^<\\-]+/, 'comment.content'],\n\t\t\t[/-->/, 'comment', '@pop'],\n\t\t\t[/<!--/, 'comment.content.invalid'],\n\t\t\t[/[<\\-]/, 'comment.content']\n\t\t],\n\n\t\t// Almost full HTML tag matching, complete with embedded scripts & styles\n\t\ttag: [\n\t\t\t[/[ \\t\\r\\n]+/, 'white'],\n\t\t\t[\n\t\t\t\t/(type)(\\s*=\\s*)(\")([^\"]+)(\")/,\n\t\t\t\t[\n\t\t\t\t\t'attribute.name.html',\n\t\t\t\t\t'delimiter.html',\n\t\t\t\t\t'string.html',\n\t\t\t\t\t{ token: 'string.html', switchTo: '@tag.$S2.$4' },\n\t\t\t\t\t'string.html'\n\t\t\t\t]\n\t\t\t],\n\t\t\t[\n\t\t\t\t/(type)(\\s*=\\s*)(')([^']+)(')/,\n\t\t\t\t[\n\t\t\t\t\t'attribute.name.html',\n\t\t\t\t\t'delimiter.html',\n\t\t\t\t\t'string.html',\n\t\t\t\t\t{ token: 'string.html', switchTo: '@tag.$S2.$4' },\n\t\t\t\t\t'string.html'\n\t\t\t\t]\n\t\t\t],\n\t\t\t[/(\\w+)(\\s*=\\s*)(\"[^\"]*\"|'[^']*')/, ['attribute.name.html', 'delimiter.html', 'string.html']],\n\t\t\t[/\\w+/, 'attribute.name.html'],\n\t\t\t[/\\/>/, 'tag', '@pop'],\n\t\t\t[\n\t\t\t\t/>/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'$S2==style': {\n\t\t\t\t\t\t\ttoken: 'tag',\n\t\t\t\t\t\t\tswitchTo: 'embeddedStyle',\n\t\t\t\t\t\t\tnextEmbedded: 'text/css'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'$S2==script': {\n\t\t\t\t\t\t\tcases: {\n\t\t\t\t\t\t\t\t$S3: {\n\t\t\t\t\t\t\t\t\ttoken: 'tag',\n\t\t\t\t\t\t\t\t\tswitchTo: 'embeddedScript',\n\t\t\t\t\t\t\t\t\tnextEmbedded: '$S3'\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t'@default': {\n\t\t\t\t\t\t\t\t\ttoken: 'tag',\n\t\t\t\t\t\t\t\t\tswitchTo: 'embeddedScript',\n\t\t\t\t\t\t\t\t\tnextEmbedded: 'text/javascript'\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'@default': { token: 'tag', next: '@pop' }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t],\n\n\t\tembeddedStyle: [\n\t\t\t[/[^<]+/, ''],\n\t\t\t[/<\\/style\\s*>/, { token: '@rematch', next: '@pop', nextEmbedded: '@pop' }],\n\t\t\t[/</, '']\n\t\t],\n\n\t\tembeddedScript: [\n\t\t\t[/[^<]+/, ''],\n\t\t\t[/<\\/script\\s*>/, { token: '@rematch', next: '@pop', nextEmbedded: '@pop' }],\n\t\t\t[/</, '']\n\t\t]\n\t}\n}",
  "mdx": "<languages.IMonarchLanguage>{\n\tdefaultToken: '',\n\ttokenPostfix: '.mdx',\n\tcontrol: /[!#()*+.[\\\\\\]_`{}\\-]/,\n\tescapes: /\\\\@control/,\n\n\ttokenizer: {\n\t\troot: [\n\t\t\t[/^---$/, { token: 'meta.content', next: '@frontmatter', nextEmbedded: 'yaml' }],\n\t\t\t[/^\\s*import/, { token: 'keyword', next: '@import', nextEmbedded: 'js' }],\n\t\t\t[/^\\s*export/, { token: 'keyword', next: '@export', nextEmbedded: 'js' }],\n\t\t\t[/<\\w+/, { token: 'type.identifier', next: '@jsx' }],\n\t\t\t[/<\\/?\\w+>/, 'type.identifier'],\n\t\t\t[\n\t\t\t\t/^(\\s*)(>*\\s*)(#{1,6}\\s)/,\n\t\t\t\t[{ token: 'white' }, { token: 'comment' }, { token: 'keyword', next: '@header' }]\n\t\t\t],\n\t\t\t[/^(\\s*)(>*\\s*)([*+-])(\\s+)/, ['white', 'comment', 'keyword', 'white']],\n\t\t\t[/^(\\s*)(>*\\s*)(\\d{1,9}\\.)(\\s+)/, ['white', 'comment', 'number', 'white']],\n\t\t\t[/^(\\s*)(>*\\s*)(\\d{1,9}\\.)(\\s+)/, ['white', 'comment', 'number', 'white']],\n\t\t\t[/^(\\s*)(>*\\s*)(-{3,}|\\*{3,}|_{3,})$/, ['white', 'comment', 'keyword']],\n\t\t\t[/`{3,}(\\s.*)?$/, { token: 'string', next: '@codeblock_backtick' }],\n\t\t\t[/~{3,}(\\s.*)?$/, { token: 'string', next: '@codeblock_tilde' }],\n\t\t\t[\n\t\t\t\t/`{3,}(\\S+).*$/,\n\t\t\t\t{ token: 'string', next: '@codeblock_highlight_backtick', nextEmbedded: '$1' }\n\t\t\t],\n\t\t\t[\n\t\t\t\t/~{3,}(\\S+).*$/,\n\t\t\t\t{ token: 'string', next: '@codeblock_highlight_tilde', nextEmbedded: '$1' }\n\t\t\t],\n\t\t\t[/^(\\s*)(-{4,})$/, ['white', 'comment']],\n\t\t\t[/^(\\s*)(>+)/, ['white', 'comment']],\n\t\t\t{ include: 'content' }\n\t\t],\n\t\tcontent: [\n\t\t\t[\n\t\t\t\t/(\\[)(.+)(]\\()(.+)(\\s+\".*\")(\\))/,\n\t\t\t\t['', 'string.link', '', 'type.identifier', 'string.link', '']\n\t\t\t],\n\t\t\t[/(\\[)(.+)(]\\()(.+)(\\))/, ['', 'type.identifier', '', 'string.link', '']],\n\t\t\t[/(\\[)(.+)(]\\[)(.+)(])/, ['', 'type.identifier', '', 'type.identifier', '']],\n\t\t\t[/(\\[)(.+)(]:\\s+)(\\S*)/, ['', 'type.identifier', '', 'string.link']],\n\t\t\t[/(\\[)(.+)(])/, ['', 'type.identifier', '']],\n\t\t\t[/`.*`/, 'variable.source'],\n\t\t\t[/_/, { token: 'emphasis', next: '@emphasis_underscore' }],\n\t\t\t[/\\*(?!\\*)/, { token: 'emphasis', next: '@emphasis_asterisk' }],\n\t\t\t[/\\*\\*/, { token: 'strong', next: '@strong' }],\n\t\t\t[/{/, { token: 'delimiter.bracket', next: '@expression', nextEmbedded: 'js' }]\n\t\t],\n\t\timport: [[/'\\s*(;|$)/, { token: 'string', next: '@pop', nextEmbedded: '@pop' }]],\n\t\texpression: [\n\t\t\t[/{/, { token: 'delimiter.bracket', next: '@expression' }],\n\t\t\t[/}/, { token: 'delimiter.bracket', next: '@pop', nextEmbedded: '@pop' }]\n\t\t],\n\t\texport: [[/^\\s*$/, { token: 'delimiter.bracket', next: '@pop', nextEmbedded: '@pop' }]],\n\t\tjsx: [\n\t\t\t[/\\s+/, ''],\n\t\t\t[/(\\w+)(=)(\"(?:[^\"\\\\]|\\\\.)*\")/, ['attribute.name', 'operator', 'string']],\n\t\t\t[/(\\w+)(=)('(?:[^'\\\\]|\\\\.)*')/, ['attribute.name', 'operator', 'string']],\n\t\t\t[/(\\w+(?=\\s|>|={|$))/, ['attribute.name']],\n\t\t\t[/={/, { token: 'delimiter.bracket', next: '@expression', nextEmbedded: 'js' }],\n\t\t\t[/>/, { token: 'type.identifier', next: '@pop' }]\n\t\t],\n\t\theader: [\n\t\t\t[/.$/, { token: 'keyword', next: '@pop' }],\n\t\t\t{ include: 'content' },\n\t\t\t[/./, { token: 'keyword' }]\n\t\t],\n\t\tstrong: [\n\t\t\t[/\\*\\*/, { token: 'strong', next: '@pop' }],\n\t\t\t{ include: 'content' },\n\t\t\t[/./, { token: 'strong' }]\n\t\t],\n\t\temphasis_underscore: [\n\t\t\t[/_/, { token: 'emphasis', next: '@pop' }],\n\t\t\t{ include: 'content' },\n\t\t\t[/./, { token: 'emphasis' }]\n\t\t],\n\t\temphasis_asterisk: [\n\t\t\t[/\\*(?!\\*)/, { token: 'emphasis', next: '@pop' }],\n\t\t\t{ include: 'content' },\n\t\t\t[/./, { token: 'emphasis' }]\n\t\t],\n\t\tfrontmatter: [[/^---$/, { token: 'meta.content', nextEmbedded: '@pop', next: '@pop' }]],\n\t\tcodeblock_highlight_backtick: [\n\t\t\t[/\\s*`{3,}\\s*$/, { token: 'string', next: '@pop', nextEmbedded: '@pop' }],\n\t\t\t[/.*$/, 'variable.source']\n\t\t],\n\t\tcodeblock_highlight_tilde: [\n\t\t\t[/\\s*~{3,}\\s*$/, { token: 'string', next: '@pop', nextEmbedded: '@pop' }],\n\t\t\t[/.*$/, 'variable.source']\n\t\t],\n\t\tcodeblock_backtick: [\n\t\t\t[/\\s*`{3,}\\s*$/, { token: 'string', next: '@pop' }],\n\t\t\t[/.*$/, 'variable.source']\n\t\t],\n\t\tcodeblock_tilde: [\n\t\t\t[/\\s*~{3,}\\s*$/, { token: 'string', next: '@pop' }],\n\t\t\t[/.*$/, 'variable.source']\n\t\t]\n\t}\n}",
  "mips": "<languages.IMonarchLanguage>{\n\tdefaultToken: '',\n\tignoreCase: false,\n\ttokenPostfix: '.mips',\n\n\tregEx: /\\/(?!\\/\\/)(?:[^\\/\\\\]|\\\\.)*\\/[igm]*/,\n\n\tkeywords: [\n\t\t'.data',\n\t\t'.text',\n\t\t'syscall',\n\t\t'trap',\n\t\t'add',\n\t\t'addu',\n\t\t'addi',\n\t\t'addiu',\n\t\t'and',\n\t\t'andi',\n\t\t'div',\n\t\t'divu',\n\t\t'mult',\n\t\t'multu',\n\t\t'nor',\n\t\t'or',\n\t\t'ori',\n\t\t'sll',\n\t\t'slv',\n\t\t'sra',\n\t\t'srav',\n\t\t'srl',\n\t\t'srlv',\n\t\t'sub',\n\t\t'subu',\n\t\t'xor',\n\t\t'xori',\n\t\t'lhi',\n\t\t'lho',\n\t\t'lhi',\n\t\t'llo',\n\t\t'slt',\n\t\t'slti',\n\t\t'sltu',\n\t\t'sltiu',\n\t\t'beq',\n\t\t'bgtz',\n\t\t'blez',\n\t\t'bne',\n\t\t'j',\n\t\t'jal',\n\t\t'jalr',\n\t\t'jr',\n\t\t'lb',\n\t\t'lbu',\n\t\t'lh',\n\t\t'lhu',\n\t\t'lw',\n\t\t'li',\n\t\t'la',\n\t\t'sb',\n\t\t'sh',\n\t\t'sw',\n\t\t'mfhi',\n\t\t'mflo',\n\t\t'mthi',\n\t\t'mtlo',\n\t\t'move'\n\t],\n\n\t// we include these common regular expressions\n\tsymbols: /[\\.,\\:]+/,\n\tescapes: /\\\\(?:[abfnrtv\\\\\"'$]|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n\n\t// The main tokenizer for our languages\n\ttokenizer: {\n\t\troot: [\n\t\t\t// identifiers and keywords\n\t\t\t[/\\$[a-zA-Z_]\\w*/, 'variable.predefined'],\n\t\t\t[\n\t\t\t\t/[.a-zA-Z_]\\w*/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\tthis: 'variable.predefined',\n\t\t\t\t\t\t'@keywords': { token: 'keyword.$0' },\n\t\t\t\t\t\t'@default': ''\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t// whitespace\n\t\t\t[/[ \\t\\r\\n]+/, ''],\n\n\t\t\t// Comments\n\t\t\t[/#.*$/, 'comment'],\n\n\t\t\t// regular expressions\n\t\t\t['///', { token: 'regexp', next: '@hereregexp' }],\n\n\t\t\t[/^(\\s*)(@regEx)/, ['', 'regexp']],\n\t\t\t[/(\\,)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\n\t\t\t[/(\\:)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\n\n\t\t\t// delimiters\n\t\t\t[/@symbols/, 'delimiter'],\n\n\t\t\t// numbers\n\t\t\t[/\\d+[eE]([\\-+]?\\d+)?/, 'number.float'],\n\t\t\t[/\\d+\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\n\t\t\t[/0[xX][0-9a-fA-F]+/, 'number.hex'],\n\t\t\t[/0[0-7]+(?!\\d)/, 'number.octal'],\n\t\t\t[/\\d+/, 'number'],\n\n\t\t\t// delimiter: after number because of .\\d floats\n\t\t\t[/[,.]/, 'delimiter'],\n\n\t\t\t// strings:\n\t\t\t[/\"\"\"/, 'string', '@herestring.\"\"\"'],\n\t\t\t[/'''/, 'string', \"@herestring.'''\"],\n\t\t\t[\n\t\t\t\t/\"/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@eos': 'string',\n\t\t\t\t\t\t'@default': { token: 'string', next: '@string.\"' }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t[\n\t\t\t\t/'/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@eos': 'string',\n\t\t\t\t\t\t'@default': { token: 'string', next: \"@string.'\" }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t],\n\n\t\tstring: [\n\t\t\t[/[^\"'\\#\\\\]+/, 'string'],\n\t\t\t[/@escapes/, 'string.escape'],\n\t\t\t[/\\./, 'string.escape.invalid'],\n\t\t\t[/\\./, 'string.escape.invalid'],\n\n\t\t\t[\n\t\t\t\t/#{/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'$S2==\"': {\n\t\t\t\t\t\t\ttoken: 'string',\n\t\t\t\t\t\t\tnext: 'root.interpolatedstring'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'@default': 'string'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t[\n\t\t\t\t/[\"']/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'$#==$S2': { token: 'string', next: '@pop' },\n\t\t\t\t\t\t'@default': 'string'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/#/, 'string']\n\t\t],\n\n\t\therestring: [\n\t\t\t[\n\t\t\t\t/(\"\"\"|''')/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'$1==$S2': { token: 'string', next: '@pop' },\n\t\t\t\t\t\t'@default': 'string'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/[^#\\\\'\"]+/, 'string'],\n\t\t\t[/['\"]+/, 'string'],\n\t\t\t[/@escapes/, 'string.escape'],\n\t\t\t[/\\./, 'string.escape.invalid'],\n\n\t\t\t[/#{/, { token: 'string.quote', next: 'root.interpolatedstring' }],\n\t\t\t[/#/, 'string']\n\t\t],\n\n\t\tcomment: [\n\t\t\t[/[^#]+/, 'comment'],\n\t\t\t[/#/, 'comment']\n\t\t],\n\n\t\thereregexp: [\n\t\t\t[/[^\\\\\\/#]+/, 'regexp'],\n\t\t\t[/\\\\./, 'regexp'],\n\t\t\t[/#.*$/, 'comment'],\n\t\t\t['///[igm]*', { token: 'regexp', next: '@pop' }],\n\t\t\t[/\\//, 'regexp']\n\t\t]\n\t}\n}",
  "msdax": "<languages.IMonarchLanguage>{\n\tdefaultToken: '',\n\ttokenPostfix: '.msdax',\n\tignoreCase: true,\n\n\tbrackets: [\n\t\t{ open: '[', close: ']', token: 'delimiter.square' },\n\t\t{ open: '{', close: '}', token: 'delimiter.brackets' },\n\t\t{ open: '(', close: ')', token: 'delimiter.parenthesis' }\n\t],\n\n\tkeywords: [\n\t\t// Query keywords\n\t\t'VAR',\n\t\t'RETURN',\n\t\t'NOT',\n\t\t'EVALUATE',\n\t\t'DATATABLE',\n\t\t'ORDER',\n\t\t'BY',\n\t\t'START',\n\t\t'AT',\n\t\t'DEFINE',\n\t\t'MEASURE',\n\t\t'ASC',\n\t\t'DESC',\n\t\t'IN',\n\t\t// Datatable types\n\t\t'BOOLEAN',\n\t\t'DOUBLE',\n\t\t'INTEGER',\n\t\t'DATETIME',\n\t\t'CURRENCY',\n\t\t'STRING'\n\t],\n\tfunctions: [\n\t\t// Relational\n\t\t'CLOSINGBALANCEMONTH',\n\t\t'CLOSINGBALANCEQUARTER',\n\t\t'CLOSINGBALANCEYEAR',\n\t\t'DATEADD',\n\t\t'DATESBETWEEN',\n\t\t'DATESINPERIOD',\n\t\t'DATESMTD',\n\t\t'DATESQTD',\n\t\t'DATESYTD',\n\t\t'ENDOFMONTH',\n\t\t'ENDOFQUARTER',\n\t\t'ENDOFYEAR',\n\t\t'FIRSTDATE',\n\t\t'FIRSTNONBLANK',\n\t\t'LASTDATE',\n\t\t'LASTNONBLANK',\n\t\t'NEXTDAY',\n\t\t'NEXTMONTH',\n\t\t'NEXTQUARTER',\n\t\t'NEXTYEAR',\n\t\t'OPENINGBALANCEMONTH',\n\t\t'OPENINGBALANCEQUARTER',\n\t\t'OPENINGBALANCEYEAR',\n\t\t'PARALLELPERIOD',\n\t\t'PREVIOUSDAY',\n\t\t'PREVIOUSMONTH',\n\t\t'PREVIOUSQUARTER',\n\t\t'PREVIOUSYEAR',\n\t\t'SAMEPERIODLASTYEAR',\n\t\t'STARTOFMONTH',\n\t\t'STARTOFQUARTER',\n\t\t'STARTOFYEAR',\n\t\t'TOTALMTD',\n\t\t'TOTALQTD',\n\t\t'TOTALYTD',\n\t\t'ADDCOLUMNS',\n\t\t'ADDMISSINGITEMS',\n\t\t'ALL',\n\t\t'ALLEXCEPT',\n\t\t'ALLNOBLANKROW',\n\t\t'ALLSELECTED',\n\t\t'CALCULATE',\n\t\t'CALCULATETABLE',\n\t\t'CALENDAR',\n\t\t'CALENDARAUTO',\n\t\t'CROSSFILTER',\n\t\t'CROSSJOIN',\n\t\t'CURRENTGROUP',\n\t\t'DATATABLE',\n\t\t'DETAILROWS',\n\t\t'DISTINCT',\n\t\t'EARLIER',\n\t\t'EARLIEST',\n\t\t'EXCEPT',\n\t\t'FILTER',\n\t\t'FILTERS',\n\t\t'GENERATE',\n\t\t'GENERATEALL',\n\t\t'GROUPBY',\n\t\t'IGNORE',\n\t\t'INTERSECT',\n\t\t'ISONORAFTER',\n\t\t'KEEPFILTERS',\n\t\t'LOOKUPVALUE',\n\t\t'NATURALINNERJOIN',\n\t\t'NATURALLEFTOUTERJOIN',\n\t\t'RELATED',\n\t\t'RELATEDTABLE',\n\t\t'ROLLUP',\n\t\t'ROLLUPADDISSUBTOTAL',\n\t\t'ROLLUPGROUP',\n\t\t'ROLLUPISSUBTOTAL',\n\t\t'ROW',\n\t\t'SAMPLE',\n\t\t'SELECTCOLUMNS',\n\t\t'SUBSTITUTEWITHINDEX',\n\t\t'SUMMARIZE',\n\t\t'SUMMARIZECOLUMNS',\n\t\t'TOPN',\n\t\t'TREATAS',\n\t\t'UNION',\n\t\t'USERELATIONSHIP',\n\t\t'VALUES',\n\t\t'SUM',\n\t\t'SUMX',\n\t\t'PATH',\n\t\t'PATHCONTAINS',\n\t\t'PATHITEM',\n\t\t'PATHITEMREVERSE',\n\t\t'PATHLENGTH',\n\t\t'AVERAGE',\n\t\t'AVERAGEA',\n\t\t'AVERAGEX',\n\t\t'COUNT',\n\t\t'COUNTA',\n\t\t'COUNTAX',\n\t\t'COUNTBLANK',\n\t\t'COUNTROWS',\n\t\t'COUNTX',\n\t\t'DISTINCTCOUNT',\n\t\t'DIVIDE',\n\t\t'GEOMEAN',\n\t\t'GEOMEANX',\n\t\t'MAX',\n\t\t'MAXA',\n\t\t'MAXX',\n\t\t'MEDIAN',\n\t\t'MEDIANX',\n\t\t'MIN',\n\t\t'MINA',\n\t\t'MINX',\n\t\t'PERCENTILE.EXC',\n\t\t'PERCENTILE.INC',\n\t\t'PERCENTILEX.EXC',\n\t\t'PERCENTILEX.INC',\n\t\t'PRODUCT',\n\t\t'PRODUCTX',\n\t\t'RANK.EQ',\n\t\t'RANKX',\n\t\t'STDEV.P',\n\t\t'STDEV.S',\n\t\t'STDEVX.P',\n\t\t'STDEVX.S',\n\t\t'VAR.P',\n\t\t'VAR.S',\n\t\t'VARX.P',\n\t\t'VARX.S',\n\t\t'XIRR',\n\t\t'XNPV',\n\t\t// Scalar\n\t\t'DATE',\n\t\t'DATEDIFF',\n\t\t'DATEVALUE',\n\t\t'DAY',\n\t\t'EDATE',\n\t\t'EOMONTH',\n\t\t'HOUR',\n\t\t'MINUTE',\n\t\t'MONTH',\n\t\t'NOW',\n\t\t'SECOND',\n\t\t'TIME',\n\t\t'TIMEVALUE',\n\t\t'TODAY',\n\t\t'WEEKDAY',\n\t\t'WEEKNUM',\n\t\t'YEAR',\n\t\t'YEARFRAC',\n\t\t'CONTAINS',\n\t\t'CONTAINSROW',\n\t\t'CUSTOMDATA',\n\t\t'ERROR',\n\t\t'HASONEFILTER',\n\t\t'HASONEVALUE',\n\t\t'ISBLANK',\n\t\t'ISCROSSFILTERED',\n\t\t'ISEMPTY',\n\t\t'ISERROR',\n\t\t'ISEVEN',\n\t\t'ISFILTERED',\n\t\t'ISLOGICAL',\n\t\t'ISNONTEXT',\n\t\t'ISNUMBER',\n\t\t'ISODD',\n\t\t'ISSUBTOTAL',\n\t\t'ISTEXT',\n\t\t'USERNAME',\n\t\t'USERPRINCIPALNAME',\n\t\t'AND',\n\t\t'FALSE',\n\t\t'IF',\n\t\t'IFERROR',\n\t\t'NOT',\n\t\t'OR',\n\t\t'SWITCH',\n\t\t'TRUE',\n\t\t'ABS',\n\t\t'ACOS',\n\t\t'ACOSH',\n\t\t'ACOT',\n\t\t'ACOTH',\n\t\t'ASIN',\n\t\t'ASINH',\n\t\t'ATAN',\n\t\t'ATANH',\n\t\t'BETA.DIST',\n\t\t'BETA.INV',\n\t\t'CEILING',\n\t\t'CHISQ.DIST',\n\t\t'CHISQ.DIST.RT',\n\t\t'CHISQ.INV',\n\t\t'CHISQ.INV.RT',\n\t\t'COMBIN',\n\t\t'COMBINA',\n\t\t'CONFIDENCE.NORM',\n\t\t'CONFIDENCE.T',\n\t\t'COS',\n\t\t'COSH',\n\t\t'COT',\n\t\t'COTH',\n\t\t'CURRENCY',\n\t\t'DEGREES',\n\t\t'EVEN',\n\t\t'EXP',\n\t\t'EXPON.DIST',\n\t\t'FACT',\n\t\t'FLOOR',\n\t\t'GCD',\n\t\t'INT',\n\t\t'ISO.CEILING',\n\t\t'LCM',\n\t\t'LN',\n\t\t'LOG',\n\t\t'LOG10',\n\t\t'MOD',\n\t\t'MROUND',\n\t\t'ODD',\n\t\t'PERMUT',\n\t\t'PI',\n\t\t'POISSON.DIST',\n\t\t'POWER',\n\t\t'QUOTIENT',\n\t\t'RADIANS',\n\t\t'RAND',\n\t\t'RANDBETWEEN',\n\t\t'ROUND',\n\t\t'ROUNDDOWN',\n\t\t'ROUNDUP',\n\t\t'SIGN',\n\t\t'SIN',\n\t\t'SINH',\n\t\t'SQRT',\n\t\t'SQRTPI',\n\t\t'TAN',\n\t\t'TANH',\n\t\t'TRUNC',\n\t\t'BLANK',\n\t\t'CONCATENATE',\n\t\t'CONCATENATEX',\n\t\t'EXACT',\n\t\t'FIND',\n\t\t'FIXED',\n\t\t'FORMAT',\n\t\t'LEFT',\n\t\t'LEN',\n\t\t'LOWER',\n\t\t'MID',\n\t\t'REPLACE',\n\t\t'REPT',\n\t\t'RIGHT',\n\t\t'SEARCH',\n\t\t'SUBSTITUTE',\n\t\t'TRIM',\n\t\t'UNICHAR',\n\t\t'UNICODE',\n\t\t'UPPER',\n\t\t'VALUE'\n\t],\n\ttokenizer: {\n\t\troot: [\n\t\t\t{ include: '@comments' },\n\t\t\t{ include: '@whitespace' },\n\t\t\t{ include: '@numbers' },\n\t\t\t{ include: '@strings' },\n\t\t\t{ include: '@complexIdentifiers' },\n\t\t\t[/[;,.]/, 'delimiter'],\n\t\t\t[/[({})]/, '@brackets'],\n\t\t\t[\n\t\t\t\t/[a-z_][a-zA-Z0-9_]*/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@keywords': 'keyword',\n\t\t\t\t\t\t'@functions': 'keyword',\n\t\t\t\t\t\t'@default': 'identifier'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/[<>=!%&+\\-*/|~^]/, 'operator']\n\t\t],\n\t\twhitespace: [[/\\s+/, 'white']],\n\t\tcomments: [\n\t\t\t[/\\/\\/+.*/, 'comment'],\n\t\t\t[/\\/\\*/, { token: 'comment.quote', next: '@comment' }]\n\t\t],\n\t\tcomment: [\n\t\t\t[/[^*/]+/, 'comment'],\n\t\t\t[/\\*\\//, { token: 'comment.quote', next: '@pop' }],\n\t\t\t[/./, 'comment']\n\t\t],\n\t\tnumbers: [\n\t\t\t[/0[xX][0-9a-fA-F]*/, 'number'],\n\t\t\t[/[$][+-]*\\d*(\\.\\d*)?/, 'number'],\n\t\t\t[/((\\d+(\\.\\d*)?)|(\\.\\d+))([eE][\\-+]?\\d+)?/, 'number']\n\t\t],\n\t\tstrings: [\n\t\t\t[/N\"/, { token: 'string', next: '@string' }],\n\t\t\t[/\"/, { token: 'string', next: '@string' }]\n\t\t],\n\t\tstring: [\n\t\t\t[/[^\"]+/, 'string'],\n\t\t\t[/\"\"/, 'string'],\n\t\t\t[/\"/, { token: 'string', next: '@pop' }]\n\t\t],\n\t\tcomplexIdentifiers: [\n\t\t\t[/\\[/, { token: 'identifier.quote', next: '@bracketedIdentifier' }],\n\t\t\t[/'/, { token: 'identifier.quote', next: '@quotedIdentifier' }]\n\t\t],\n\t\tbracketedIdentifier: [\n\t\t\t[/[^\\]]+/, 'identifier'],\n\t\t\t[/]]/, 'identifier'],\n\t\t\t[/]/, { token: 'identifier.quote', next: '@pop' }]\n\t\t],\n\t\tquotedIdentifier: [\n\t\t\t[/[^']+/, 'identifier'],\n\t\t\t[/''/, 'identifier'],\n\t\t\t[/'/, { token: 'identifier.quote', next: '@pop' }]\n\t\t]\n\t}\n}",
  "mysql": "<languages.IMonarchLanguage>{\n\tdefaultToken: '',\n\ttokenPostfix: '.sql',\n\tignoreCase: true,\n\n\tbrackets: [\n\t\t{ open: '[', close: ']', token: 'delimiter.square' },\n\t\t{ open: '(', close: ')', token: 'delimiter.parenthesis' }\n\t],\n\n\tkeywords: [\n\t\t// This list is generated using `keywords.js`\n\t\t'ACCESSIBLE',\n\t\t'ADD',\n\t\t'ALL',\n\t\t'ALTER',\n\t\t'ANALYZE',\n\t\t'AND',\n\t\t'AS',\n\t\t'ASC',\n\t\t'ASENSITIVE',\n\t\t'BEFORE',\n\t\t'BETWEEN',\n\t\t'BIGINT',\n\t\t'BINARY',\n\t\t'BLOB',\n\t\t'BOTH',\n\t\t'BY',\n\t\t'CALL',\n\t\t'CASCADE',\n\t\t'CASE',\n\t\t'CHANGE',\n\t\t'CHAR',\n\t\t'CHARACTER',\n\t\t'CHECK',\n\t\t'COLLATE',\n\t\t'COLUMN',\n\t\t'CONDITION',\n\t\t'CONSTRAINT',\n\t\t'CONTINUE',\n\t\t'CONVERT',\n\t\t'CREATE',\n\t\t'CROSS',\n\t\t'CUBE',\n\t\t'CUME_DIST',\n\t\t'CURRENT_DATE',\n\t\t'CURRENT_TIME',\n\t\t'CURRENT_TIMESTAMP',\n\t\t'CURRENT_USER',\n\t\t'CURSOR',\n\t\t'DATABASE',\n\t\t'DATABASES',\n\t\t'DAY_HOUR',\n\t\t'DAY_MICROSECOND',\n\t\t'DAY_MINUTE',\n\t\t'DAY_SECOND',\n\t\t'DEC',\n\t\t'DECIMAL',\n\t\t'DECLARE',\n\t\t'DEFAULT',\n\t\t'DELAYED',\n\t\t'DELETE',\n\t\t'DENSE_RANK',\n\t\t'DESC',\n\t\t'DESCRIBE',\n\t\t'DETERMINISTIC',\n\t\t'DISTINCT',\n\t\t'DISTINCTROW',\n\t\t'DIV',\n\t\t'DOUBLE',\n\t\t'DROP',\n\t\t'DUAL',\n\t\t'EACH',\n\t\t'ELSE',\n\t\t'ELSEIF',\n\t\t'EMPTY',\n\t\t'ENCLOSED',\n\t\t'ESCAPED',\n\t\t'EXCEPT',\n\t\t'EXISTS',\n\t\t'EXIT',\n\t\t'EXPLAIN',\n\t\t'FALSE',\n\t\t'FETCH',\n\t\t'FIRST_VALUE',\n\t\t'FLOAT',\n\t\t'FLOAT4',\n\t\t'FLOAT8',\n\t\t'FOR',\n\t\t'FORCE',\n\t\t'FOREIGN',\n\t\t'FROM',\n\t\t'FULLTEXT',\n\t\t'FUNCTION',\n\t\t'GENERATED',\n\t\t'GET',\n\t\t'GRANT',\n\t\t'GROUP',\n\t\t'GROUPING',\n\t\t'GROUPS',\n\t\t'HAVING',\n\t\t'HIGH_PRIORITY',\n\t\t'HOUR_MICROSECOND',\n\t\t'HOUR_MINUTE',\n\t\t'HOUR_SECOND',\n\t\t'IF',\n\t\t'IGNORE',\n\t\t'IN',\n\t\t'INDEX',\n\t\t'INFILE',\n\t\t'INNER',\n\t\t'INOUT',\n\t\t'INSENSITIVE',\n\t\t'INSERT',\n\t\t'INT',\n\t\t'INT1',\n\t\t'INT2',\n\t\t'INT3',\n\t\t'INT4',\n\t\t'INT8',\n\t\t'INTEGER',\n\t\t'INTERVAL',\n\t\t'INTO',\n\t\t'IO_AFTER_GTIDS',\n\t\t'IO_BEFORE_GTIDS',\n\t\t'IS',\n\t\t'ITERATE',\n\t\t'JOIN',\n\t\t'JSON_TABLE',\n\t\t'KEY',\n\t\t'KEYS',\n\t\t'KILL',\n\t\t'LAG',\n\t\t'LAST_VALUE',\n\t\t'LATERAL',\n\t\t'LEAD',\n\t\t'LEADING',\n\t\t'LEAVE',\n\t\t'LEFT',\n\t\t'LIKE',\n\t\t'LIMIT',\n\t\t'LINEAR',\n\t\t'LINES',\n\t\t'LOAD',\n\t\t'LOCALTIME',\n\t\t'LOCALTIMESTAMP',\n\t\t'LOCK',\n\t\t'LONG',\n\t\t'LONGBLOB',\n\t\t'LONGTEXT',\n\t\t'LOOP',\n\t\t'LOW_PRIORITY',\n\t\t'MASTER_BIND',\n\t\t'MASTER_SSL_VERIFY_SERVER_CERT',\n\t\t'MATCH',\n\t\t'MAXVALUE',\n\t\t'MEDIUMBLOB',\n\t\t'MEDIUMINT',\n\t\t'MEDIUMTEXT',\n\t\t'MIDDLEINT',\n\t\t'MINUTE_MICROSECOND',\n\t\t'MINUTE_SECOND',\n\t\t'MOD',\n\t\t'MODIFIES',\n\t\t'NATURAL',\n\t\t'NOT',\n\t\t'NO_WRITE_TO_BINLOG',\n\t\t'NTH_VALUE',\n\t\t'NTILE',\n\t\t'NULL',\n\t\t'NUMERIC',\n\t\t'OF',\n\t\t'ON',\n\t\t'OPTIMIZE',\n\t\t'OPTIMIZER_COSTS',\n\t\t'OPTION',\n\t\t'OPTIONALLY',\n\t\t'OR',\n\t\t'ORDER',\n\t\t'OUT',\n\t\t'OUTER',\n\t\t'OUTFILE',\n\t\t'OVER',\n\t\t'PARTITION',\n\t\t'PERCENT_RANK',\n\t\t'PRECISION',\n\t\t'PRIMARY',\n\t\t'PROCEDURE',\n\t\t'PURGE',\n\t\t'RANGE',\n\t\t'RANK',\n\t\t'READ',\n\t\t'READS',\n\t\t'READ_WRITE',\n\t\t'REAL',\n\t\t'RECURSIVE',\n\t\t'REFERENCES',\n\t\t'REGEXP',\n\t\t'RELEASE',\n\t\t'RENAME',\n\t\t'REPEAT',\n\t\t'REPLACE',\n\t\t'REQUIRE',\n\t\t'RESIGNAL',\n\t\t'RESTRICT',\n\t\t'RETURN',\n\t\t'REVOKE',\n\t\t'RIGHT',\n\t\t'RLIKE',\n\t\t'ROW',\n\t\t'ROWS',\n\t\t'ROW_NUMBER',\n\t\t'SCHEMA',\n\t\t'SCHEMAS',\n\t\t'SECOND_MICROSECOND',\n\t\t'SELECT',\n\t\t'SENSITIVE',\n\t\t'SEPARATOR',\n\t\t'SET',\n\t\t'SHOW',\n\t\t'SIGNAL',\n\t\t'SMALLINT',\n\t\t'SPATIAL',\n\t\t'SPECIFIC',\n\t\t'SQL',\n\t\t'SQLEXCEPTION',\n\t\t'SQLSTATE',\n\t\t'SQLWARNING',\n\t\t'SQL_BIG_RESULT',\n\t\t'SQL_CALC_FOUND_ROWS',\n\t\t'SQL_SMALL_RESULT',\n\t\t'SSL',\n\t\t'STARTING',\n\t\t'STORED',\n\t\t'STRAIGHT_JOIN',\n\t\t'SYSTEM',\n\t\t'TABLE',\n\t\t'TERMINATED',\n\t\t'THEN',\n\t\t'TINYBLOB',\n\t\t'TINYINT',\n\t\t'TINYTEXT',\n\t\t'TO',\n\t\t'TRAILING',\n\t\t'TRIGGER',\n\t\t'TRUE',\n\t\t'UNDO',\n\t\t'UNION',\n\t\t'UNIQUE',\n\t\t'UNLOCK',\n\t\t'UNSIGNED',\n\t\t'UPDATE',\n\t\t'USAGE',\n\t\t'USE',\n\t\t'USING',\n\t\t'UTC_DATE',\n\t\t'UTC_TIME',\n\t\t'UTC_TIMESTAMP',\n\t\t'VALUES',\n\t\t'VARBINARY',\n\t\t'VARCHAR',\n\t\t'VARCHARACTER',\n\t\t'VARYING',\n\t\t'VIRTUAL',\n\t\t'WHEN',\n\t\t'WHERE',\n\t\t'WHILE',\n\t\t'WINDOW',\n\t\t'WITH',\n\t\t'WRITE',\n\t\t'XOR',\n\t\t'YEAR_MONTH',\n\t\t'ZEROFILL'\n\t],\n\toperators: [\n\t\t'AND',\n\t\t'BETWEEN',\n\t\t'IN',\n\t\t'LIKE',\n\t\t'NOT',\n\t\t'OR',\n\t\t'IS',\n\t\t'NULL',\n\t\t'INTERSECT',\n\t\t'UNION',\n\t\t'INNER',\n\t\t'JOIN',\n\t\t'LEFT',\n\t\t'OUTER',\n\t\t'RIGHT'\n\t],\n\tbuiltinFunctions: [\n\t\t'ABS',\n\t\t'ACOS',\n\t\t'ADDDATE',\n\t\t'ADDTIME',\n\t\t'AES_DECRYPT',\n\t\t'AES_ENCRYPT',\n\t\t'ANY_VALUE',\n\t\t'Area',\n\t\t'AsBinary',\n\t\t'AsWKB',\n\t\t'ASCII',\n\t\t'ASIN',\n\t\t'AsText',\n\t\t'AsWKT',\n\t\t'ASYMMETRIC_DECRYPT',\n\t\t'ASYMMETRIC_DERIVE',\n\t\t'ASYMMETRIC_ENCRYPT',\n\t\t'ASYMMETRIC_SIGN',\n\t\t'ASYMMETRIC_VERIFY',\n\t\t'ATAN',\n\t\t'ATAN2',\n\t\t'ATAN',\n\t\t'AVG',\n\t\t'BENCHMARK',\n\t\t'BIN',\n\t\t'BIT_AND',\n\t\t'BIT_COUNT',\n\t\t'BIT_LENGTH',\n\t\t'BIT_OR',\n\t\t'BIT_XOR',\n\t\t'Buffer',\n\t\t'CAST',\n\t\t'CEIL',\n\t\t'CEILING',\n\t\t'Centroid',\n\t\t'CHAR',\n\t\t'CHAR_LENGTH',\n\t\t'CHARACTER_LENGTH',\n\t\t'CHARSET',\n\t\t'COALESCE',\n\t\t'COERCIBILITY',\n\t\t'COLLATION',\n\t\t'COMPRESS',\n\t\t'CONCAT',\n\t\t'CONCAT_WS',\n\t\t'CONNECTION_ID',\n\t\t'Contains',\n\t\t'CONV',\n\t\t'CONVERT',\n\t\t'CONVERT_TZ',\n\t\t'ConvexHull',\n\t\t'COS',\n\t\t'COT',\n\t\t'COUNT',\n\t\t'CRC32',\n\t\t'CREATE_ASYMMETRIC_PRIV_KEY',\n\t\t'CREATE_ASYMMETRIC_PUB_KEY',\n\t\t'CREATE_DH_PARAMETERS',\n\t\t'CREATE_DIGEST',\n\t\t'Crosses',\n\t\t'CUME_DIST',\n\t\t'CURDATE',\n\t\t'CURRENT_DATE',\n\t\t'CURRENT_ROLE',\n\t\t'CURRENT_TIME',\n\t\t'CURRENT_TIMESTAMP',\n\t\t'CURRENT_USER',\n\t\t'CURTIME',\n\t\t'DATABASE',\n\t\t'DATE',\n\t\t'DATE_ADD',\n\t\t'DATE_FORMAT',\n\t\t'DATE_SUB',\n\t\t'DATEDIFF',\n\t\t'DAY',\n\t\t'DAYNAME',\n\t\t'DAYOFMONTH',\n\t\t'DAYOFWEEK',\n\t\t'DAYOFYEAR',\n\t\t'DECODE',\n\t\t'DEFAULT',\n\t\t'DEGREES',\n\t\t'DES_DECRYPT',\n\t\t'DES_ENCRYPT',\n\t\t'DENSE_RANK',\n\t\t'Dimension',\n\t\t'Disjoint',\n\t\t'Distance',\n\t\t'ELT',\n\t\t'ENCODE',\n\t\t'ENCRYPT',\n\t\t'EndPoint',\n\t\t'Envelope',\n\t\t'Equals',\n\t\t'EXP',\n\t\t'EXPORT_SET',\n\t\t'ExteriorRing',\n\t\t'EXTRACT',\n\t\t'ExtractValue',\n\t\t'FIELD',\n\t\t'FIND_IN_SET',\n\t\t'FIRST_VALUE',\n\t\t'FLOOR',\n\t\t'FORMAT',\n\t\t'FORMAT_BYTES',\n\t\t'FORMAT_PICO_TIME',\n\t\t'FOUND_ROWS',\n\t\t'FROM_BASE64',\n\t\t'FROM_DAYS',\n\t\t'FROM_UNIXTIME',\n\t\t'GEN_RANGE',\n\t\t'GEN_RND_EMAIL',\n\t\t'GEN_RND_PAN',\n\t\t'GEN_RND_SSN',\n\t\t'GEN_RND_US_PHONE',\n\t\t'GeomCollection',\n\t\t'GeomCollFromText',\n\t\t'GeometryCollectionFromText',\n\t\t'GeomCollFromWKB',\n\t\t'GeometryCollectionFromWKB',\n\t\t'GeometryCollection',\n\t\t'GeometryN',\n\t\t'GeometryType',\n\t\t'GeomFromText',\n\t\t'GeometryFromText',\n\t\t'GeomFromWKB',\n\t\t'GeometryFromWKB',\n\t\t'GET_FORMAT',\n\t\t'GET_LOCK',\n\t\t'GLength',\n\t\t'GREATEST',\n\t\t'GROUP_CONCAT',\n\t\t'GROUPING',\n\t\t'GTID_SUBSET',\n\t\t'GTID_SUBTRACT',\n\t\t'HEX',\n\t\t'HOUR',\n\t\t'ICU_VERSION',\n\t\t'IF',\n\t\t'IFNULL',\n\t\t'INET_ATON',\n\t\t'INET_NTOA',\n\t\t'INET6_ATON',\n\t\t'INET6_NTOA',\n\t\t'INSERT',\n\t\t'INSTR',\n\t\t'InteriorRingN',\n\t\t'Intersects',\n\t\t'INTERVAL',\n\t\t'IS_FREE_LOCK',\n\t\t'IS_IPV4',\n\t\t'IS_IPV4_COMPAT',\n\t\t'IS_IPV4_MAPPED',\n\t\t'IS_IPV6',\n\t\t'IS_USED_LOCK',\n\t\t'IS_UUID',\n\t\t'IsClosed',\n\t\t'IsEmpty',\n\t\t'ISNULL',\n\t\t'IsSimple',\n\t\t'JSON_APPEND',\n\t\t'JSON_ARRAY',\n\t\t'JSON_ARRAY_APPEND',\n\t\t'JSON_ARRAY_INSERT',\n\t\t'JSON_ARRAYAGG',\n\t\t'JSON_CONTAINS',\n\t\t'JSON_CONTAINS_PATH',\n\t\t'JSON_DEPTH',\n\t\t'JSON_EXTRACT',\n\t\t'JSON_INSERT',\n\t\t'JSON_KEYS',\n\t\t'JSON_LENGTH',\n\t\t'JSON_MERGE',\n\t\t'JSON_MERGE_PATCH',\n\t\t'JSON_MERGE_PRESERVE',\n\t\t'JSON_OBJECT',\n\t\t'JSON_OBJECTAGG',\n\t\t'JSON_OVERLAPS',\n\t\t'JSON_PRETTY',\n\t\t'JSON_QUOTE',\n\t\t'JSON_REMOVE',\n\t\t'JSON_REPLACE',\n\t\t'JSON_SCHEMA_VALID',\n\t\t'JSON_SCHEMA_VALIDATION_REPORT',\n\t\t'JSON_SEARCH',\n\t\t'JSON_SET',\n\t\t'JSON_STORAGE_FREE',\n\t\t'JSON_STORAGE_SIZE',\n\t\t'JSON_TABLE',\n\t\t'JSON_TYPE',\n\t\t'JSON_UNQUOTE',\n\t\t'JSON_VALID',\n\t\t'LAG',\n\t\t'LAST_DAY',\n\t\t'LAST_INSERT_ID',\n\t\t'LAST_VALUE',\n\t\t'LCASE',\n\t\t'LEAD',\n\t\t'LEAST',\n\t\t'LEFT',\n\t\t'LENGTH',\n\t\t'LineFromText',\n\t\t'LineStringFromText',\n\t\t'LineFromWKB',\n\t\t'LineStringFromWKB',\n\t\t'LineString',\n\t\t'LN',\n\t\t'LOAD_FILE',\n\t\t'LOCALTIME',\n\t\t'LOCALTIMESTAMP',\n\t\t'LOCATE',\n\t\t'LOG',\n\t\t'LOG10',\n\t\t'LOG2',\n\t\t'LOWER',\n\t\t'LPAD',\n\t\t'LTRIM',\n\t\t'MAKE_SET',\n\t\t'MAKEDATE',\n\t\t'MAKETIME',\n\t\t'MASK_INNER',\n\t\t'MASK_OUTER',\n\t\t'MASK_PAN',\n\t\t'MASK_PAN_RELAXED',\n\t\t'MASK_SSN',\n\t\t'MASTER_POS_WAIT',\n\t\t'MAX',\n\t\t'MBRContains',\n\t\t'MBRCoveredBy',\n\t\t'MBRCovers',\n\t\t'MBRDisjoint',\n\t\t'MBREqual',\n\t\t'MBREquals',\n\t\t'MBRIntersects',\n\t\t'MBROverlaps',\n\t\t'MBRTouches',\n\t\t'MBRWithin',\n\t\t'MD5',\n\t\t'MEMBER OF',\n\t\t'MICROSECOND',\n\t\t'MID',\n\t\t'MIN',\n\t\t'MINUTE',\n\t\t'MLineFromText',\n\t\t'MultiLineStringFromText',\n\t\t'MLineFromWKB',\n\t\t'MultiLineStringFromWKB',\n\t\t'MOD',\n\t\t'MONTH',\n\t\t'MONTHNAME',\n\t\t'MPointFromText',\n\t\t'MultiPointFromText',\n\t\t'MPointFromWKB',\n\t\t'MultiPointFromWKB',\n\t\t'MPolyFromText',\n\t\t'MultiPolygonFromText',\n\t\t'MPolyFromWKB',\n\t\t'MultiPolygonFromWKB',\n\t\t'MultiLineString',\n\t\t'MultiPoint',\n\t\t'MultiPolygon',\n\t\t'NAME_CONST',\n\t\t'NOT IN',\n\t\t'NOW',\n\t\t'NTH_VALUE',\n\t\t'NTILE',\n\t\t'NULLIF',\n\t\t'NumGeometries',\n\t\t'NumInteriorRings',\n\t\t'NumPoints',\n\t\t'OCT',\n\t\t'OCTET_LENGTH',\n\t\t'OLD_PASSWORD',\n\t\t'ORD',\n\t\t'Overlaps',\n\t\t'PASSWORD',\n\t\t'PERCENT_RANK',\n\t\t'PERIOD_ADD',\n\t\t'PERIOD_DIFF',\n\t\t'PI',\n\t\t'Point',\n\t\t'PointFromText',\n\t\t'PointFromWKB',\n\t\t'PointN',\n\t\t'PolyFromText',\n\t\t'PolygonFromText',\n\t\t'PolyFromWKB',\n\t\t'PolygonFromWKB',\n\t\t'Polygon',\n\t\t'POSITION',\n\t\t'POW',\n\t\t'POWER',\n\t\t'PS_CURRENT_THREAD_ID',\n\t\t'PS_THREAD_ID',\n\t\t'PROCEDURE ANALYSE',\n\t\t'QUARTER',\n\t\t'QUOTE',\n\t\t'RADIANS',\n\t\t'RAND',\n\t\t'RANDOM_BYTES',\n\t\t'RANK',\n\t\t'REGEXP_INSTR',\n\t\t'REGEXP_LIKE',\n\t\t'REGEXP_REPLACE',\n\t\t'REGEXP_REPLACE',\n\t\t'RELEASE_ALL_LOCKS',\n\t\t'RELEASE_LOCK',\n\t\t'REPEAT',\n\t\t'REPLACE',\n\t\t'REVERSE',\n\t\t'RIGHT',\n\t\t'ROLES_GRAPHML',\n\t\t'ROUND',\n\t\t'ROW_COUNT',\n\t\t'ROW_NUMBER',\n\t\t'RPAD',\n\t\t'RTRIM',\n\t\t'SCHEMA',\n\t\t'SEC_TO_TIME',\n\t\t'SECOND',\n\t\t'SESSION_USER',\n\t\t'SHA1',\n\t\t'SHA',\n\t\t'SHA2',\n\t\t'SIGN',\n\t\t'SIN',\n\t\t'SLEEP',\n\t\t'SOUNDEX',\n\t\t'SOURCE_POS_WAIT',\n\t\t'SPACE',\n\t\t'SQRT',\n\t\t'SRID',\n\t\t'ST_Area',\n\t\t'ST_AsBinary',\n\t\t'ST_AsWKB',\n\t\t'ST_AsGeoJSON',\n\t\t'ST_AsText',\n\t\t'ST_AsWKT',\n\t\t'ST_Buffer',\n\t\t'ST_Buffer_Strategy',\n\t\t'ST_Centroid',\n\t\t'ST_Collect',\n\t\t'ST_Contains',\n\t\t'ST_ConvexHull',\n\t\t'ST_Crosses',\n\t\t'ST_Difference',\n\t\t'ST_Dimension',\n\t\t'ST_Disjoint',\n\t\t'ST_Distance',\n\t\t'ST_Distance_Sphere',\n\t\t'ST_EndPoint',\n\t\t'ST_Envelope',\n\t\t'ST_Equals',\n\t\t'ST_ExteriorRing',\n\t\t'ST_FrechetDistance',\n\t\t'ST_GeoHash',\n\t\t'ST_GeomCollFromText',\n\t\t'ST_GeometryCollectionFromText',\n\t\t'ST_GeomCollFromTxt',\n\t\t'ST_GeomCollFromWKB',\n\t\t'ST_GeometryCollectionFromWKB',\n\t\t'ST_GeometryN',\n\t\t'ST_GeometryType',\n\t\t'ST_GeomFromGeoJSON',\n\t\t'ST_GeomFromText',\n\t\t'ST_GeometryFromText',\n\t\t'ST_GeomFromWKB',\n\t\t'ST_GeometryFromWKB',\n\t\t'ST_HausdorffDistance',\n\t\t'ST_InteriorRingN',\n\t\t'ST_Intersection',\n\t\t'ST_Intersects',\n\t\t'ST_IsClosed',\n\t\t'ST_IsEmpty',\n\t\t'ST_IsSimple',\n\t\t'ST_IsValid',\n\t\t'ST_LatFromGeoHash',\n\t\t'ST_Length',\n\t\t'ST_LineFromText',\n\t\t'ST_LineStringFromText',\n\t\t'ST_LineFromWKB',\n\t\t'ST_LineStringFromWKB',\n\t\t'ST_LineInterpolatePoint',\n\t\t'ST_LineInterpolatePoints',\n\t\t'ST_LongFromGeoHash',\n\t\t'ST_Longitude',\n\t\t'ST_MakeEnvelope',\n\t\t'ST_MLineFromText',\n\t\t'ST_MultiLineStringFromText',\n\t\t'ST_MLineFromWKB',\n\t\t'ST_MultiLineStringFromWKB',\n\t\t'ST_MPointFromText',\n\t\t'ST_MultiPointFromText',\n\t\t'ST_MPointFromWKB',\n\t\t'ST_MultiPointFromWKB',\n\t\t'ST_MPolyFromText',\n\t\t'ST_MultiPolygonFromText',\n\t\t'ST_MPolyFromWKB',\n\t\t'ST_MultiPolygonFromWKB',\n\t\t'ST_NumGeometries',\n\t\t'ST_NumInteriorRing',\n\t\t'ST_NumInteriorRings',\n\t\t'ST_NumPoints',\n\t\t'ST_Overlaps',\n\t\t'ST_PointAtDistance',\n\t\t'ST_PointFromGeoHash',\n\t\t'ST_PointFromText',\n\t\t'ST_PointFromWKB',\n\t\t'ST_PointN',\n\t\t'ST_PolyFromText',\n\t\t'ST_PolygonFromText',\n\t\t'ST_PolyFromWKB',\n\t\t'ST_PolygonFromWKB',\n\t\t'ST_Simplify',\n\t\t'ST_SRID',\n\t\t'ST_StartPoint',\n\t\t'ST_SwapXY',\n\t\t'ST_SymDifference',\n\t\t'ST_Touches',\n\t\t'ST_Transform',\n\t\t'ST_Union',\n\t\t'ST_Validate',\n\t\t'ST_Within',\n\t\t'ST_X',\n\t\t'ST_Y',\n\t\t'StartPoint',\n\t\t'STATEMENT_DIGEST',\n\t\t'STATEMENT_DIGEST_TEXT',\n\t\t'STD',\n\t\t'STDDEV',\n\t\t'STDDEV_POP',\n\t\t'STDDEV_SAMP',\n\t\t'STR_TO_DATE',\n\t\t'STRCMP',\n\t\t'SUBDATE',\n\t\t'SUBSTR',\n\t\t'SUBSTRING',\n\t\t'SUBSTRING_INDEX',\n\t\t'SUBTIME',\n\t\t'SUM',\n\t\t'SYSDATE',\n\t\t'SYSTEM_USER',\n\t\t'TAN',\n\t\t'TIME',\n\t\t'TIME_FORMAT',\n\t\t'TIME_TO_SEC',\n\t\t'TIMEDIFF',\n\t\t'TIMESTAMP',\n\t\t'TIMESTAMPADD',\n\t\t'TIMESTAMPDIFF',\n\t\t'TO_BASE64',\n\t\t'TO_DAYS',\n\t\t'TO_SECONDS',\n\t\t'Touches',\n\t\t'TRIM',\n\t\t'TRUNCATE',\n\t\t'UCASE',\n\t\t'UNCOMPRESS',\n\t\t'UNCOMPRESSED_LENGTH',\n\t\t'UNHEX',\n\t\t'UNIX_TIMESTAMP',\n\t\t'UpdateXML',\n\t\t'UPPER',\n\t\t'USER',\n\t\t'UTC_DATE',\n\t\t'UTC_TIME',\n\t\t'UTC_TIMESTAMP',\n\t\t'UUID',\n\t\t'UUID_SHORT',\n\t\t'UUID_TO_BIN',\n\t\t'VALIDATE_PASSWORD_STRENGTH',\n\t\t'VALUES',\n\t\t'VAR_POP',\n\t\t'VAR_SAMP',\n\t\t'VARIANCE',\n\t\t'VERSION',\n\t\t'WAIT_FOR_EXECUTED_GTID_SET',\n\t\t'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS',\n\t\t'WEEK',\n\t\t'WEEKDAY',\n\t\t'WEEKOFYEAR',\n\t\t'WEIGHT_STRING',\n\t\t'Within',\n\t\t'X',\n\t\t'Y',\n\t\t'YEAR',\n\t\t'YEARWEEK'\n\t],\n\tbuiltinVariables: [\n\t\t// NOT SUPPORTED\n\t],\n\ttokenizer: {\n\t\troot: [\n\t\t\t{ include: '@comments' },\n\t\t\t{ include: '@whitespace' },\n\t\t\t{ include: '@numbers' },\n\t\t\t{ include: '@strings' },\n\t\t\t{ include: '@complexIdentifiers' },\n\t\t\t{ include: '@scopes' },\n\t\t\t[/[;,.]/, 'delimiter'],\n\t\t\t[/[()]/, '@brackets'],\n\t\t\t[\n\t\t\t\t/[\\w@]+/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@operators': 'operator',\n\t\t\t\t\t\t'@builtinVariables': 'predefined',\n\t\t\t\t\t\t'@builtinFunctions': 'predefined',\n\t\t\t\t\t\t'@keywords': 'keyword',\n\t\t\t\t\t\t'@default': 'identifier'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/[<>=!%&+\\-*/|~^]/, 'operator']\n\t\t],\n\t\twhitespace: [[/\\s+/, 'white']],\n\t\tcomments: [\n\t\t\t[/--+.*/, 'comment'],\n\t\t\t[/#+.*/, 'comment'],\n\t\t\t[/\\/\\*/, { token: 'comment.quote', next: '@comment' }]\n\t\t],\n\t\tcomment: [\n\t\t\t[/[^*/]+/, 'comment'],\n\t\t\t// Not supporting nested comments, as nested comments seem to not be standard?\n\t\t\t// i.e. http://stackoverflow.com/questions/728172/are-there-multiline-comment-delimiters-in-sql-that-are-vendor-agnostic\n\t\t\t// [/\\/\\*/, { token: 'comment.quote', next: '@push' }],    // nested comment not allowed :-(\n\t\t\t[/\\*\\//, { token: 'comment.quote', next: '@pop' }],\n\t\t\t[/./, 'comment']\n\t\t],\n\t\tnumbers: [\n\t\t\t[/0[xX][0-9a-fA-F]*/, 'number'],\n\t\t\t[/[$][+-]*\\d*(\\.\\d*)?/, 'number'],\n\t\t\t[/((\\d+(\\.\\d*)?)|(\\.\\d+))([eE][\\-+]?\\d+)?/, 'number']\n\t\t],\n\t\tstrings: [\n\t\t\t[/'/, { token: 'string', next: '@string' }],\n\t\t\t[/\"/, { token: 'string.double', next: '@stringDouble' }]\n\t\t],\n\t\tstring: [\n\t\t\t[/\\\\'/, 'string'],\n\t\t\t[/[^']+/, 'string'],\n\t\t\t[/''/, 'string'],\n\t\t\t[/'/, { token: 'string', next: '@pop' }]\n\t\t],\n\t\tstringDouble: [\n\t\t\t[/[^\"]+/, 'string.double'],\n\t\t\t[/\"\"/, 'string.double'],\n\t\t\t[/\"/, { token: 'string.double', next: '@pop' }]\n\t\t],\n\t\tcomplexIdentifiers: [[/`/, { token: 'identifier.quote', next: '@quotedIdentifier' }]],\n\t\tquotedIdentifier: [\n\t\t\t[/[^`]+/, 'identifier'],\n\t\t\t[/``/, 'identifier'],\n\t\t\t[/`/, { token: 'identifier.quote', next: '@pop' }]\n\t\t],\n\t\tscopes: [\n\t\t\t// NOT SUPPORTED\n\t\t]\n\t}\n}",
  "objective-c": "<languages.IMonarchLanguage>{\n\tdefaultToken: '',\n\ttokenPostfix: '.objective-c',\n\n\tkeywords: [\n\t\t'#import',\n\t\t'#include',\n\t\t'#define',\n\t\t'#else',\n\t\t'#endif',\n\t\t'#if',\n\t\t'#ifdef',\n\t\t'#ifndef',\n\t\t'#ident',\n\t\t'#undef',\n\n\t\t'@class',\n\t\t'@defs',\n\t\t'@dynamic',\n\t\t'@encode',\n\t\t'@end',\n\t\t'@implementation',\n\t\t'@interface',\n\t\t'@package',\n\t\t'@private',\n\t\t'@protected',\n\t\t'@property',\n\t\t'@protocol',\n\t\t'@public',\n\t\t'@selector',\n\t\t'@synthesize',\n\n\t\t'__declspec',\n\n\t\t'assign',\n\t\t'auto',\n\n\t\t'BOOL',\n\t\t'break',\n\t\t'bycopy',\n\t\t'byref',\n\n\t\t'case',\n\t\t'char',\n\t\t'Class',\n\t\t'const',\n\t\t'copy',\n\t\t'continue',\n\n\t\t'default',\n\t\t'do',\n\t\t'double',\n\n\t\t'else',\n\t\t'enum',\n\t\t'extern',\n\n\t\t'FALSE',\n\t\t'false',\n\t\t'float',\n\t\t'for',\n\n\t\t'goto',\n\n\t\t'if',\n\t\t'in',\n\t\t'int',\n\t\t'id',\n\t\t'inout',\n\t\t'IMP',\n\n\t\t'long',\n\n\t\t'nil',\n\t\t'nonatomic',\n\t\t'NULL',\n\n\t\t'oneway',\n\t\t'out',\n\n\t\t'private',\n\t\t'public',\n\t\t'protected',\n\n\t\t'readwrite',\n\t\t'readonly',\n\t\t'register',\n\t\t'return',\n\n\t\t'SEL',\n\t\t'self',\n\t\t'short',\n\t\t'signed',\n\t\t'sizeof',\n\t\t'static',\n\t\t'struct',\n\t\t'super',\n\t\t'switch',\n\n\t\t'typedef',\n\t\t'TRUE',\n\t\t'true',\n\n\t\t'union',\n\t\t'unsigned',\n\n\t\t'volatile',\n\t\t'void',\n\n\t\t'while'\n\t],\n\n\tdecpart: /\\d(_?\\d)*/,\n\tdecimal: /0|@decpart/,\n\n\ttokenizer: {\n\t\troot: [\n\t\t\t{ include: '@comments' },\n\t\t\t{ include: '@whitespace' },\n\t\t\t{ include: '@numbers' },\n\t\t\t{ include: '@strings' },\n\n\t\t\t[/[,:;]/, 'delimiter'],\n\t\t\t[/[{}\\[\\]()<>]/, '@brackets'],\n\n\t\t\t[\n\t\t\t\t/[a-zA-Z@#]\\w*/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@keywords': 'keyword',\n\t\t\t\t\t\t'@default': 'identifier'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t[/[<>=\\\\+\\\\-\\\\*\\\\/\\\\^\\\\|\\\\~,]|and\\\\b|or\\\\b|not\\\\b]/, 'operator']\n\t\t],\n\n\t\twhitespace: [[/\\s+/, 'white']],\n\n\t\tcomments: [\n\t\t\t['\\\\/\\\\*', 'comment', '@comment'],\n\t\t\t['\\\\/\\\\/+.*', 'comment']\n\t\t],\n\n\t\tcomment: [\n\t\t\t['\\\\*\\\\/', 'comment', '@pop'],\n\t\t\t['.', 'comment']\n\t\t],\n\n\t\tnumbers: [\n\t\t\t[/0[xX][0-9a-fA-F]*(_?[0-9a-fA-F])*/, 'number.hex'],\n\t\t\t[\n\t\t\t\t/@decimal((\\.@decpart)?([eE][\\-+]?@decpart)?)[fF]*/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'(\\\\d)*': 'number',\n\t\t\t\t\t\t$0: 'number.float'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t],\n\n\t\t// Recognize strings, including those broken across lines with \\ (but not without)\n\t\tstrings: [\n\t\t\t[/'$/, 'string.escape', '@popall'],\n\t\t\t[/'/, 'string.escape', '@stringBody'],\n\t\t\t[/\"$/, 'string.escape', '@popall'],\n\t\t\t[/\"/, 'string.escape', '@dblStringBody']\n\t\t],\n\t\tstringBody: [\n\t\t\t[/[^\\\\']+$/, 'string', '@popall'],\n\t\t\t[/[^\\\\']+/, 'string'],\n\t\t\t[/\\\\./, 'string'],\n\t\t\t[/'/, 'string.escape', '@popall'],\n\t\t\t[/\\\\$/, 'string']\n\t\t],\n\t\tdblStringBody: [\n\t\t\t[/[^\\\\\"]+$/, 'string', '@popall'],\n\t\t\t[/[^\\\\\"]+/, 'string'],\n\t\t\t[/\\\\./, 'string'],\n\t\t\t[/\"/, 'string.escape', '@popall'],\n\t\t\t[/\\\\$/, 'string']\n\t\t]\n\t}\n}",
  "pascal": "<languages.IMonarchLanguage>{\n\tdefaultToken: '',\n\ttokenPostfix: '.pascal',\n\tignoreCase: true,\n\n\tbrackets: [\n\t\t{ open: '{', close: '}', token: 'delimiter.curly' },\n\t\t{ open: '[', close: ']', token: 'delimiter.square' },\n\t\t{ open: '(', close: ')', token: 'delimiter.parenthesis' },\n\t\t{ open: '<', close: '>', token: 'delimiter.angle' }\n\t],\n\n\tkeywords: [\n\t\t'absolute',\n\t\t'abstract',\n\t\t'all',\n\t\t'and_then',\n\t\t'array',\n\t\t'as',\n\t\t'asm',\n\t\t'attribute',\n\t\t'begin',\n\t\t'bindable',\n\t\t'case',\n\t\t'class',\n\t\t'const',\n\t\t'contains',\n\t\t'default',\n\t\t'div',\n\t\t'else',\n\t\t'end',\n\t\t'except',\n\t\t'exports',\n\t\t'external',\n\t\t'far',\n\t\t'file',\n\t\t'finalization',\n\t\t'finally',\n\t\t'forward',\n\t\t'generic',\n\t\t'goto',\n\t\t'if',\n\t\t'implements',\n\t\t'import',\n\t\t'in',\n\t\t'index',\n\t\t'inherited',\n\t\t'initialization',\n\t\t'interrupt',\n\t\t'is',\n\t\t'label',\n\t\t'library',\n\t\t'mod',\n\t\t'module',\n\t\t'name',\n\t\t'near',\n\t\t'not',\n\t\t'object',\n\t\t'of',\n\t\t'on',\n\t\t'only',\n\t\t'operator',\n\t\t'or_else',\n\t\t'otherwise',\n\t\t'override',\n\t\t'package',\n\t\t'packed',\n\t\t'pow',\n\t\t'private',\n\t\t'program',\n\t\t'protected',\n\t\t'public',\n\t\t'published',\n\t\t'interface',\n\t\t'implementation',\n\t\t'qualified',\n\t\t'read',\n\t\t'record',\n\t\t'resident',\n\t\t'requires',\n\t\t'resourcestring',\n\t\t'restricted',\n\t\t'segment',\n\t\t'set',\n\t\t'shl',\n\t\t'shr',\n\t\t'specialize',\n\t\t'stored',\n\t\t'strict',\n\t\t'then',\n\t\t'threadvar',\n\t\t'to',\n\t\t'try',\n\t\t'type',\n\t\t'unit',\n\t\t'uses',\n\t\t'var',\n\t\t'view',\n\t\t'virtual',\n\t\t'dynamic',\n\t\t'overload',\n\t\t'reintroduce',\n\t\t'with',\n\t\t'write',\n\t\t'xor',\n\t\t'true',\n\t\t'false',\n\t\t'procedure',\n\t\t'function',\n\t\t'constructor',\n\t\t'destructor',\n\t\t'property',\n\t\t'break',\n\t\t'continue',\n\t\t'exit',\n\t\t'abort',\n\t\t'while',\n\t\t'do',\n\t\t'for',\n\t\t'raise',\n\t\t'repeat',\n\t\t'until'\n\t],\n\n\ttypeKeywords: [\n\t\t'boolean',\n\t\t'double',\n\t\t'byte',\n\t\t'integer',\n\t\t'shortint',\n\t\t'char',\n\t\t'longint',\n\t\t'float',\n\t\t'string'\n\t],\n\n\toperators: [\n\t\t'=',\n\t\t'>',\n\t\t'<',\n\t\t'<=',\n\t\t'>=',\n\t\t'<>',\n\t\t':',\n\t\t':=',\n\t\t'and',\n\t\t'or',\n\t\t'+',\n\t\t'-',\n\t\t'*',\n\t\t'/',\n\t\t'@',\n\t\t'&',\n\t\t'^',\n\t\t'%'\n\t],\n\n\t// we include these common regular expressions\n\tsymbols: /[=><:@\\^&|+\\-*\\/\\^%]+/,\n\n\t// The main tokenizer for our languages\n\ttokenizer: {\n\t\troot: [\n\t\t\t// identifiers and keywords\n\t\t\t[\n\t\t\t\t/[a-zA-Z_][\\w]*/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@keywords': { token: 'keyword.$0' },\n\t\t\t\t\t\t'@default': 'identifier'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t// whitespace\n\t\t\t{ include: '@whitespace' },\n\n\t\t\t// delimiters and operators\n\t\t\t[/[{}()\\[\\]]/, '@brackets'],\n\t\t\t[/[<>](?!@symbols)/, '@brackets'],\n\t\t\t[\n\t\t\t\t/@symbols/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@operators': 'delimiter',\n\t\t\t\t\t\t'@default': ''\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t// numbers\n\t\t\t[/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\n\t\t\t[/\\$[0-9a-fA-F]{1,16}/, 'number.hex'],\n\t\t\t[/\\d+/, 'number'],\n\n\t\t\t// delimiter: after number because of .\\d floats\n\t\t\t[/[;,.]/, 'delimiter'],\n\n\t\t\t// strings\n\t\t\t[/'([^'\\\\]|\\\\.)*$/, 'string.invalid'], // non-teminated string\n\t\t\t[/'/, 'string', '@string'],\n\n\t\t\t// characters\n\t\t\t[/'[^\\\\']'/, 'string'],\n\t\t\t[/'/, 'string.invalid'],\n\t\t\t[/\\#\\d+/, 'string']\n\t\t],\n\n\t\tcomment: [\n\t\t\t[/[^\\*\\}]+/, 'comment'],\n\t\t\t//[/\\(\\*/,    'comment', '@push' ],    // nested comment  not allowed :-(\n\t\t\t[/\\}/, 'comment', '@pop'],\n\t\t\t[/[\\{]/, 'comment']\n\t\t],\n\n\t\tstring: [\n\t\t\t[/[^\\\\']+/, 'string'],\n\t\t\t[/\\\\./, 'string.escape.invalid'],\n\t\t\t[/'/, { token: 'string.quote', bracket: '@close', next: '@pop' }]\n\t\t],\n\n\t\twhitespace: [\n\t\t\t[/[ \\t\\r\\n]+/, 'white'],\n\t\t\t[/\\{/, 'comment', '@comment'],\n\t\t\t[/\\/\\/.*$/, 'comment']\n\t\t]\n\t}\n}",
  "pascaligo": "<languages.IMonarchLanguage>{\n\tdefaultToken: '',\n\ttokenPostfix: '.pascaligo',\n\tignoreCase: true,\n\n\tbrackets: [\n\t\t{ open: '{', close: '}', token: 'delimiter.curly' },\n\t\t{ open: '[', close: ']', token: 'delimiter.square' },\n\t\t{ open: '(', close: ')', token: 'delimiter.parenthesis' },\n\t\t{ open: '<', close: '>', token: 'delimiter.angle' }\n\t],\n\n\tkeywords: [\n\t\t'begin',\n\t\t'block',\n\t\t'case',\n\t\t'const',\n\t\t'else',\n\t\t'end',\n\t\t'fail',\n\t\t'for',\n\t\t'from',\n\t\t'function',\n\t\t'if',\n\t\t'is',\n\t\t'nil',\n\t\t'of',\n\t\t'remove',\n\t\t'return',\n\t\t'skip',\n\t\t'then',\n\t\t'type',\n\t\t'var',\n\t\t'while',\n\t\t'with',\n\t\t'option',\n\t\t'None',\n\t\t'transaction'\n\t],\n\n\ttypeKeywords: [\n\t\t'bool',\n\t\t'int',\n\t\t'list',\n\t\t'map',\n\t\t'nat',\n\t\t'record',\n\t\t'string',\n\t\t'unit',\n\t\t'address',\n\t\t'map',\n\t\t'mtz',\n\t\t'xtz'\n\t],\n\n\toperators: [\n\t\t'=',\n\t\t'>',\n\t\t'<',\n\t\t'<=',\n\t\t'>=',\n\t\t'<>',\n\t\t':',\n\t\t':=',\n\t\t'and',\n\t\t'mod',\n\t\t'or',\n\t\t'+',\n\t\t'-',\n\t\t'*',\n\t\t'/',\n\t\t'@',\n\t\t'&',\n\t\t'^',\n\t\t'%'\n\t],\n\n\t// we include these common regular expressions\n\tsymbols: /[=><:@\\^&|+\\-*\\/\\^%]+/,\n\n\t// The main tokenizer for our languages\n\ttokenizer: {\n\t\troot: [\n\t\t\t// identifiers and keywords\n\t\t\t[\n\t\t\t\t/[a-zA-Z_][\\w]*/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@keywords': { token: 'keyword.$0' },\n\t\t\t\t\t\t'@default': 'identifier'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t// whitespace\n\t\t\t{ include: '@whitespace' },\n\n\t\t\t// delimiters and operators\n\t\t\t[/[{}()\\[\\]]/, '@brackets'],\n\t\t\t[/[<>](?!@symbols)/, '@brackets'],\n\t\t\t[\n\t\t\t\t/@symbols/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@operators': 'delimiter',\n\t\t\t\t\t\t'@default': ''\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t// numbers\n\t\t\t[/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\n\t\t\t[/\\$[0-9a-fA-F]{1,16}/, 'number.hex'],\n\t\t\t[/\\d+/, 'number'],\n\n\t\t\t// delimiter: after number because of .\\d floats\n\t\t\t[/[;,.]/, 'delimiter'],\n\n\t\t\t// strings\n\t\t\t[/'([^'\\\\]|\\\\.)*$/, 'string.invalid'], // non-teminated string\n\t\t\t[/'/, 'string', '@string'],\n\n\t\t\t// characters\n\t\t\t[/'[^\\\\']'/, 'string'],\n\t\t\t[/'/, 'string.invalid'],\n\t\t\t[/\\#\\d+/, 'string']\n\t\t],\n\t\t/* */\n\n\t\tcomment: [\n\t\t\t[/[^\\(\\*]+/, 'comment'],\n\t\t\t//[/\\(\\*/,    'comment', '@push' ],    // nested comment  not allowed :-(\n\t\t\t[/\\*\\)/, 'comment', '@pop'],\n\t\t\t[/\\(\\*/, 'comment']\n\t\t],\n\n\t\tstring: [\n\t\t\t[/[^\\\\']+/, 'string'],\n\t\t\t[/\\\\./, 'string.escape.invalid'],\n\t\t\t[/'/, { token: 'string.quote', bracket: '@close', next: '@pop' }]\n\t\t],\n\n\t\twhitespace: [\n\t\t\t[/[ \\t\\r\\n]+/, 'white'],\n\t\t\t[/\\(\\*/, 'comment', '@comment'],\n\t\t\t[/\\/\\/.*$/, 'comment']\n\t\t]\n\t}\n}",
  "perl": "<languages.IMonarchLanguage>{\n\tdefaultToken: '',\n\ttokenPostfix: '.perl',\n\n\tbrackets: [\n\t\t{ token: 'delimiter.bracket', open: '{', close: '}' },\n\t\t{ token: 'delimiter.parenthesis', open: '(', close: ')' },\n\t\t{ token: 'delimiter.square', open: '[', close: ']' }\n\t],\n\n\t// https://learn.perl.org/docs/keywords.html\n\n\t// Perl syntax\n\tkeywords: [\n\t\t'__DATA__',\n\t\t'else',\n\t\t'lock',\n\t\t'__END__',\n\t\t'elsif',\n\t\t'lt',\n\t\t'__FILE__',\n\t\t'eq',\n\t\t'__LINE__',\n\t\t'exp',\n\t\t'ne',\n\t\t'sub',\n\t\t'__PACKAGE__',\n\t\t'for',\n\t\t'no',\n\t\t'and',\n\t\t'foreach',\n\t\t'or',\n\t\t'unless',\n\t\t'cmp',\n\t\t'ge',\n\t\t'package',\n\t\t'until',\n\t\t'continue',\n\t\t'gt',\n\t\t'while',\n\t\t'CORE',\n\t\t'if',\n\t\t'xor',\n\t\t'do',\n\t\t'le',\n\n\t\t'__DIE__',\n\t\t'__WARN__'\n\t],\n\n\t// Perl functions\n\tbuiltinFunctions: [\n\t\t'-A',\n\t\t'END',\n\t\t'length',\n\t\t'setpgrp',\n\t\t'-B',\n\t\t'endgrent',\n\t\t'link',\n\t\t'setpriority',\n\t\t'-b',\n\t\t'endhostent',\n\t\t'listen',\n\t\t'setprotoent',\n\t\t'-C',\n\t\t'endnetent',\n\t\t'local',\n\t\t'setpwent',\n\t\t'-c',\n\t\t'endprotoent',\n\t\t'localtime',\n\t\t'setservent',\n\t\t'-d',\n\t\t'endpwent',\n\t\t'log',\n\t\t'setsockopt',\n\t\t'-e',\n\t\t'endservent',\n\t\t'lstat',\n\t\t'shift',\n\t\t'-f',\n\t\t'eof',\n\t\t'map',\n\t\t'shmctl',\n\t\t'-g',\n\t\t'eval',\n\t\t'mkdir',\n\t\t'shmget',\n\t\t'-k',\n\t\t'exec',\n\t\t'msgctl',\n\t\t'shmread',\n\t\t'-l',\n\t\t'exists',\n\t\t'msgget',\n\t\t'shmwrite',\n\t\t'-M',\n\t\t'exit',\n\t\t'msgrcv',\n\t\t'shutdown',\n\t\t'-O',\n\t\t'fcntl',\n\t\t'msgsnd',\n\t\t'sin',\n\t\t'-o',\n\t\t'fileno',\n\t\t'my',\n\t\t'sleep',\n\t\t'-p',\n\t\t'flock',\n\t\t'next',\n\t\t'socket',\n\t\t'-r',\n\t\t'fork',\n\t\t'not',\n\t\t'socketpair',\n\t\t'-R',\n\t\t'format',\n\t\t'oct',\n\t\t'sort',\n\t\t'-S',\n\t\t'formline',\n\t\t'open',\n\t\t'splice',\n\t\t'-s',\n\t\t'getc',\n\t\t'opendir',\n\t\t'split',\n\t\t'-T',\n\t\t'getgrent',\n\t\t'ord',\n\t\t'sprintf',\n\t\t'-t',\n\t\t'getgrgid',\n\t\t'our',\n\t\t'sqrt',\n\t\t'-u',\n\t\t'getgrnam',\n\t\t'pack',\n\t\t'srand',\n\t\t'-w',\n\t\t'gethostbyaddr',\n\t\t'pipe',\n\t\t'stat',\n\t\t'-W',\n\t\t'gethostbyname',\n\t\t'pop',\n\t\t'state',\n\t\t'-X',\n\t\t'gethostent',\n\t\t'pos',\n\t\t'study',\n\t\t'-x',\n\t\t'getlogin',\n\t\t'print',\n\t\t'substr',\n\t\t'-z',\n\t\t'getnetbyaddr',\n\t\t'printf',\n\t\t'symlink',\n\t\t'abs',\n\t\t'getnetbyname',\n\t\t'prototype',\n\t\t'syscall',\n\t\t'accept',\n\t\t'getnetent',\n\t\t'push',\n\t\t'sysopen',\n\t\t'alarm',\n\t\t'getpeername',\n\t\t'quotemeta',\n\t\t'sysread',\n\t\t'atan2',\n\t\t'getpgrp',\n\t\t'rand',\n\t\t'sysseek',\n\t\t'AUTOLOAD',\n\t\t'getppid',\n\t\t'read',\n\t\t'system',\n\t\t'BEGIN',\n\t\t'getpriority',\n\t\t'readdir',\n\t\t'syswrite',\n\t\t'bind',\n\t\t'getprotobyname',\n\t\t'readline',\n\t\t'tell',\n\t\t'binmode',\n\t\t'getprotobynumber',\n\t\t'readlink',\n\t\t'telldir',\n\t\t'bless',\n\t\t'getprotoent',\n\t\t'readpipe',\n\t\t'tie',\n\t\t'break',\n\t\t'getpwent',\n\t\t'recv',\n\t\t'tied',\n\t\t'caller',\n\t\t'getpwnam',\n\t\t'redo',\n\t\t'time',\n\t\t'chdir',\n\t\t'getpwuid',\n\t\t'ref',\n\t\t'times',\n\t\t'CHECK',\n\t\t'getservbyname',\n\t\t'rename',\n\t\t'truncate',\n\t\t'chmod',\n\t\t'getservbyport',\n\t\t'require',\n\t\t'uc',\n\t\t'chomp',\n\t\t'getservent',\n\t\t'reset',\n\t\t'ucfirst',\n\t\t'chop',\n\t\t'getsockname',\n\t\t'return',\n\t\t'umask',\n\t\t'chown',\n\t\t'getsockopt',\n\t\t'reverse',\n\t\t'undef',\n\t\t'chr',\n\t\t'glob',\n\t\t'rewinddir',\n\t\t'UNITCHECK',\n\t\t'chroot',\n\t\t'gmtime',\n\t\t'rindex',\n\t\t'unlink',\n\t\t'close',\n\t\t'goto',\n\t\t'rmdir',\n\t\t'unpack',\n\t\t'closedir',\n\t\t'grep',\n\t\t'say',\n\t\t'unshift',\n\t\t'connect',\n\t\t'hex',\n\t\t'scalar',\n\t\t'untie',\n\t\t'cos',\n\t\t'index',\n\t\t'seek',\n\t\t'use',\n\t\t'crypt',\n\t\t'INIT',\n\t\t'seekdir',\n\t\t'utime',\n\t\t'dbmclose',\n\t\t'int',\n\t\t'select',\n\t\t'values',\n\t\t'dbmopen',\n\t\t'ioctl',\n\t\t'semctl',\n\t\t'vec',\n\t\t'defined',\n\t\t'join',\n\t\t'semget',\n\t\t'wait',\n\t\t'delete',\n\t\t'keys',\n\t\t'semop',\n\t\t'waitpid',\n\t\t'DESTROY',\n\t\t'kill',\n\t\t'send',\n\t\t'wantarray',\n\t\t'die',\n\t\t'last',\n\t\t'setgrent',\n\t\t'warn',\n\t\t'dump',\n\t\t'lc',\n\t\t'sethostent',\n\t\t'write',\n\t\t'each',\n\t\t'lcfirst',\n\t\t'setnetent'\n\t],\n\n\t// File handlers\n\tbuiltinFileHandlers: ['ARGV', 'STDERR', 'STDOUT', 'ARGVOUT', 'STDIN', 'ENV'],\n\n\t// Perl variables\n\tbuiltinVariables: [\n\t\t'$!',\n\t\t'$^RE_TRIE_MAXBUF',\n\t\t'$LAST_REGEXP_CODE_RESULT',\n\t\t'$\"',\n\t\t'$^S',\n\t\t'$LIST_SEPARATOR',\n\t\t'$#',\n\t\t'$^T',\n\t\t'$MATCH',\n\t\t'$$',\n\t\t'$^TAINT',\n\t\t'$MULTILINE_MATCHING',\n\t\t'$%',\n\t\t'$^UNICODE',\n\t\t'$NR',\n\t\t'$&',\n\t\t'$^UTF8LOCALE',\n\t\t'$OFMT',\n\t\t\"$'\",\n\t\t'$^V',\n\t\t'$OFS',\n\t\t'$(',\n\t\t'$^W',\n\t\t'$ORS',\n\t\t'$)',\n\t\t'$^WARNING_BITS',\n\t\t'$OS_ERROR',\n\t\t'$*',\n\t\t'$^WIDE_SYSTEM_CALLS',\n\t\t'$OSNAME',\n\t\t'$+',\n\t\t'$^X',\n\t\t'$OUTPUT_AUTO_FLUSH',\n\t\t'$,',\n\t\t'$_',\n\t\t'$OUTPUT_FIELD_SEPARATOR',\n\t\t'$-',\n\t\t'$`',\n\t\t'$OUTPUT_RECORD_SEPARATOR',\n\t\t'$.',\n\t\t'$a',\n\t\t'$PERL_VERSION',\n\t\t'$/',\n\t\t'$ACCUMULATOR',\n\t\t'$PERLDB',\n\t\t'$0',\n\t\t'$ARG',\n\t\t'$PID',\n\t\t'$:',\n\t\t'$ARGV',\n\t\t'$POSTMATCH',\n\t\t'$;',\n\t\t'$b',\n\t\t'$PREMATCH',\n\t\t'$<',\n\t\t'$BASETIME',\n\t\t'$PROCESS_ID',\n\t\t'$=',\n\t\t'$CHILD_ERROR',\n\t\t'$PROGRAM_NAME',\n\t\t'$>',\n\t\t'$COMPILING',\n\t\t'$REAL_GROUP_ID',\n\t\t'$?',\n\t\t'$DEBUGGING',\n\t\t'$REAL_USER_ID',\n\t\t'$@',\n\t\t'$EFFECTIVE_GROUP_ID',\n\t\t'$RS',\n\t\t'$[',\n\t\t'$EFFECTIVE_USER_ID',\n\t\t'$SUBSCRIPT_SEPARATOR',\n\t\t'$\\\\',\n\t\t'$EGID',\n\t\t'$SUBSEP',\n\t\t'$]',\n\t\t'$ERRNO',\n\t\t'$SYSTEM_FD_MAX',\n\t\t'$^',\n\t\t'$EUID',\n\t\t'$UID',\n\t\t'$^A',\n\t\t'$EVAL_ERROR',\n\t\t'$WARNING',\n\t\t'$^C',\n\t\t'$EXCEPTIONS_BEING_CAUGHT',\n\t\t'$|',\n\t\t'$^CHILD_ERROR_NATIVE',\n\t\t'$EXECUTABLE_NAME',\n\t\t'$~',\n\t\t'$^D',\n\t\t'$EXTENDED_OS_ERROR',\n\t\t'%!',\n\t\t'$^E',\n\t\t'$FORMAT_FORMFEED',\n\t\t'%^H',\n\t\t'$^ENCODING',\n\t\t'$FORMAT_LINE_BREAK_CHARACTERS',\n\t\t'%ENV',\n\t\t'$^F',\n\t\t'$FORMAT_LINES_LEFT',\n\t\t'%INC',\n\t\t'$^H',\n\t\t'$FORMAT_LINES_PER_PAGE',\n\t\t'%OVERLOAD',\n\t\t'$^I',\n\t\t'$FORMAT_NAME',\n\t\t'%SIG',\n\t\t'$^L',\n\t\t'$FORMAT_PAGE_NUMBER',\n\t\t'@+',\n\t\t'$^M',\n\t\t'$FORMAT_TOP_NAME',\n\t\t'@-',\n\t\t'$^N',\n\t\t'$GID',\n\t\t'@_',\n\t\t'$^O',\n\t\t'$INPLACE_EDIT',\n\t\t'@ARGV',\n\t\t'$^OPEN',\n\t\t'$INPUT_LINE_NUMBER',\n\t\t'@INC',\n\t\t'$^P',\n\t\t'$INPUT_RECORD_SEPARATOR',\n\t\t'@LAST_MATCH_START',\n\t\t'$^R',\n\t\t'$LAST_MATCH_END',\n\t\t'$^RE_DEBUG_FLAGS',\n\t\t'$LAST_PAREN_MATCH'\n\t],\n\n\t// operators\n\tsymbols: /[:+\\-\\^*$&%@=<>!?|\\/~\\.]/,\n\tquoteLikeOps: ['qr', 'm', 's', 'q', 'qq', 'qx', 'qw', 'tr', 'y'],\n\n\tescapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n\n\t// The main tokenizer for our languages\n\ttokenizer: {\n\t\troot: [\n\t\t\t{ include: '@whitespace' },\n\n\t\t\t[\n\t\t\t\t/[a-zA-Z\\-_][\\w\\-_]*/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@keywords': 'keyword',\n\t\t\t\t\t\t'@builtinFunctions': 'type.identifier',\n\t\t\t\t\t\t'@builtinFileHandlers': 'variable.predefined',\n\t\t\t\t\t\t'@quoteLikeOps': {\n\t\t\t\t\t\t\ttoken: '@rematch',\n\t\t\t\t\t\t\tnext: 'quotedConstructs'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'@default': ''\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t// Perl variables\n\t\t\t[\n\t\t\t\t/[\\$@%][*@#?\\+\\-\\$!\\w\\\\\\^><~:;\\.]+/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@builtinVariables': 'variable.predefined',\n\t\t\t\t\t\t'@default': 'variable'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t{ include: '@strings' },\n\t\t\t{ include: '@dblStrings' },\n\n\t\t\t// Perl Doc\n\t\t\t{ include: '@perldoc' },\n\n\t\t\t// Here Doc\n\t\t\t{ include: '@heredoc' },\n\n\t\t\t[/[{}\\[\\]()]/, '@brackets'],\n\n\t\t\t// RegExp\n\t\t\t[/[\\/](?:(?:\\[(?:\\\\]|[^\\]])+\\])|(?:\\\\\\/|[^\\]\\/]))*[\\/]\\w*\\s*(?=[).,;]|$)/, 'regexp'],\n\n\t\t\t[/@symbols/, 'operators'],\n\n\t\t\t{ include: '@numbers' },\n\n\t\t\t[/[,;]/, 'delimiter']\n\t\t],\n\n\t\twhitespace: [\n\t\t\t[/\\s+/, 'white'],\n\t\t\t[/(^#!.*$)/, 'metatag'],\n\t\t\t[/(^#.*$)/, 'comment']\n\t\t],\n\n\t\tnumbers: [\n\t\t\t[/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\n\t\t\t[/0[xX][0-9a-fA-F_]*[0-9a-fA-F]/, 'number.hex'],\n\t\t\t[/\\d+/, 'number']\n\t\t],\n\n\t\t// Single quote string\n\t\tstrings: [[/'/, 'string', '@stringBody']],\n\n\t\tstringBody: [\n\t\t\t[/'/, 'string', '@popall'],\n\t\t\t[/\\\\'/, 'string.escape'],\n\t\t\t[/./, 'string']\n\t\t],\n\n\t\t// Double quote string\n\t\tdblStrings: [[/\"/, 'string', '@dblStringBody']],\n\n\t\tdblStringBody: [\n\t\t\t[/\"/, 'string', '@popall'],\n\t\t\t[/@escapes/, 'string.escape'],\n\t\t\t[/\\\\./, 'string.escape.invalid'],\n\t\t\t{ include: '@variables' },\n\t\t\t[/./, 'string']\n\t\t],\n\n\t\t// Quoted constructs\n\t\t// Percent strings in Ruby are similar to quote-like operators in Perl.\n\t\t// This is adapted from pstrings in ../ruby/ruby.ts.\n\t\tquotedConstructs: [\n\t\t\t[/(q|qw|tr|y)\\s*\\(/, { token: 'string.delim', switchTo: '@qstring.(.)' }],\n\t\t\t[/(q|qw|tr|y)\\s*\\[/, { token: 'string.delim', switchTo: '@qstring.[.]' }],\n\t\t\t[/(q|qw|tr|y)\\s*\\{/, { token: 'string.delim', switchTo: '@qstring.{.}' }],\n\t\t\t[/(q|qw|tr|y)\\s*</, { token: 'string.delim', switchTo: '@qstring.<.>' }],\n\t\t\t[/(q|qw|tr|y)#/, { token: 'string.delim', switchTo: '@qstring.#.#' }],\n\t\t\t[/(q|qw|tr|y)\\s*([^A-Za-z0-9#\\s])/, { token: 'string.delim', switchTo: '@qstring.$2.$2' }],\n\t\t\t[/(q|qw|tr|y)\\s+(\\w)/, { token: 'string.delim', switchTo: '@qstring.$2.$2' }],\n\n\t\t\t[/(qr|m|s)\\s*\\(/, { token: 'regexp.delim', switchTo: '@qregexp.(.)' }],\n\t\t\t[/(qr|m|s)\\s*\\[/, { token: 'regexp.delim', switchTo: '@qregexp.[.]' }],\n\t\t\t[/(qr|m|s)\\s*\\{/, { token: 'regexp.delim', switchTo: '@qregexp.{.}' }],\n\t\t\t[/(qr|m|s)\\s*</, { token: 'regexp.delim', switchTo: '@qregexp.<.>' }],\n\t\t\t[/(qr|m|s)#/, { token: 'regexp.delim', switchTo: '@qregexp.#.#' }],\n\t\t\t[/(qr|m|s)\\s*([^A-Za-z0-9_#\\s])/, { token: 'regexp.delim', switchTo: '@qregexp.$2.$2' }],\n\t\t\t[/(qr|m|s)\\s+(\\w)/, { token: 'regexp.delim', switchTo: '@qregexp.$2.$2' }],\n\n\t\t\t[/(qq|qx)\\s*\\(/, { token: 'string.delim', switchTo: '@qqstring.(.)' }],\n\t\t\t[/(qq|qx)\\s*\\[/, { token: 'string.delim', switchTo: '@qqstring.[.]' }],\n\t\t\t[/(qq|qx)\\s*\\{/, { token: 'string.delim', switchTo: '@qqstring.{.}' }],\n\t\t\t[/(qq|qx)\\s*</, { token: 'string.delim', switchTo: '@qqstring.<.>' }],\n\t\t\t[/(qq|qx)#/, { token: 'string.delim', switchTo: '@qqstring.#.#' }],\n\t\t\t[/(qq|qx)\\s*([^A-Za-z0-9#\\s])/, { token: 'string.delim', switchTo: '@qqstring.$2.$2' }],\n\t\t\t[/(qq|qx)\\s+(\\w)/, { token: 'string.delim', switchTo: '@qqstring.$2.$2' }]\n\t\t],\n\n\t\t// Non-expanded quoted string\n\t\t// qstring<open>.<close>\n\t\t//  open = open delimiter\n\t\t//  close = close delimiter\n\t\tqstring: [\n\t\t\t[/\\\\./, 'string.escape'],\n\t\t\t[\n\t\t\t\t/./,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'$#==$S3': { token: 'string.delim', next: '@pop' },\n\t\t\t\t\t\t'$#==$S2': { token: 'string.delim', next: '@push' }, // nested delimiters\n\t\t\t\t\t\t'@default': 'string'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t],\n\n\t\t// Quoted regexp\n\t\t// qregexp.<open>.<close>\n\t\t//  open = open delimiter\n\t\t//  close = close delimiter\n\t\tqregexp: [\n\t\t\t{ include: '@variables' },\n\t\t\t[/\\\\./, 'regexp.escape'],\n\t\t\t[\n\t\t\t\t/./,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'$#==$S3': {\n\t\t\t\t\t\t\ttoken: 'regexp.delim',\n\t\t\t\t\t\t\tnext: '@regexpModifiers'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'$#==$S2': { token: 'regexp.delim', next: '@push' }, // nested delimiters\n\t\t\t\t\t\t'@default': 'regexp'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t],\n\n\t\tregexpModifiers: [[/[msixpodualngcer]+/, { token: 'regexp.modifier', next: '@popall' }]],\n\n\t\t// Expanded quoted string\n\t\t// qqstring.<open>.<close>\n\t\t//  open = open delimiter\n\t\t//  close = close delimiter\n\t\tqqstring: [{ include: '@variables' }, { include: '@qstring' }],\n\n\t\theredoc: [\n\t\t\t[/<<\\s*['\"`]?([\\w\\-]+)['\"`]?/, { token: 'string.heredoc.delimiter', next: '@heredocBody.$1' }]\n\t\t],\n\n\t\theredocBody: [\n\t\t\t[\n\t\t\t\t/^([\\w\\-]+)$/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'$1==$S2': [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttoken: 'string.heredoc.delimiter',\n\t\t\t\t\t\t\t\tnext: '@popall'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t],\n\t\t\t\t\t\t'@default': 'string.heredoc'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/./, 'string.heredoc']\n\t\t],\n\n\t\tperldoc: [[/^=\\w/, 'comment.doc', '@perldocBody']],\n\n\t\tperldocBody: [\n\t\t\t[/^=cut\\b/, 'type.identifier', '@popall'],\n\t\t\t[/./, 'comment.doc']\n\t\t],\n\n\t\tvariables: [\n\t\t\t[/\\$\\w+/, 'variable'], // scalar\n\t\t\t[/@\\w+/, 'variable'], // array\n\t\t\t[/%\\w+/, 'variable'] // key/value\n\t\t]\n\t}\n}",
  "pgsql": "<languages.IMonarchLanguage>{\n\tdefaultToken: '',\n\ttokenPostfix: '.sql',\n\tignoreCase: true,\n\n\tbrackets: [\n\t\t{ open: '[', close: ']', token: 'delimiter.square' },\n\t\t{ open: '(', close: ')', token: 'delimiter.parenthesis' }\n\t],\n\n\tkeywords: [\n\t\t// This list is generated using `keywords.js`\n\t\t'ALL',\n\t\t'ANALYSE',\n\t\t'ANALYZE',\n\t\t'AND',\n\t\t'ANY',\n\t\t'ARRAY',\n\t\t'AS',\n\t\t'ASC',\n\t\t'ASYMMETRIC',\n\t\t'AUTHORIZATION',\n\t\t'BINARY',\n\t\t'BOTH',\n\t\t'CASE',\n\t\t'CAST',\n\t\t'CHECK',\n\t\t'COLLATE',\n\t\t'COLLATION',\n\t\t'COLUMN',\n\t\t'CONCURRENTLY',\n\t\t'CONSTRAINT',\n\t\t'CREATE',\n\t\t'CROSS',\n\t\t'CURRENT_CATALOG',\n\t\t'CURRENT_DATE',\n\t\t'CURRENT_ROLE',\n\t\t'CURRENT_SCHEMA',\n\t\t'CURRENT_TIME',\n\t\t'CURRENT_TIMESTAMP',\n\t\t'CURRENT_USER',\n\t\t'DEFAULT',\n\t\t'DEFERRABLE',\n\t\t'DESC',\n\t\t'DISTINCT',\n\t\t'DO',\n\t\t'ELSE',\n\t\t'END',\n\t\t'EXCEPT',\n\t\t'FALSE',\n\t\t'FETCH',\n\t\t'FOR',\n\t\t'FOREIGN',\n\t\t'FREEZE',\n\t\t'FROM',\n\t\t'FULL',\n\t\t'GRANT',\n\t\t'GROUP',\n\t\t'HAVING',\n\t\t'ILIKE',\n\t\t'IN',\n\t\t'INITIALLY',\n\t\t'INNER',\n\t\t'INTERSECT',\n\t\t'INTO',\n\t\t'IS',\n\t\t'ISNULL',\n\t\t'JOIN',\n\t\t'LATERAL',\n\t\t'LEADING',\n\t\t'LEFT',\n\t\t'LIKE',\n\t\t'LIMIT',\n\t\t'LOCALTIME',\n\t\t'LOCALTIMESTAMP',\n\t\t'NATURAL',\n\t\t'NOT',\n\t\t'NOTNULL',\n\t\t'NULL',\n\t\t'OFFSET',\n\t\t'ON',\n\t\t'ONLY',\n\t\t'OR',\n\t\t'ORDER',\n\t\t'OUTER',\n\t\t'OVERLAPS',\n\t\t'PLACING',\n\t\t'PRIMARY',\n\t\t'REFERENCES',\n\t\t'RETURNING',\n\t\t'RIGHT',\n\t\t'SELECT',\n\t\t'SESSION_USER',\n\t\t'SIMILAR',\n\t\t'SOME',\n\t\t'SYMMETRIC',\n\t\t'TABLE',\n\t\t'TABLESAMPLE',\n\t\t'THEN',\n\t\t'TO',\n\t\t'TRAILING',\n\t\t'TRUE',\n\t\t'UNION',\n\t\t'UNIQUE',\n\t\t'USER',\n\t\t'USING',\n\t\t'VARIADIC',\n\t\t'VERBOSE',\n\t\t'WHEN',\n\t\t'WHERE',\n\t\t'WINDOW',\n\t\t'WITH'\n\t],\n\toperators: [\n\t\t'AND',\n\t\t'BETWEEN',\n\t\t'IN',\n\t\t'LIKE',\n\t\t'NOT',\n\t\t'OR',\n\t\t'IS',\n\t\t'NULL',\n\t\t'INTERSECT',\n\t\t'UNION',\n\t\t'INNER',\n\t\t'JOIN',\n\t\t'LEFT',\n\t\t'OUTER',\n\t\t'RIGHT'\n\t],\n\tbuiltinFunctions: [\n\t\t'abbrev',\n\t\t'abs',\n\t\t'acldefault',\n\t\t'aclexplode',\n\t\t'acos',\n\t\t'acosd',\n\t\t'acosh',\n\t\t'age',\n\t\t'any',\n\t\t'area',\n\t\t'array_agg',\n\t\t'array_append',\n\t\t'array_cat',\n\t\t'array_dims',\n\t\t'array_fill',\n\t\t'array_length',\n\t\t'array_lower',\n\t\t'array_ndims',\n\t\t'array_position',\n\t\t'array_positions',\n\t\t'array_prepend',\n\t\t'array_remove',\n\t\t'array_replace',\n\t\t'array_to_json',\n\t\t'array_to_string',\n\t\t'array_to_tsvector',\n\t\t'array_upper',\n\t\t'ascii',\n\t\t'asin',\n\t\t'asind',\n\t\t'asinh',\n\t\t'atan',\n\t\t'atan2',\n\t\t'atan2d',\n\t\t'atand',\n\t\t'atanh',\n\t\t'avg',\n\t\t'bit',\n\t\t'bit_and',\n\t\t'bit_count',\n\t\t'bit_length',\n\t\t'bit_or',\n\t\t'bit_xor',\n\t\t'bool_and',\n\t\t'bool_or',\n\t\t'bound_box',\n\t\t'box',\n\t\t'brin_desummarize_range',\n\t\t'brin_summarize_new_values',\n\t\t'brin_summarize_range',\n\t\t'broadcast',\n\t\t'btrim',\n\t\t'cardinality',\n\t\t'cbrt',\n\t\t'ceil',\n\t\t'ceiling',\n\t\t'center',\n\t\t'char_length',\n\t\t'character_length',\n\t\t'chr',\n\t\t'circle',\n\t\t'clock_timestamp',\n\t\t'coalesce',\n\t\t'col_description',\n\t\t'concat',\n\t\t'concat_ws',\n\t\t'convert',\n\t\t'convert_from',\n\t\t'convert_to',\n\t\t'corr',\n\t\t'cos',\n\t\t'cosd',\n\t\t'cosh',\n\t\t'cot',\n\t\t'cotd',\n\t\t'count',\n\t\t'covar_pop',\n\t\t'covar_samp',\n\t\t'cume_dist',\n\t\t'current_catalog',\n\t\t'current_database',\n\t\t'current_date',\n\t\t'current_query',\n\t\t'current_role',\n\t\t'current_schema',\n\t\t'current_schemas',\n\t\t'current_setting',\n\t\t'current_time',\n\t\t'current_timestamp',\n\t\t'current_user',\n\t\t'currval',\n\t\t'cursor_to_xml',\n\t\t'cursor_to_xmlschema',\n\t\t'date_bin',\n\t\t'date_part',\n\t\t'date_trunc',\n\t\t'database_to_xml',\n\t\t'database_to_xml_and_xmlschema',\n\t\t'database_to_xmlschema',\n\t\t'decode',\n\t\t'degrees',\n\t\t'dense_rank',\n\t\t'diagonal',\n\t\t'diameter',\n\t\t'div',\n\t\t'encode',\n\t\t'enum_first',\n\t\t'enum_last',\n\t\t'enum_range',\n\t\t'every',\n\t\t'exp',\n\t\t'extract',\n\t\t'factorial',\n\t\t'family',\n\t\t'first_value',\n\t\t'floor',\n\t\t'format',\n\t\t'format_type',\n\t\t'gcd',\n\t\t'gen_random_uuid',\n\t\t'generate_series',\n\t\t'generate_subscripts',\n\t\t'get_bit',\n\t\t'get_byte',\n\t\t'get_current_ts_config',\n\t\t'gin_clean_pending_list',\n\t\t'greatest',\n\t\t'grouping',\n\t\t'has_any_column_privilege',\n\t\t'has_column_privilege',\n\t\t'has_database_privilege',\n\t\t'has_foreign_data_wrapper_privilege',\n\t\t'has_function_privilege',\n\t\t'has_language_privilege',\n\t\t'has_schema_privilege',\n\t\t'has_sequence_privilege',\n\t\t'has_server_privilege',\n\t\t'has_table_privilege',\n\t\t'has_tablespace_privilege',\n\t\t'has_type_privilege',\n\t\t'height',\n\t\t'host',\n\t\t'hostmask',\n\t\t'inet_client_addr',\n\t\t'inet_client_port',\n\t\t'inet_merge',\n\t\t'inet_same_family',\n\t\t'inet_server_addr',\n\t\t'inet_server_port',\n\t\t'initcap',\n\t\t'isclosed',\n\t\t'isempty',\n\t\t'isfinite',\n\t\t'isopen',\n\t\t'json_agg',\n\t\t'json_array_elements',\n\t\t'json_array_elements_text',\n\t\t'json_array_length',\n\t\t'json_build_array',\n\t\t'json_build_object',\n\t\t'json_each',\n\t\t'json_each_text',\n\t\t'json_extract_path',\n\t\t'json_extract_path_text',\n\t\t'json_object',\n\t\t'json_object_agg',\n\t\t'json_object_keys',\n\t\t'json_populate_record',\n\t\t'json_populate_recordset',\n\t\t'json_strip_nulls',\n\t\t'json_to_record',\n\t\t'json_to_recordset',\n\t\t'json_to_tsvector',\n\t\t'json_typeof',\n\t\t'jsonb_agg',\n\t\t'jsonb_array_elements',\n\t\t'jsonb_array_elements_text',\n\t\t'jsonb_array_length',\n\t\t'jsonb_build_array',\n\t\t'jsonb_build_object',\n\t\t'jsonb_each',\n\t\t'jsonb_each_text',\n\t\t'jsonb_extract_path',\n\t\t'jsonb_extract_path_text',\n\t\t'jsonb_insert',\n\t\t'jsonb_object',\n\t\t'jsonb_object_agg',\n\t\t'jsonb_object_keys',\n\t\t'jsonb_path_exists',\n\t\t'jsonb_path_match',\n\t\t'jsonb_path_query',\n\t\t'jsonb_path_query_array',\n\t\t'jsonb_path_exists_tz',\n\t\t'jsonb_path_query_first',\n\t\t'jsonb_path_query_array_tz',\n\t\t'jsonb_path_query_first_tz',\n\t\t'jsonb_path_query_tz',\n\t\t'jsonb_path_match_tz',\n\t\t'jsonb_populate_record',\n\t\t'jsonb_populate_recordset',\n\t\t'jsonb_pretty',\n\t\t'jsonb_set',\n\t\t'jsonb_set_lax',\n\t\t'jsonb_strip_nulls',\n\t\t'jsonb_to_record',\n\t\t'jsonb_to_recordset',\n\t\t'jsonb_to_tsvector',\n\t\t'jsonb_typeof',\n\t\t'justify_days',\n\t\t'justify_hours',\n\t\t'justify_interval',\n\t\t'lag',\n\t\t'last_value',\n\t\t'lastval',\n\t\t'lcm',\n\t\t'lead',\n\t\t'least',\n\t\t'left',\n\t\t'length',\n\t\t'line',\n\t\t'ln',\n\t\t'localtime',\n\t\t'localtimestamp',\n\t\t'log',\n\t\t'log10',\n\t\t'lower',\n\t\t'lower_inc',\n\t\t'lower_inf',\n\t\t'lpad',\n\t\t'lseg',\n\t\t'ltrim',\n\t\t'macaddr8_set7bit',\n\t\t'make_date',\n\t\t'make_interval',\n\t\t'make_time',\n\t\t'make_timestamp',\n\t\t'make_timestamptz',\n\t\t'makeaclitem',\n\t\t'masklen',\n\t\t'max',\n\t\t'md5',\n\t\t'min',\n\t\t'min_scale',\n\t\t'mod',\n\t\t'mode',\n\t\t'multirange',\n\t\t'netmask',\n\t\t'network',\n\t\t'nextval',\n\t\t'normalize',\n\t\t'now',\n\t\t'npoints',\n\t\t'nth_value',\n\t\t'ntile',\n\t\t'nullif',\n\t\t'num_nonnulls',\n\t\t'num_nulls',\n\t\t'numnode',\n\t\t'obj_description',\n\t\t'octet_length',\n\t\t'overlay',\n\t\t'parse_ident',\n\t\t'path',\n\t\t'pclose',\n\t\t'percent_rank',\n\t\t'percentile_cont',\n\t\t'percentile_disc',\n\t\t'pg_advisory_lock',\n\t\t'pg_advisory_lock_shared',\n\t\t'pg_advisory_unlock',\n\t\t'pg_advisory_unlock_all',\n\t\t'pg_advisory_unlock_shared',\n\t\t'pg_advisory_xact_lock',\n\t\t'pg_advisory_xact_lock_shared',\n\t\t'pg_backend_pid',\n\t\t'pg_backup_start_time',\n\t\t'pg_blocking_pids',\n\t\t'pg_cancel_backend',\n\t\t'pg_client_encoding',\n\t\t'pg_collation_actual_version',\n\t\t'pg_collation_is_visible',\n\t\t'pg_column_compression',\n\t\t'pg_column_size',\n\t\t'pg_conf_load_time',\n\t\t'pg_control_checkpoint',\n\t\t'pg_control_init',\n\t\t'pg_control_recovery',\n\t\t'pg_control_system',\n\t\t'pg_conversion_is_visible',\n\t\t'pg_copy_logical_replication_slot',\n\t\t'pg_copy_physical_replication_slot',\n\t\t'pg_create_logical_replication_slot',\n\t\t'pg_create_physical_replication_slot',\n\t\t'pg_create_restore_point',\n\t\t'pg_current_logfile',\n\t\t'pg_current_snapshot',\n\t\t'pg_current_wal_flush_lsn',\n\t\t'pg_current_wal_insert_lsn',\n\t\t'pg_current_wal_lsn',\n\t\t'pg_current_xact_id',\n\t\t'pg_current_xact_id_if_assigned',\n\t\t'pg_current_xlog_flush_location',\n\t\t'pg_current_xlog_insert_location',\n\t\t'pg_current_xlog_location',\n\t\t'pg_database_size',\n\t\t'pg_describe_object',\n\t\t'pg_drop_replication_slot',\n\t\t'pg_event_trigger_ddl_commands',\n\t\t'pg_event_trigger_dropped_objects',\n\t\t'pg_event_trigger_table_rewrite_oid',\n\t\t'pg_event_trigger_table_rewrite_reason',\n\t\t'pg_export_snapshot',\n\t\t'pg_filenode_relation',\n\t\t'pg_function_is_visible',\n\t\t'pg_get_catalog_foreign_keys',\n\t\t'pg_get_constraintdef',\n\t\t'pg_get_expr',\n\t\t'pg_get_function_arguments',\n\t\t'pg_get_function_identity_arguments',\n\t\t'pg_get_function_result',\n\t\t'pg_get_functiondef',\n\t\t'pg_get_indexdef',\n\t\t'pg_get_keywords',\n\t\t'pg_get_object_address',\n\t\t'pg_get_owned_sequence',\n\t\t'pg_get_ruledef',\n\t\t'pg_get_serial_sequence',\n\t\t'pg_get_statisticsobjdef',\n\t\t'pg_get_triggerdef',\n\t\t'pg_get_userbyid',\n\t\t'pg_get_viewdef',\n\t\t'pg_get_wal_replay_pause_state',\n\t\t'pg_has_role',\n\t\t'pg_identify_object',\n\t\t'pg_identify_object_as_address',\n\t\t'pg_import_system_collations',\n\t\t'pg_index_column_has_property',\n\t\t'pg_index_has_property',\n\t\t'pg_indexam_has_property',\n\t\t'pg_indexes_size',\n\t\t'pg_is_in_backup',\n\t\t'pg_is_in_recovery',\n\t\t'pg_is_other_temp_schema',\n\t\t'pg_is_wal_replay_paused',\n\t\t'pg_is_xlog_replay_paused',\n\t\t'pg_jit_available',\n\t\t'pg_last_committed_xact',\n\t\t'pg_last_wal_receive_lsn',\n\t\t'pg_last_wal_replay_lsn',\n\t\t'pg_last_xact_replay_timestamp',\n\t\t'pg_last_xlog_receive_location',\n\t\t'pg_last_xlog_replay_location',\n\t\t'pg_listening_channels',\n\t\t'pg_log_backend_memory_contexts',\n\t\t'pg_logical_emit_message',\n\t\t'pg_logical_slot_get_binary_changes',\n\t\t'pg_logical_slot_get_changes',\n\t\t'pg_logical_slot_peek_binary_changes',\n\t\t'pg_logical_slot_peek_changes',\n\t\t'pg_ls_archive_statusdir',\n\t\t'pg_ls_dir',\n\t\t'pg_ls_logdir',\n\t\t'pg_ls_tmpdir',\n\t\t'pg_ls_waldir',\n\t\t'pg_mcv_list_items',\n\t\t'pg_my_temp_schema',\n\t\t'pg_notification_queue_usage',\n\t\t'pg_opclass_is_visible',\n\t\t'pg_operator_is_visible',\n\t\t'pg_opfamily_is_visible',\n\t\t'pg_options_to_table',\n\t\t'pg_partition_ancestors',\n\t\t'pg_partition_root',\n\t\t'pg_partition_tree',\n\t\t'pg_postmaster_start_time',\n\t\t'pg_promote',\n\t\t'pg_read_binary_file',\n\t\t'pg_read_file',\n\t\t'pg_relation_filenode',\n\t\t'pg_relation_filepath',\n\t\t'pg_relation_size',\n\t\t'pg_reload_conf',\n\t\t'pg_replication_origin_advance',\n\t\t'pg_replication_origin_create',\n\t\t'pg_replication_origin_drop',\n\t\t'pg_replication_origin_oid',\n\t\t'pg_replication_origin_progress',\n\t\t'pg_replication_origin_session_is_setup',\n\t\t'pg_replication_origin_session_progress',\n\t\t'pg_replication_origin_session_reset',\n\t\t'pg_replication_origin_session_setup',\n\t\t'pg_replication_origin_xact_reset',\n\t\t'pg_replication_origin_xact_setup',\n\t\t'pg_replication_slot_advance',\n\t\t'pg_rotate_logfile',\n\t\t'pg_safe_snapshot_blocking_pids',\n\t\t'pg_size_bytes',\n\t\t'pg_size_pretty',\n\t\t'pg_sleep',\n\t\t'pg_sleep_for',\n\t\t'pg_sleep_until',\n\t\t'pg_snapshot_xip',\n\t\t'pg_snapshot_xmax',\n\t\t'pg_snapshot_xmin',\n\t\t'pg_start_backup',\n\t\t'pg_stat_file',\n\t\t'pg_statistics_obj_is_visible',\n\t\t'pg_stop_backup',\n\t\t'pg_switch_wal',\n\t\t'pg_switch_xlog',\n\t\t'pg_table_is_visible',\n\t\t'pg_table_size',\n\t\t'pg_tablespace_databases',\n\t\t'pg_tablespace_location',\n\t\t'pg_tablespace_size',\n\t\t'pg_terminate_backend',\n\t\t'pg_total_relation_size',\n\t\t'pg_trigger_depth',\n\t\t'pg_try_advisory_lock',\n\t\t'pg_try_advisory_lock_shared',\n\t\t'pg_try_advisory_xact_lock',\n\t\t'pg_try_advisory_xact_lock_shared',\n\t\t'pg_ts_config_is_visible',\n\t\t'pg_ts_dict_is_visible',\n\t\t'pg_ts_parser_is_visible',\n\t\t'pg_ts_template_is_visible',\n\t\t'pg_type_is_visible',\n\t\t'pg_typeof',\n\t\t'pg_visible_in_snapshot',\n\t\t'pg_wal_lsn_diff',\n\t\t'pg_wal_replay_pause',\n\t\t'pg_wal_replay_resume',\n\t\t'pg_walfile_name',\n\t\t'pg_walfile_name_offset',\n\t\t'pg_xact_commit_timestamp',\n\t\t'pg_xact_commit_timestamp_origin',\n\t\t'pg_xact_status',\n\t\t'pg_xlog_location_diff',\n\t\t'pg_xlog_replay_pause',\n\t\t'pg_xlog_replay_resume',\n\t\t'pg_xlogfile_name',\n\t\t'pg_xlogfile_name_offset',\n\t\t'phraseto_tsquery',\n\t\t'pi',\n\t\t'plainto_tsquery',\n\t\t'point',\n\t\t'polygon',\n\t\t'popen',\n\t\t'position',\n\t\t'power',\n\t\t'pqserverversion',\n\t\t'query_to_xml',\n\t\t'query_to_xml_and_xmlschema',\n\t\t'query_to_xmlschema',\n\t\t'querytree',\n\t\t'quote_ident',\n\t\t'quote_literal',\n\t\t'quote_nullable',\n\t\t'radians',\n\t\t'radius',\n\t\t'random',\n\t\t'range_agg',\n\t\t'range_intersect_agg',\n\t\t'range_merge',\n\t\t'rank',\n\t\t'regexp_count',\n\t\t'regexp_instr',\n\t\t'regexp_like',\n\t\t'regexp_match',\n\t\t'regexp_matches',\n\t\t'regexp_replace',\n\t\t'regexp_split_to_array',\n\t\t'regexp_split_to_table',\n\t\t'regexp_substr',\n\t\t'regr_avgx',\n\t\t'regr_avgy',\n\t\t'regr_count',\n\t\t'regr_intercept',\n\t\t'regr_r2',\n\t\t'regr_slope',\n\t\t'regr_sxx',\n\t\t'regr_sxy',\n\t\t'regr_syy',\n\t\t'repeat',\n\t\t'replace',\n\t\t'reverse',\n\t\t'right',\n\t\t'round',\n\t\t'row_number',\n\t\t'row_security_active',\n\t\t'row_to_json',\n\t\t'rpad',\n\t\t'rtrim',\n\t\t'scale',\n\t\t'schema_to_xml',\n\t\t'schema_to_xml_and_xmlschema',\n\t\t'schema_to_xmlschema',\n\t\t'session_user',\n\t\t'set_bit',\n\t\t'set_byte',\n\t\t'set_config',\n\t\t'set_masklen',\n\t\t'setseed',\n\t\t'setval',\n\t\t'setweight',\n\t\t'sha224',\n\t\t'sha256',\n\t\t'sha384',\n\t\t'sha512',\n\t\t'shobj_description',\n\t\t'sign',\n\t\t'sin',\n\t\t'sind',\n\t\t'sinh',\n\t\t'slope',\n\t\t'split_part',\n\t\t'sprintf',\n\t\t'sqrt',\n\t\t'starts_with',\n\t\t'statement_timestamp',\n\t\t'stddev',\n\t\t'stddev_pop',\n\t\t'stddev_samp',\n\t\t'string_agg',\n\t\t'string_to_array',\n\t\t'string_to_table',\n\t\t'strip',\n\t\t'strpos',\n\t\t'substr',\n\t\t'substring',\n\t\t'sum',\n\t\t'suppress_redundant_updates_trigger',\n\t\t'table_to_xml',\n\t\t'table_to_xml_and_xmlschema',\n\t\t'table_to_xmlschema',\n\t\t'tan',\n\t\t'tand',\n\t\t'tanh',\n\t\t'text',\n\t\t'timeofday',\n\t\t'timezone',\n\t\t'to_ascii',\n\t\t'to_char',\n\t\t'to_date',\n\t\t'to_hex',\n\t\t'to_json',\n\t\t'to_number',\n\t\t'to_regclass',\n\t\t'to_regcollation',\n\t\t'to_regnamespace',\n\t\t'to_regoper',\n\t\t'to_regoperator',\n\t\t'to_regproc',\n\t\t'to_regprocedure',\n\t\t'to_regrole',\n\t\t'to_regtype',\n\t\t'to_timestamp',\n\t\t'to_tsquery',\n\t\t'to_tsvector',\n\t\t'transaction_timestamp',\n\t\t'translate',\n\t\t'trim',\n\t\t'trim_array',\n\t\t'trim_scale',\n\t\t'trunc',\n\t\t'ts_debug',\n\t\t'ts_delete',\n\t\t'ts_filter',\n\t\t'ts_headline',\n\t\t'ts_lexize',\n\t\t'ts_parse',\n\t\t'ts_rank',\n\t\t'ts_rank_cd',\n\t\t'ts_rewrite',\n\t\t'ts_stat',\n\t\t'ts_token_type',\n\t\t'tsquery_phrase',\n\t\t'tsvector_to_array',\n\t\t'tsvector_update_trigger',\n\t\t'tsvector_update_trigger_column',\n\t\t'txid_current',\n\t\t'txid_current_if_assigned',\n\t\t'txid_current_snapshot',\n\t\t'txid_snapshot_xip',\n\t\t'txid_snapshot_xmax',\n\t\t'txid_snapshot_xmin',\n\t\t'txid_status',\n\t\t'txid_visible_in_snapshot',\n\t\t'unistr',\n\t\t'unnest',\n\t\t'upper',\n\t\t'upper_inc',\n\t\t'upper_inf',\n\t\t'user',\n\t\t'var_pop',\n\t\t'var_samp',\n\t\t'variance',\n\t\t'version',\n\t\t'websearch_to_tsquery',\n\t\t'width',\n\t\t'width_bucket',\n\t\t'xml_is_well_formed',\n\t\t'xml_is_well_formed_content',\n\t\t'xml_is_well_formed_document',\n\t\t'xmlagg',\n\t\t'xmlcomment',\n\t\t'xmlconcat',\n\t\t'xmlelement',\n\t\t'xmlexists',\n\t\t'xmlforest',\n\t\t'xmlparse',\n\t\t'xmlpi',\n\t\t'xmlroot',\n\t\t'xmlserialize',\n\t\t'xpath',\n\t\t'xpath_exists'\n\t],\n\tbuiltinVariables: [\n\t\t// NOT SUPPORTED\n\t],\n\tpseudoColumns: [\n\t\t// NOT SUPPORTED\n\t],\n\ttokenizer: {\n\t\troot: [\n\t\t\t{ include: '@comments' },\n\t\t\t{ include: '@whitespace' },\n\t\t\t{ include: '@pseudoColumns' },\n\t\t\t{ include: '@numbers' },\n\t\t\t{ include: '@strings' },\n\t\t\t{ include: '@complexIdentifiers' },\n\t\t\t{ include: '@scopes' },\n\t\t\t[/[;,.]/, 'delimiter'],\n\t\t\t[/[()]/, '@brackets'],\n\t\t\t[\n\t\t\t\t/[\\w@#$]+/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@operators': 'operator',\n\t\t\t\t\t\t'@builtinVariables': 'predefined',\n\t\t\t\t\t\t'@builtinFunctions': 'predefined',\n\t\t\t\t\t\t'@keywords': 'keyword',\n\t\t\t\t\t\t'@default': 'identifier'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/[<>=!%&+\\-*/|~^]/, 'operator']\n\t\t],\n\t\twhitespace: [[/\\s+/, 'white']],\n\t\tcomments: [\n\t\t\t[/--+.*/, 'comment'],\n\t\t\t[/\\/\\*/, { token: 'comment.quote', next: '@comment' }]\n\t\t],\n\t\tcomment: [\n\t\t\t[/[^*/]+/, 'comment'],\n\t\t\t// Not supporting nested comments, as nested comments seem to not be standard?\n\t\t\t// i.e. http://stackoverflow.com/questions/728172/are-there-multiline-comment-delimiters-in-sql-that-are-vendor-agnostic\n\t\t\t// [/\\/\\*/, { token: 'comment.quote', next: '@push' }],    // nested comment not allowed :-(\n\t\t\t[/\\*\\//, { token: 'comment.quote', next: '@pop' }],\n\t\t\t[/./, 'comment']\n\t\t],\n\t\tpseudoColumns: [\n\t\t\t[\n\t\t\t\t/[$][A-Za-z_][\\w@#$]*/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@pseudoColumns': 'predefined',\n\t\t\t\t\t\t'@default': 'identifier'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t],\n\t\tnumbers: [\n\t\t\t[/0[xX][0-9a-fA-F]*/, 'number'],\n\t\t\t[/[$][+-]*\\d*(\\.\\d*)?/, 'number'],\n\t\t\t[/((\\d+(\\.\\d*)?)|(\\.\\d+))([eE][\\-+]?\\d+)?/, 'number']\n\t\t],\n\t\tstrings: [[/'/, { token: 'string', next: '@string' }]],\n\t\tstring: [\n\t\t\t[/[^']+/, 'string'],\n\t\t\t[/''/, 'string'],\n\t\t\t[/'/, { token: 'string', next: '@pop' }]\n\t\t],\n\t\tcomplexIdentifiers: [[/\"/, { token: 'identifier.quote', next: '@quotedIdentifier' }]],\n\t\tquotedIdentifier: [\n\t\t\t[/[^\"]+/, 'identifier'],\n\t\t\t[/\"\"/, 'identifier'],\n\t\t\t[/\"/, { token: 'identifier.quote', next: '@pop' }]\n\t\t],\n\t\tscopes: [\n\t\t\t// NOT SUPPORTED\n\t\t]\n\t}\n}",
  "php": "<languages.IMonarchLanguage>{\n\tdefaultToken: '',\n\ttokenPostfix: '',\n\t// ignoreCase: true,\n\n\t// The main tokenizer for our languages\n\ttokenizer: {\n\t\troot: [\n\t\t\t[/<\\?((php)|=)?/, { token: '@rematch', switchTo: '@phpInSimpleState.root' }],\n\t\t\t[/<!DOCTYPE/, 'metatag.html', '@doctype'],\n\t\t\t[/<!--/, 'comment.html', '@comment'],\n\t\t\t[/(<)(\\w+)(\\/>)/, ['delimiter.html', 'tag.html', 'delimiter.html']],\n\t\t\t[/(<)(script)/, ['delimiter.html', { token: 'tag.html', next: '@script' }]],\n\t\t\t[/(<)(style)/, ['delimiter.html', { token: 'tag.html', next: '@style' }]],\n\t\t\t[/(<)([:\\w]+)/, ['delimiter.html', { token: 'tag.html', next: '@otherTag' }]],\n\t\t\t[/(<\\/)(\\w+)/, ['delimiter.html', { token: 'tag.html', next: '@otherTag' }]],\n\t\t\t[/</, 'delimiter.html'],\n\t\t\t[/[^<]+/] // text\n\t\t],\n\n\t\tdoctype: [\n\t\t\t[/<\\?((php)|=)?/, { token: '@rematch', switchTo: '@phpInSimpleState.comment' }],\n\t\t\t[/[^>]+/, 'metatag.content.html'],\n\t\t\t[/>/, 'metatag.html', '@pop']\n\t\t],\n\n\t\tcomment: [\n\t\t\t[/<\\?((php)|=)?/, { token: '@rematch', switchTo: '@phpInSimpleState.comment' }],\n\t\t\t[/-->/, 'comment.html', '@pop'],\n\t\t\t[/[^-]+/, 'comment.content.html'],\n\t\t\t[/./, 'comment.content.html']\n\t\t],\n\n\t\totherTag: [\n\t\t\t[/<\\?((php)|=)?/, { token: '@rematch', switchTo: '@phpInSimpleState.otherTag' }],\n\t\t\t[/\\/?>/, 'delimiter.html', '@pop'],\n\t\t\t[/\"([^\"]*)\"/, 'attribute.value'],\n\t\t\t[/'([^']*)'/, 'attribute.value'],\n\t\t\t[/[\\w\\-]+/, 'attribute.name'],\n\t\t\t[/=/, 'delimiter'],\n\t\t\t[/[ \\t\\r\\n]+/] // whitespace\n\t\t],\n\n\t\t// -- BEGIN <script> tags handling\n\n\t\t// After <script\n\t\tscript: [\n\t\t\t[/<\\?((php)|=)?/, { token: '@rematch', switchTo: '@phpInSimpleState.script' }],\n\t\t\t[/type/, 'attribute.name', '@scriptAfterType'],\n\t\t\t[/\"([^\"]*)\"/, 'attribute.value'],\n\t\t\t[/'([^']*)'/, 'attribute.value'],\n\t\t\t[/[\\w\\-]+/, 'attribute.name'],\n\t\t\t[/=/, 'delimiter'],\n\t\t\t[\n\t\t\t\t/>/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'delimiter.html',\n\t\t\t\t\tnext: '@scriptEmbedded.text/javascript',\n\t\t\t\t\tnextEmbedded: 'text/javascript'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/[ \\t\\r\\n]+/], // whitespace\n\t\t\t[\n\t\t\t\t/(<\\/)(script\\s*)(>)/,\n\t\t\t\t['delimiter.html', 'tag.html', { token: 'delimiter.html', next: '@pop' }]\n\t\t\t]\n\t\t],\n\n\t\t// After <script ... type\n\t\tscriptAfterType: [\n\t\t\t[\n\t\t\t\t/<\\?((php)|=)?/,\n\t\t\t\t{\n\t\t\t\t\ttoken: '@rematch',\n\t\t\t\t\tswitchTo: '@phpInSimpleState.scriptAfterType'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/=/, 'delimiter', '@scriptAfterTypeEquals'],\n\t\t\t[\n\t\t\t\t/>/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'delimiter.html',\n\t\t\t\t\tnext: '@scriptEmbedded.text/javascript',\n\t\t\t\t\tnextEmbedded: 'text/javascript'\n\t\t\t\t}\n\t\t\t], // cover invalid e.g. <script type>\n\t\t\t[/[ \\t\\r\\n]+/], // whitespace\n\t\t\t[/<\\/script\\s*>/, { token: '@rematch', next: '@pop' }]\n\t\t],\n\n\t\t// After <script ... type =\n\t\tscriptAfterTypeEquals: [\n\t\t\t[\n\t\t\t\t/<\\?((php)|=)?/,\n\t\t\t\t{\n\t\t\t\t\ttoken: '@rematch',\n\t\t\t\t\tswitchTo: '@phpInSimpleState.scriptAfterTypeEquals'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[\n\t\t\t\t/\"([^\"]*)\"/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'attribute.value',\n\t\t\t\t\tswitchTo: '@scriptWithCustomType.$1'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[\n\t\t\t\t/'([^']*)'/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'attribute.value',\n\t\t\t\t\tswitchTo: '@scriptWithCustomType.$1'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[\n\t\t\t\t/>/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'delimiter.html',\n\t\t\t\t\tnext: '@scriptEmbedded.text/javascript',\n\t\t\t\t\tnextEmbedded: 'text/javascript'\n\t\t\t\t}\n\t\t\t], // cover invalid e.g. <script type=>\n\t\t\t[/[ \\t\\r\\n]+/], // whitespace\n\t\t\t[/<\\/script\\s*>/, { token: '@rematch', next: '@pop' }]\n\t\t],\n\n\t\t// After <script ... type = $S2\n\t\tscriptWithCustomType: [\n\t\t\t[\n\t\t\t\t/<\\?((php)|=)?/,\n\t\t\t\t{\n\t\t\t\t\ttoken: '@rematch',\n\t\t\t\t\tswitchTo: '@phpInSimpleState.scriptWithCustomType.$S2'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[\n\t\t\t\t/>/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'delimiter.html',\n\t\t\t\t\tnext: '@scriptEmbedded.$S2',\n\t\t\t\t\tnextEmbedded: '$S2'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/\"([^\"]*)\"/, 'attribute.value'],\n\t\t\t[/'([^']*)'/, 'attribute.value'],\n\t\t\t[/[\\w\\-]+/, 'attribute.name'],\n\t\t\t[/=/, 'delimiter'],\n\t\t\t[/[ \\t\\r\\n]+/], // whitespace\n\t\t\t[/<\\/script\\s*>/, { token: '@rematch', next: '@pop' }]\n\t\t],\n\n\t\tscriptEmbedded: [\n\t\t\t[\n\t\t\t\t/<\\?((php)|=)?/,\n\t\t\t\t{\n\t\t\t\t\ttoken: '@rematch',\n\t\t\t\t\tswitchTo: '@phpInEmbeddedState.scriptEmbedded.$S2',\n\t\t\t\t\tnextEmbedded: '@pop'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/<\\/script/, { token: '@rematch', next: '@pop', nextEmbedded: '@pop' }]\n\t\t],\n\n\t\t// -- END <script> tags handling\n\n\t\t// -- BEGIN <style> tags handling\n\n\t\t// After <style\n\t\tstyle: [\n\t\t\t[/<\\?((php)|=)?/, { token: '@rematch', switchTo: '@phpInSimpleState.style' }],\n\t\t\t[/type/, 'attribute.name', '@styleAfterType'],\n\t\t\t[/\"([^\"]*)\"/, 'attribute.value'],\n\t\t\t[/'([^']*)'/, 'attribute.value'],\n\t\t\t[/[\\w\\-]+/, 'attribute.name'],\n\t\t\t[/=/, 'delimiter'],\n\t\t\t[\n\t\t\t\t/>/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'delimiter.html',\n\t\t\t\t\tnext: '@styleEmbedded.text/css',\n\t\t\t\t\tnextEmbedded: 'text/css'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/[ \\t\\r\\n]+/], // whitespace\n\t\t\t[\n\t\t\t\t/(<\\/)(style\\s*)(>)/,\n\t\t\t\t['delimiter.html', 'tag.html', { token: 'delimiter.html', next: '@pop' }]\n\t\t\t]\n\t\t],\n\n\t\t// After <style ... type\n\t\tstyleAfterType: [\n\t\t\t[\n\t\t\t\t/<\\?((php)|=)?/,\n\t\t\t\t{\n\t\t\t\t\ttoken: '@rematch',\n\t\t\t\t\tswitchTo: '@phpInSimpleState.styleAfterType'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/=/, 'delimiter', '@styleAfterTypeEquals'],\n\t\t\t[\n\t\t\t\t/>/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'delimiter.html',\n\t\t\t\t\tnext: '@styleEmbedded.text/css',\n\t\t\t\t\tnextEmbedded: 'text/css'\n\t\t\t\t}\n\t\t\t], // cover invalid e.g. <style type>\n\t\t\t[/[ \\t\\r\\n]+/], // whitespace\n\t\t\t[/<\\/style\\s*>/, { token: '@rematch', next: '@pop' }]\n\t\t],\n\n\t\t// After <style ... type =\n\t\tstyleAfterTypeEquals: [\n\t\t\t[\n\t\t\t\t/<\\?((php)|=)?/,\n\t\t\t\t{\n\t\t\t\t\ttoken: '@rematch',\n\t\t\t\t\tswitchTo: '@phpInSimpleState.styleAfterTypeEquals'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[\n\t\t\t\t/\"([^\"]*)\"/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'attribute.value',\n\t\t\t\t\tswitchTo: '@styleWithCustomType.$1'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[\n\t\t\t\t/'([^']*)'/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'attribute.value',\n\t\t\t\t\tswitchTo: '@styleWithCustomType.$1'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[\n\t\t\t\t/>/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'delimiter.html',\n\t\t\t\t\tnext: '@styleEmbedded.text/css',\n\t\t\t\t\tnextEmbedded: 'text/css'\n\t\t\t\t}\n\t\t\t], // cover invalid e.g. <style type=>\n\t\t\t[/[ \\t\\r\\n]+/], // whitespace\n\t\t\t[/<\\/style\\s*>/, { token: '@rematch', next: '@pop' }]\n\t\t],\n\n\t\t// After <style ... type = $S2\n\t\tstyleWithCustomType: [\n\t\t\t[\n\t\t\t\t/<\\?((php)|=)?/,\n\t\t\t\t{\n\t\t\t\t\ttoken: '@rematch',\n\t\t\t\t\tswitchTo: '@phpInSimpleState.styleWithCustomType.$S2'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[\n\t\t\t\t/>/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'delimiter.html',\n\t\t\t\t\tnext: '@styleEmbedded.$S2',\n\t\t\t\t\tnextEmbedded: '$S2'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/\"([^\"]*)\"/, 'attribute.value'],\n\t\t\t[/'([^']*)'/, 'attribute.value'],\n\t\t\t[/[\\w\\-]+/, 'attribute.name'],\n\t\t\t[/=/, 'delimiter'],\n\t\t\t[/[ \\t\\r\\n]+/], // whitespace\n\t\t\t[/<\\/style\\s*>/, { token: '@rematch', next: '@pop' }]\n\t\t],\n\n\t\tstyleEmbedded: [\n\t\t\t[\n\t\t\t\t/<\\?((php)|=)?/,\n\t\t\t\t{\n\t\t\t\t\ttoken: '@rematch',\n\t\t\t\t\tswitchTo: '@phpInEmbeddedState.styleEmbedded.$S2',\n\t\t\t\t\tnextEmbedded: '@pop'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/<\\/style/, { token: '@rematch', next: '@pop', nextEmbedded: '@pop' }]\n\t\t],\n\n\t\t// -- END <style> tags handling\n\n\t\tphpInSimpleState: [\n\t\t\t[/<\\?((php)|=)?/, 'metatag.php'],\n\t\t\t[/\\?>/, { token: 'metatag.php', switchTo: '@$S2.$S3' }],\n\t\t\t{ include: 'phpRoot' }\n\t\t],\n\n\t\tphpInEmbeddedState: [\n\t\t\t[/<\\?((php)|=)?/, 'metatag.php'],\n\t\t\t[\n\t\t\t\t/\\?>/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'metatag.php',\n\t\t\t\t\tswitchTo: '@$S2.$S3',\n\t\t\t\t\tnextEmbedded: '$S3'\n\t\t\t\t}\n\t\t\t],\n\t\t\t{ include: 'phpRoot' }\n\t\t],\n\n\t\tphpRoot: [\n\t\t\t[\n\t\t\t\t/[a-zA-Z_]\\w*/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@phpKeywords': { token: 'keyword.php' },\n\t\t\t\t\t\t'@phpCompileTimeConstants': { token: 'constant.php' },\n\t\t\t\t\t\t'@default': 'identifier.php'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t[\n\t\t\t\t/[$a-zA-Z_]\\w*/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@phpPreDefinedVariables': {\n\t\t\t\t\t\t\ttoken: 'variable.predefined.php'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'@default': 'variable.php'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t// brackets\n\t\t\t[/[{}]/, 'delimiter.bracket.php'],\n\t\t\t[/[\\[\\]]/, 'delimiter.array.php'],\n\t\t\t[/[()]/, 'delimiter.parenthesis.php'],\n\n\t\t\t// whitespace\n\t\t\t[/[ \\t\\r\\n]+/],\n\n\t\t\t// comments\n\t\t\t[/(#|\\/\\/)$/, 'comment.php'],\n\t\t\t[/(#|\\/\\/)/, 'comment.php', '@phpLineComment'],\n\n\t\t\t// block comments\n\t\t\t[/\\/\\*/, 'comment.php', '@phpComment'],\n\n\t\t\t// strings\n\t\t\t[/\"/, 'string.php', '@phpDoubleQuoteString'],\n\t\t\t[/'/, 'string.php', '@phpSingleQuoteString'],\n\n\t\t\t// delimiters\n\t\t\t[/[\\+\\-\\*\\%\\&\\|\\^\\~\\!\\=\\<\\>\\/\\?\\;\\:\\.\\,\\@]/, 'delimiter.php'],\n\n\t\t\t// numbers\n\t\t\t[/\\d*\\d+[eE]([\\-+]?\\d+)?/, 'number.float.php'],\n\t\t\t[/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float.php'],\n\t\t\t[/0[xX][0-9a-fA-F']*[0-9a-fA-F]/, 'number.hex.php'],\n\t\t\t[/0[0-7']*[0-7]/, 'number.octal.php'],\n\t\t\t[/0[bB][0-1']*[0-1]/, 'number.binary.php'],\n\t\t\t[/\\d[\\d']*/, 'number.php'],\n\t\t\t[/\\d/, 'number.php']\n\t\t],\n\n\t\tphpComment: [\n\t\t\t[/\\*\\//, 'comment.php', '@pop'],\n\t\t\t[/[^*]+/, 'comment.php'],\n\t\t\t[/./, 'comment.php']\n\t\t],\n\n\t\tphpLineComment: [\n\t\t\t[/\\?>/, { token: '@rematch', next: '@pop' }],\n\t\t\t[/.$/, 'comment.php', '@pop'],\n\t\t\t[/[^?]+$/, 'comment.php', '@pop'],\n\t\t\t[/[^?]+/, 'comment.php'],\n\t\t\t[/./, 'comment.php']\n\t\t],\n\n\t\tphpDoubleQuoteString: [\n\t\t\t[/[^\\\\\"]+/, 'string.php'],\n\t\t\t[/@escapes/, 'string.escape.php'],\n\t\t\t[/\\\\./, 'string.escape.invalid.php'],\n\t\t\t[/\"/, 'string.php', '@pop']\n\t\t],\n\n\t\tphpSingleQuoteString: [\n\t\t\t[/[^\\\\']+/, 'string.php'],\n\t\t\t[/@escapes/, 'string.escape.php'],\n\t\t\t[/\\\\./, 'string.escape.invalid.php'],\n\t\t\t[/'/, 'string.php', '@pop']\n\t\t]\n\t},\n\n\tphpKeywords: [\n\t\t'abstract',\n\t\t'and',\n\t\t'array',\n\t\t'as',\n\t\t'break',\n\t\t'callable',\n\t\t'case',\n\t\t'catch',\n\t\t'cfunction',\n\t\t'class',\n\t\t'clone',\n\t\t'const',\n\t\t'continue',\n\t\t'declare',\n\t\t'default',\n\t\t'do',\n\t\t'else',\n\t\t'elseif',\n\t\t'enddeclare',\n\t\t'endfor',\n\t\t'endforeach',\n\t\t'endif',\n\t\t'endswitch',\n\t\t'endwhile',\n\t\t'extends',\n\t\t'false',\n\t\t'final',\n\t\t'for',\n\t\t'foreach',\n\t\t'function',\n\t\t'global',\n\t\t'goto',\n\t\t'if',\n\t\t'implements',\n\t\t'interface',\n\t\t'instanceof',\n\t\t'insteadof',\n\t\t'namespace',\n\t\t'new',\n\t\t'null',\n\t\t'object',\n\t\t'old_function',\n\t\t'or',\n\t\t'private',\n\t\t'protected',\n\t\t'public',\n\t\t'resource',\n\t\t'static',\n\t\t'switch',\n\t\t'throw',\n\t\t'trait',\n\t\t'try',\n\t\t'true',\n\t\t'use',\n\t\t'var',\n\t\t'while',\n\t\t'xor',\n\t\t'die',\n\t\t'echo',\n\t\t'empty',\n\t\t'exit',\n\t\t'eval',\n\t\t'include',\n\t\t'include_once',\n\t\t'isset',\n\t\t'list',\n\t\t'require',\n\t\t'require_once',\n\t\t'return',\n\t\t'print',\n\t\t'unset',\n\t\t'yield',\n\t\t'__construct'\n\t],\n\n\tphpCompileTimeConstants: [\n\t\t'__CLASS__',\n\t\t'__DIR__',\n\t\t'__FILE__',\n\t\t'__LINE__',\n\t\t'__NAMESPACE__',\n\t\t'__METHOD__',\n\t\t'__FUNCTION__',\n\t\t'__TRAIT__'\n\t],\n\n\tphpPreDefinedVariables: [\n\t\t'$GLOBALS',\n\t\t'$_SERVER',\n\t\t'$_GET',\n\t\t'$_POST',\n\t\t'$_FILES',\n\t\t'$_REQUEST',\n\t\t'$_SESSION',\n\t\t'$_ENV',\n\t\t'$_COOKIE',\n\t\t'$php_errormsg',\n\t\t'$HTTP_RAW_POST_DATA',\n\t\t'$http_response_header',\n\t\t'$argc',\n\t\t'$argv'\n\t],\n\n\tescapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/\n}",
  "pla": "<languages.IMonarchLanguage>{\n\tdefaultToken: '',\n\ttokenPostfix: '.pla',\n\n\tbrackets: [\n\t\t{ open: '[', close: ']', token: 'delimiter.square' },\n\t\t{ open: '<', close: '>', token: 'delimiter.angle' },\n\t\t{ open: '(', close: ')', token: 'delimiter.parenthesis' }\n\t],\n\n\tkeywords: [\n\t\t'.i',\n\t\t'.o',\n\t\t'.mv',\n\t\t'.ilb',\n\t\t'.ob',\n\t\t'.label',\n\t\t'.type',\n\t\t'.phase',\n\t\t'.pair',\n\t\t'.symbolic',\n\t\t'.symbolic-output',\n\t\t'.kiss',\n\t\t'.p',\n\t\t'.e',\n\t\t'.end'\n\t],\n\n\t// regular expressions\n\tcomment: /#.*$/,\n\tidentifier: /[a-zA-Z]+[a-zA-Z0-9_\\-]*/,\n\tplaContent: /[01\\-~\\|]+/,\n\n\t// The main tokenizer for our languages\n\ttokenizer: {\n\t\troot: [\n\t\t\t// comments and whitespace\n\t\t\t{ include: '@whitespace' },\n\t\t\t[/@comment/, 'comment'],\n\n\t\t\t// keyword\n\t\t\t[\n\t\t\t\t/\\.([a-zA-Z_\\-]+)/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@eos': { token: 'keyword.$1' },\n\t\t\t\t\t\t'@keywords': {\n\t\t\t\t\t\t\tcases: {\n\t\t\t\t\t\t\t\t'.type': { token: 'keyword.$1', next: '@type' },\n\t\t\t\t\t\t\t\t'@default': { token: 'keyword.$1', next: '@keywordArg' }\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'@default': { token: 'keyword.$1' }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t// identifiers\n\t\t\t[/@identifier/, 'identifier'],\n\n\t\t\t// PLA row\n\t\t\t[/@plaContent/, 'string']\n\t\t],\n\n\t\twhitespace: [[/[ \\t\\r\\n]+/, '']],\n\n\t\ttype: [{ include: '@whitespace' }, [/\\w+/, { token: 'type', next: '@pop' }]],\n\n\t\tkeywordArg: [\n\t\t\t// whitespace\n\t\t\t[\n\t\t\t\t/[ \\t\\r\\n]+/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@eos': { token: '', next: '@pop' },\n\t\t\t\t\t\t'@default': ''\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t// comments\n\t\t\t[/@comment/, 'comment', '@pop'],\n\n\t\t\t// brackets\n\t\t\t[\n\t\t\t\t/[<>()\\[\\]]/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@eos': { token: '@brackets', next: '@pop' },\n\t\t\t\t\t\t'@default': '@brackets'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t// numbers\n\t\t\t[\n\t\t\t\t/\\-?\\d+/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@eos': { token: 'number', next: '@pop' },\n\t\t\t\t\t\t'@default': 'number'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t// identifiers\n\t\t\t[\n\t\t\t\t/@identifier/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@eos': { token: 'identifier', next: '@pop' },\n\t\t\t\t\t\t'@default': 'identifier'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t// delimiter\n\t\t\t[\n\t\t\t\t/[;=]/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@eos': { token: 'delimiter', next: '@pop' },\n\t\t\t\t\t\t'@default': 'delimiter'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t]\n\t}\n}",
  "postiats": "<languages.IMonarchLanguage>{\n\ttokenPostfix: '.pats',\n\n\t// TODO: staload and dynload are followed by a special kind of string literals\n\t// with {$IDENTIFER} variables, and it also may make sense to highlight\n\t// the punctuation (. and / and \\) differently.\n\n\t// Set defaultToken to invalid to see what you do not tokenize yet\n\tdefaultToken: 'invalid',\n\n\t// keyword reference: https://github.com/githwxi/ATS-Postiats/blob/master/src/pats_lexing_token.dats\n\n\tkeywords: [\n\t\t//\n\t\t'abstype', // ABSTYPE\n\t\t'abst0ype', // ABST0YPE\n\t\t'absprop', // ABSPROP\n\t\t'absview', // ABSVIEW\n\t\t'absvtype', // ABSVIEWTYPE\n\t\t'absviewtype', // ABSVIEWTYPE\n\t\t'absvt0ype', // ABSVIEWT0YPE\n\t\t'absviewt0ype', // ABSVIEWT0YPE\n\t\t//\n\t\t'as', // T_AS\n\t\t//\n\t\t'and', // T_AND\n\t\t//\n\t\t'assume', // T_ASSUME\n\t\t//\n\t\t'begin', // T_BEGIN\n\t\t//\n\t\t/*\n\t\t\t\t\"case\", // CASE\n\t\t*/\n\t\t//\n\t\t'classdec', // T_CLASSDEC\n\t\t//\n\t\t'datasort', // T_DATASORT\n\t\t//\n\t\t'datatype', // DATATYPE\n\t\t'dataprop', // DATAPROP\n\t\t'dataview', // DATAVIEW\n\t\t'datavtype', // DATAVIEWTYPE\n\t\t'dataviewtype', // DATAVIEWTYPE\n\t\t//\n\t\t'do', // T_DO\n\t\t//\n\t\t'end', // T_END\n\t\t//\n\t\t'extern', // T_EXTERN\n\t\t'extype', // T_EXTYPE\n\t\t'extvar', // T_EXTVAR\n\t\t//\n\t\t'exception', // T_EXCEPTION\n\t\t//\n\t\t'fn', // FN // non-recursive\n\t\t'fnx', // FNX // mutual tail-rec.\n\t\t'fun', // FUN // general-recursive\n\t\t//\n\t\t'prfn', // PRFN\n\t\t'prfun', // PRFUN\n\t\t//\n\t\t'praxi', // PRAXI\n\t\t'castfn', // CASTFN\n\t\t//\n\t\t'if', // T_IF\n\t\t'then', // T_THEN\n\t\t'else', // T_ELSE\n\t\t//\n\t\t'ifcase', // T_IFCASE\n\t\t//\n\t\t'in', // T_IN\n\t\t//\n\t\t'infix', // INFIX\n\t\t'infixl', // INFIXL\n\t\t'infixr', // INFIXR\n\t\t'prefix', // PREFIX\n\t\t'postfix', // POSTFIX\n\t\t//\n\t\t'implmnt', // IMPLMNT // 0\n\t\t'implement', // IMPLEMENT // 1\n\t\t//\n\t\t'primplmnt', // PRIMPLMNT // ~1\n\t\t'primplement', // PRIMPLMNT // ~1\n\t\t//\n\t\t'import', // T_IMPORT // for importing packages\n\t\t//\n\t\t/*\n\t\t\t\t\"lam\", // LAM\n\t\t\t\t\"llam\", // LLAM\n\t\t\t\t\"fix\", // FIX\n\t\t*/\n\t\t//\n\t\t'let', // T_LET\n\t\t//\n\t\t'local', // T_LOCAL\n\t\t//\n\t\t'macdef', // MACDEF\n\t\t'macrodef', // MACRODEF\n\t\t//\n\t\t'nonfix', // T_NONFIX\n\t\t//\n\t\t'symelim', // T_SYMELIM\n\t\t'symintr', // T_SYMINTR\n\t\t'overload', // T_OVERLOAD\n\t\t//\n\t\t'of', // T_OF\n\t\t'op', // T_OP\n\t\t//\n\t\t'rec', // T_REC\n\t\t//\n\t\t'sif', // T_SIF\n\t\t'scase', // T_SCASE\n\t\t//\n\t\t'sortdef', // T_SORTDEF\n\t\t/*\n\t\t// HX: [sta] is now deprecated\n\t\t*/\n\t\t'sta', // T_STACST\n\t\t'stacst', // T_STACST\n\t\t'stadef', // T_STADEF\n\t\t'static', // T_STATIC\n\t\t/*\n\t\t\t\t\"stavar\", // T_STAVAR\n\t\t*/\n\t\t//\n\t\t'staload', // T_STALOAD\n\t\t'dynload', // T_DYNLOAD\n\t\t//\n\t\t'try', // T_TRY\n\t\t//\n\t\t'tkindef', // T_TKINDEF // HX-2012-05-23\n\t\t//\n\t\t/*\n\t\t\t\t\"type\", // TYPE\n\t\t*/\n\t\t'typedef', // TYPEDEF\n\t\t'propdef', // PROPDEF\n\t\t'viewdef', // VIEWDEF\n\t\t'vtypedef', // VIEWTYPEDEF\n\t\t'viewtypedef', // VIEWTYPEDEF\n\t\t//\n\t\t/*\n\t\t\t\t\"val\", // VAL\n\t\t*/\n\t\t'prval', // PRVAL\n\t\t//\n\t\t'var', // VAR\n\t\t'prvar', // PRVAR\n\t\t//\n\t\t'when', // T_WHEN\n\t\t'where', // T_WHERE\n\t\t//\n\t\t/*\n\t\t\t\t\"for\", // T_FOR\n\t\t\t\t\"while\", // T_WHILE\n\t\t*/\n\t\t//\n\t\t'with', // T_WITH\n\t\t//\n\t\t'withtype', // WITHTYPE\n\t\t'withprop', // WITHPROP\n\t\t'withview', // WITHVIEW\n\t\t'withvtype', // WITHVIEWTYPE\n\t\t'withviewtype' // WITHVIEWTYPE\n\t\t//\n\t],\n\tkeywords_dlr: [\n\t\t'$delay', // DLRDELAY\n\t\t'$ldelay', // DLRLDELAY\n\t\t//\n\t\t'$arrpsz', // T_DLRARRPSZ\n\t\t'$arrptrsize', // T_DLRARRPSZ\n\t\t//\n\t\t'$d2ctype', // T_DLRD2CTYPE\n\t\t//\n\t\t'$effmask', // DLREFFMASK\n\t\t'$effmask_ntm', // DLREFFMASK_NTM\n\t\t'$effmask_exn', // DLREFFMASK_EXN\n\t\t'$effmask_ref', // DLREFFMASK_REF\n\t\t'$effmask_wrt', // DLREFFMASK_WRT\n\t\t'$effmask_all', // DLREFFMASK_ALL\n\t\t//\n\t\t'$extern', // T_DLREXTERN\n\t\t'$extkind', // T_DLREXTKIND\n\t\t'$extype', // T_DLREXTYPE\n\t\t'$extype_struct', // T_DLREXTYPE_STRUCT\n\t\t//\n\t\t'$extval', // T_DLREXTVAL\n\t\t'$extfcall', // T_DLREXTFCALL\n\t\t'$extmcall', // T_DLREXTMCALL\n\t\t//\n\t\t'$literal', // T_DLRLITERAL\n\t\t//\n\t\t'$myfilename', // T_DLRMYFILENAME\n\t\t'$mylocation', // T_DLRMYLOCATION\n\t\t'$myfunction', // T_DLRMYFUNCTION\n\t\t//\n\t\t'$lst', // DLRLST\n\t\t'$lst_t', // DLRLST_T\n\t\t'$lst_vt', // DLRLST_VT\n\t\t'$list', // DLRLST\n\t\t'$list_t', // DLRLST_T\n\t\t'$list_vt', // DLRLST_VT\n\t\t//\n\t\t'$rec', // DLRREC\n\t\t'$rec_t', // DLRREC_T\n\t\t'$rec_vt', // DLRREC_VT\n\t\t'$record', // DLRREC\n\t\t'$record_t', // DLRREC_T\n\t\t'$record_vt', // DLRREC_VT\n\t\t//\n\t\t'$tup', // DLRTUP\n\t\t'$tup_t', // DLRTUP_T\n\t\t'$tup_vt', // DLRTUP_VT\n\t\t'$tuple', // DLRTUP\n\t\t'$tuple_t', // DLRTUP_T\n\t\t'$tuple_vt', // DLRTUP_VT\n\t\t//\n\t\t'$break', // T_DLRBREAK\n\t\t'$continue', // T_DLRCONTINUE\n\t\t//\n\t\t'$raise', // T_DLRRAISE\n\t\t//\n\t\t'$showtype', // T_DLRSHOWTYPE\n\t\t//\n\t\t'$vcopyenv_v', // DLRVCOPYENV_V\n\t\t'$vcopyenv_vt', // DLRVCOPYENV_VT\n\t\t//\n\t\t'$tempenver', // T_DLRTEMPENVER\n\t\t//\n\t\t'$solver_assert', // T_DLRSOLASSERT\n\t\t'$solver_verify' // T_DLRSOLVERIFY\n\t],\n\tkeywords_srp: [\n\t\t//\n\t\t'#if', // T_SRPIF\n\t\t'#ifdef', // T_SRPIFDEF\n\t\t'#ifndef', // T_SRPIFNDEF\n\t\t//\n\t\t'#then', // T_SRPTHEN\n\t\t//\n\t\t'#elif', // T_SRPELIF\n\t\t'#elifdef', // T_SRPELIFDEF\n\t\t'#elifndef', // T_SRPELIFNDEF\n\t\t//\n\t\t'#else', // T_SRPELSE\n\t\t'#endif', // T_SRPENDIF\n\t\t//\n\t\t'#error', // T_SRPERROR\n\t\t//\n\t\t'#prerr', // T_SRPPRERR // outpui to stderr\n\t\t'#print', // T_SRPPRINT // output to stdout\n\t\t//\n\t\t'#assert', // T_SRPASSERT\n\t\t//\n\t\t'#undef', // T_SRPUNDEF\n\t\t'#define', // T_SRPDEFINE\n\t\t//\n\t\t'#include', // T_SRPINCLUDE\n\t\t'#require', // T_SRPREQUIRE\n\t\t//\n\t\t'#pragma', // T_SRPPRAGMA // HX: general pragma\n\t\t'#codegen2', // T_SRPCODEGEN2 // for level-2 codegen\n\t\t'#codegen3' // T_SRPCODEGEN3 // for level-3 codegen\n\t\t//\n\t\t// HX: end of special tokens\n\t\t//\n\t],\n\n\tirregular_keyword_list: [\n\t\t'val+',\n\t\t'val-',\n\t\t'val',\n\t\t'case+',\n\t\t'case-',\n\t\t'case',\n\t\t'addr@',\n\t\t'addr',\n\t\t'fold@',\n\t\t'free@',\n\t\t'fix@',\n\t\t'fix',\n\t\t'lam@',\n\t\t'lam',\n\t\t'llam@',\n\t\t'llam',\n\t\t'viewt@ype+',\n\t\t'viewt@ype-',\n\t\t'viewt@ype',\n\t\t'viewtype+',\n\t\t'viewtype-',\n\t\t'viewtype',\n\t\t'view+',\n\t\t'view-',\n\t\t'view@',\n\t\t'view',\n\t\t'type+',\n\t\t'type-',\n\t\t'type',\n\t\t'vtype+',\n\t\t'vtype-',\n\t\t'vtype',\n\t\t'vt@ype+',\n\t\t'vt@ype-',\n\t\t'vt@ype',\n\t\t'viewt@ype+',\n\t\t'viewt@ype-',\n\t\t'viewt@ype',\n\t\t'viewtype+',\n\t\t'viewtype-',\n\t\t'viewtype',\n\t\t'prop+',\n\t\t'prop-',\n\t\t'prop',\n\t\t'type+',\n\t\t'type-',\n\t\t'type',\n\t\t't@ype',\n\t\t't@ype+',\n\t\t't@ype-',\n\t\t'abst@ype',\n\t\t'abstype',\n\t\t'absviewt@ype',\n\t\t'absvt@ype',\n\t\t'for*',\n\t\t'for',\n\t\t'while*',\n\t\t'while'\n\t],\n\n\tkeywords_types: [\n\t\t'bool',\n\t\t'double',\n\t\t'byte',\n\t\t'int',\n\t\t'short',\n\t\t'char',\n\t\t'void',\n\t\t'unit',\n\t\t'long',\n\t\t'float',\n\t\t'string',\n\t\t'strptr'\n\t],\n\n\t// TODO: reference for this?\n\tkeywords_effects: [\n\t\t'0', // no effects\n\t\t'fun',\n\t\t'clo',\n\t\t'prf',\n\t\t'funclo',\n\t\t'cloptr',\n\t\t'cloref',\n\t\t'ref',\n\t\t'ntm',\n\t\t'1' // all effects\n\t],\n\n\toperators: [\n\t\t'@', // T_AT\n\t\t'!', // T_BANG\n\t\t'|', // T_BAR\n\t\t'`', // T_BQUOTE\n\t\t':', // T_COLON\n\t\t'$', // T_DOLLAR\n\t\t'.', // T_DOT\n\t\t'=', // T_EQ\n\t\t'#', // T_HASH\n\t\t'~', // T_TILDE\n\t\t//\n\t\t'..', // T_DOTDOT\n\t\t'...', // T_DOTDOTDOT\n\t\t//\n\t\t'=>', // T_EQGT\n\t\t// \"=<\", // T_EQLT\n\t\t'=<>', // T_EQLTGT\n\t\t'=/=>', // T_EQSLASHEQGT\n\t\t'=>>', // T_EQGTGT\n\t\t'=/=>>', // T_EQSLASHEQGTGT\n\t\t//\n\t\t'<', // T_LT // opening a tmparg\n\t\t'>', // T_GT // closing a tmparg\n\t\t//\n\t\t'><', // T_GTLT\n\t\t//\n\t\t'.<', // T_DOTLT\n\t\t'>.', // T_GTDOT\n\t\t//\n\t\t'.<>.', // T_DOTLTGTDOT\n\t\t//\n\t\t'->', // T_MINUSGT\n\t\t//\"-<\", // T_MINUSLT\n\t\t'-<>' // T_MINUSLTGT\n\t\t//\n\t\t/*\n\t\t\t\t\":<\", // T_COLONLT\n\t\t*/\n\t],\n\n\tbrackets: [\n\t\t{ open: ',(', close: ')', token: 'delimiter.parenthesis' }, // meta-programming syntax\n\t\t{ open: '`(', close: ')', token: 'delimiter.parenthesis' },\n\t\t{ open: '%(', close: ')', token: 'delimiter.parenthesis' },\n\t\t{ open: \"'(\", close: ')', token: 'delimiter.parenthesis' },\n\t\t{ open: \"'{\", close: '}', token: 'delimiter.parenthesis' },\n\t\t{ open: '@(', close: ')', token: 'delimiter.parenthesis' },\n\t\t{ open: '@{', close: '}', token: 'delimiter.brace' },\n\t\t{ open: '@[', close: ']', token: 'delimiter.square' },\n\t\t{ open: '#[', close: ']', token: 'delimiter.square' },\n\t\t{ open: '{', close: '}', token: 'delimiter.curly' },\n\t\t{ open: '[', close: ']', token: 'delimiter.square' },\n\t\t{ open: '(', close: ')', token: 'delimiter.parenthesis' },\n\t\t{ open: '<', close: '>', token: 'delimiter.angle' }\n\t],\n\n\t// we include these common regular expressions\n\tsymbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n\n\tIDENTFST: /[a-zA-Z_]/,\n\tIDENTRST: /[a-zA-Z0-9_'$]/,\n\tsymbolic: /[%&+-./:=@~`^|*!$#?<>]/,\n\tdigit: /[0-9]/,\n\tdigitseq0: /@digit*/,\n\txdigit: /[0-9A-Za-z]/,\n\txdigitseq0: /@xdigit*/,\n\tINTSP: /[lLuU]/,\n\tFLOATSP: /[fFlL]/,\n\tfexponent: /[eE][+-]?[0-9]+/,\n\tfexponent_bin: /[pP][+-]?[0-9]+/,\n\tdeciexp: /\\.[0-9]*@fexponent?/,\n\thexiexp: /\\.[0-9a-zA-Z]*@fexponent_bin?/,\n\tirregular_keywords:\n\t\t/val[+-]?|case[+-]?|addr\\@?|fold\\@|free\\@|fix\\@?|lam\\@?|llam\\@?|prop[+-]?|type[+-]?|view[+-@]?|viewt@?ype[+-]?|t@?ype[+-]?|v(iew)?t@?ype[+-]?|abst@?ype|absv(iew)?t@?ype|for\\*?|while\\*?/,\n\tESCHAR: /[ntvbrfa\\\\\\?'\"\\(\\[\\{]/,\n\n\tstart: 'root',\n\n\t// The main tokenizer for ATS/Postiats\n\t// reference: https://github.com/githwxi/ATS-Postiats/blob/master/src/pats_lexing.dats\n\ttokenizer: {\n\t\troot: [\n\t\t\t// lexing_blankseq0\n\t\t\t{ regex: /[ \\t\\r\\n]+/, action: { token: '' } },\n\n\t\t\t// NOTE: (*) is an invalid ML-like comment!\n\t\t\t{ regex: /\\(\\*\\)/, action: { token: 'invalid' } },\n\t\t\t{\n\t\t\t\tregex: /\\(\\*/,\n\t\t\t\taction: { token: 'comment', next: 'lexing_COMMENT_block_ml' }\n\t\t\t},\n\t\t\t{\n\t\t\t\tregex: /\\(/,\n\t\t\t\taction: '@brackets' /*{ token: 'delimiter.parenthesis' }*/\n\t\t\t},\n\t\t\t{\n\t\t\t\tregex: /\\)/,\n\t\t\t\taction: '@brackets' /*{ token: 'delimiter.parenthesis' }*/\n\t\t\t},\n\t\t\t{\n\t\t\t\tregex: /\\[/,\n\t\t\t\taction: '@brackets' /*{ token: 'delimiter.bracket' }*/\n\t\t\t},\n\t\t\t{\n\t\t\t\tregex: /\\]/,\n\t\t\t\taction: '@brackets' /*{ token: 'delimiter.bracket' }*/\n\t\t\t},\n\t\t\t{\n\t\t\t\tregex: /\\{/,\n\t\t\t\taction: '@brackets' /*{ token: 'delimiter.brace' }*/\n\t\t\t},\n\t\t\t{\n\t\t\t\tregex: /\\}/,\n\t\t\t\taction: '@brackets' /*{ token: 'delimiter.brace' }*/\n\t\t\t},\n\n\t\t\t// lexing_COMMA\n\t\t\t{\n\t\t\t\tregex: /,\\(/,\n\t\t\t\taction: '@brackets' /*{ token: 'delimiter.parenthesis' }*/\n\t\t\t}, // meta-programming syntax\n\t\t\t{ regex: /,/, action: { token: 'delimiter.comma' } },\n\n\t\t\t{ regex: /;/, action: { token: 'delimiter.semicolon' } },\n\n\t\t\t// lexing_AT\n\t\t\t{\n\t\t\t\tregex: /@\\(/,\n\t\t\t\taction: '@brackets' /* { token: 'delimiter.parenthesis' }*/\n\t\t\t},\n\t\t\t{\n\t\t\t\tregex: /@\\[/,\n\t\t\t\taction: '@brackets' /* { token: 'delimiter.bracket' }*/\n\t\t\t},\n\t\t\t{\n\t\t\t\tregex: /@\\{/,\n\t\t\t\taction: '@brackets' /*{ token: 'delimiter.brace' }*/\n\t\t\t},\n\n\t\t\t// lexing_COLON\n\t\t\t{\n\t\t\t\tregex: /:</,\n\t\t\t\taction: { token: 'keyword', next: '@lexing_EFFECT_commaseq0' }\n\t\t\t}, // T_COLONLT\n\n\t\t\t/*\n\t\t\tlexing_DOT:\n\n\t\t\t. // SYMBOLIC => lexing_IDENT_sym\n\t\t\t. FLOATDOT => lexing_FLOAT_deciexp\n\t\t\t. DIGIT => T_DOTINT\n\t\t\t*/\n\t\t\t{ regex: /\\.@symbolic+/, action: { token: 'identifier.sym' } },\n\t\t\t// FLOATDOT case\n\t\t\t{\n\t\t\t\tregex: /\\.@digit*@fexponent@FLOATSP*/,\n\t\t\t\taction: { token: 'number.float' }\n\t\t\t},\n\t\t\t{ regex: /\\.@digit+/, action: { token: 'number.float' } }, // T_DOTINT\n\n\t\t\t// lexing_DOLLAR:\n\t\t\t// '$' IDENTFST IDENTRST* => lexing_IDENT_dlr, _ => lexing_IDENT_sym\n\t\t\t{\n\t\t\t\tregex: /\\$@IDENTFST@IDENTRST*/,\n\t\t\t\taction: {\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@keywords_dlr': { token: 'keyword.dlr' },\n\t\t\t\t\t\t'@default': { token: 'namespace' } // most likely a module qualifier\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t// lexing_SHARP:\n\t\t\t// '#' IDENTFST IDENTRST* => lexing_ident_srp, _ => lexing_IDENT_sym\n\t\t\t{\n\t\t\t\tregex: /\\#@IDENTFST@IDENTRST*/,\n\t\t\t\taction: {\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@keywords_srp': { token: 'keyword.srp' },\n\t\t\t\t\t\t'@default': { token: 'identifier' }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// lexing_PERCENT:\n\t\t\t{ regex: /%\\(/, action: { token: 'delimiter.parenthesis' } },\n\t\t\t{\n\t\t\t\tregex: /^%{(#|\\^|\\$)?/,\n\t\t\t\taction: {\n\t\t\t\t\ttoken: 'keyword',\n\t\t\t\t\tnext: '@lexing_EXTCODE',\n\t\t\t\t\tnextEmbedded: 'text/javascript'\n\t\t\t\t}\n\t\t\t},\n\t\t\t{ regex: /^%}/, action: { token: 'keyword' } },\n\n\t\t\t// lexing_QUOTE\n\t\t\t{ regex: /'\\(/, action: { token: 'delimiter.parenthesis' } },\n\t\t\t{ regex: /'\\[/, action: { token: 'delimiter.bracket' } },\n\t\t\t{ regex: /'\\{/, action: { token: 'delimiter.brace' } },\n\t\t\t[/(')(\\\\@ESCHAR|\\\\[xX]@xdigit+|\\\\@digit+)(')/, ['string', 'string.escape', 'string']],\n\t\t\t[/'[^\\\\']'/, 'string'],\n\n\t\t\t// lexing_DQUOTE\n\t\t\t[/\"/, 'string.quote', '@lexing_DQUOTE'],\n\n\t\t\t// lexing_BQUOTE\n\t\t\t{\n\t\t\t\tregex: /`\\(/,\n\t\t\t\taction: '@brackets' /* { token: 'delimiter.parenthesis' }*/\n\t\t\t},\n\t\t\t// TODO: otherwise, try lexing_IDENT_sym\n\n\t\t\t{ regex: /\\\\/, action: { token: 'punctuation' } }, // just T_BACKSLASH\n\n\t\t\t// lexing_IDENT_alp:\n\t\t\t// NOTE: (?!regex) is syntax for \"not-followed-by\" regex\n\t\t\t// to resolve ambiguity such as foreach$fwork being incorrectly lexed as [for] [each$fwork]!\n\t\t\t{\n\t\t\t\tregex: /@irregular_keywords(?!@IDENTRST)/,\n\t\t\t\taction: { token: 'keyword' }\n\t\t\t},\n\t\t\t{\n\t\t\t\tregex: /@IDENTFST@IDENTRST*[<!\\[]?/,\n\t\t\t\taction: {\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t// TODO: dynload and staload should be specially parsed\n\t\t\t\t\t\t// dynload whitespace+ \"special_string\"\n\t\t\t\t\t\t// this special string is really:\n\t\t\t\t\t\t//  '/' '\\\\' '.' => punctuation\n\t\t\t\t\t\t// ({\\$)([a-zA-Z_][a-zA-Z_0-9]*)(}) => punctuation,keyword,punctuation\n\t\t\t\t\t\t// [^\"] => identifier/literal\n\t\t\t\t\t\t'@keywords': { token: 'keyword' },\n\t\t\t\t\t\t'@keywords_types': { token: 'type' },\n\t\t\t\t\t\t'@default': { token: 'identifier' }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t// lexing_IDENT_sym:\n\t\t\t{\n\t\t\t\tregex: /\\/\\/\\/\\//,\n\t\t\t\taction: { token: 'comment', next: '@lexing_COMMENT_rest' }\n\t\t\t},\n\t\t\t{ regex: /\\/\\/.*$/, action: { token: 'comment' } },\n\t\t\t{\n\t\t\t\tregex: /\\/\\*/,\n\t\t\t\taction: { token: 'comment', next: '@lexing_COMMENT_block_c' }\n\t\t\t},\n\t\t\t// AS-20160627: specifically for effect annotations\n\t\t\t{\n\t\t\t\tregex: /-<|=</,\n\t\t\t\taction: { token: 'keyword', next: '@lexing_EFFECT_commaseq0' }\n\t\t\t},\n\t\t\t{\n\t\t\t\tregex: /@symbolic+/,\n\t\t\t\taction: {\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@operators': 'keyword',\n\t\t\t\t\t\t'@default': 'operator'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// lexing_ZERO:\n\t\t\t// FIXME: this one is quite messy/unfinished yet\n\t\t\t// TODO: lexing_INT_hex\n\t\t\t// - testing_hexiexp => lexing_FLOAT_hexiexp\n\t\t\t// - testing_fexponent_bin => lexing_FLOAT_hexiexp\n\t\t\t// - testing_intspseq0 => T_INT_hex\n\n\t\t\t// lexing_INT_hex:\n\t\t\t{\n\t\t\t\tregex: /0[xX]@xdigit+(@hexiexp|@fexponent_bin)@FLOATSP*/,\n\t\t\t\taction: { token: 'number.float' }\n\t\t\t},\n\t\t\t{ regex: /0[xX]@xdigit+@INTSP*/, action: { token: 'number.hex' } },\n\t\t\t{\n\t\t\t\tregex: /0[0-7]+(?![0-9])@INTSP*/,\n\t\t\t\taction: { token: 'number.octal' }\n\t\t\t}, // lexing_INT_oct\n\t\t\t//{regex: /0/, action: { token: 'number' } }, // INTZERO\n\n\t\t\t// lexing_INT_dec:\n\t\t\t// - testing_deciexp => lexing_FLOAT_deciexp\n\t\t\t// - testing_fexponent => lexing_FLOAT_deciexp\n\t\t\t// - otherwise => intspseq0 ([0-9]*[lLuU]?)\n\t\t\t{\n\t\t\t\tregex: /@digit+(@fexponent|@deciexp)@FLOATSP*/,\n\t\t\t\taction: { token: 'number.float' }\n\t\t\t},\n\t\t\t{\n\t\t\t\tregex: /@digit@digitseq0@INTSP*/,\n\t\t\t\taction: { token: 'number.decimal' }\n\t\t\t},\n\t\t\t// DIGIT, if followed by digitseq0, is lexing_INT_dec\n\t\t\t{ regex: /@digit+@INTSP*/, action: { token: 'number' } }\n\t\t],\n\n\t\tlexing_COMMENT_block_ml: [\n\t\t\t[/[^\\(\\*]+/, 'comment'],\n\t\t\t[/\\(\\*/, 'comment', '@push'],\n\t\t\t[/\\(\\*/, 'comment.invalid'],\n\t\t\t[/\\*\\)/, 'comment', '@pop'],\n\t\t\t[/\\*/, 'comment']\n\t\t],\n\t\tlexing_COMMENT_block_c: [\n\t\t\t[/[^\\/*]+/, 'comment'],\n\t\t\t// [/\\/\\*/, 'comment', '@push' ],    // nested C-style block comments not allowed\n\t\t\t// [/\\/\\*/,    'comment.invalid' ],\t// NOTE: this breaks block comments in the shape of /* //*/\n\t\t\t[/\\*\\//, 'comment', '@pop'],\n\t\t\t[/[\\/*]/, 'comment']\n\t\t],\n\t\tlexing_COMMENT_rest: [\n\t\t\t[/$/, 'comment', '@pop'], // FIXME: does it match? docs say 'no'\n\t\t\t[/.*/, 'comment']\n\t\t],\n\n\t\t// NOTE: added by AS, specifically for highlighting\n\t\tlexing_EFFECT_commaseq0: [\n\t\t\t{\n\t\t\t\tregex: /@IDENTFST@IDENTRST+|@digit+/,\n\t\t\t\taction: {\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@keywords_effects': { token: 'type.effect' },\n\t\t\t\t\t\t'@default': { token: 'identifier' }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t{ regex: /,/, action: { token: 'punctuation' } },\n\t\t\t{ regex: />/, action: { token: '@rematch', next: '@pop' } }\n\t\t],\n\n\t\tlexing_EXTCODE: [\n\t\t\t{\n\t\t\t\tregex: /^%}/,\n\t\t\t\taction: {\n\t\t\t\t\ttoken: '@rematch',\n\t\t\t\t\tnext: '@pop',\n\t\t\t\t\tnextEmbedded: '@pop'\n\t\t\t\t}\n\t\t\t},\n\t\t\t{ regex: /[^%]+/, action: '' }\n\t\t],\n\n\t\tlexing_DQUOTE: [\n\t\t\t{ regex: /\"/, action: { token: 'string.quote', next: '@pop' } },\n\t\t\t// AS-20160628: additional hi-lighting for variables in staload/dynload strings\n\t\t\t{\n\t\t\t\tregex: /(\\{\\$)(@IDENTFST@IDENTRST*)(\\})/,\n\t\t\t\taction: [{ token: 'string.escape' }, { token: 'identifier' }, { token: 'string.escape' }]\n\t\t\t},\n\t\t\t{ regex: /\\\\$/, action: { token: 'string.escape' } },\n\t\t\t{\n\t\t\t\tregex: /\\\\(@ESCHAR|[xX]@xdigit+|@digit+)/,\n\t\t\t\taction: { token: 'string.escape' }\n\t\t\t},\n\t\t\t{ regex: /[^\\\\\"]+/, action: { token: 'string' } }\n\t\t]\n\t}\n}",
  "powerquery": "<languages.IMonarchLanguage>{\n\tdefaultToken: '',\n\ttokenPostfix: '.pq',\n\tignoreCase: false,\n\n\tbrackets: [\n\t\t{ open: '[', close: ']', token: 'delimiter.square' },\n\t\t{ open: '{', close: '}', token: 'delimiter.brackets' },\n\t\t{ open: '(', close: ')', token: 'delimiter.parenthesis' }\n\t],\n\n\toperatorKeywords: ['and', 'not', 'or'],\n\n\tkeywords: [\n\t\t'as',\n\t\t'each',\n\t\t'else',\n\t\t'error',\n\t\t'false',\n\t\t'if',\n\t\t'in',\n\t\t'is',\n\t\t'let',\n\t\t'meta',\n\t\t'otherwise',\n\t\t'section',\n\t\t'shared',\n\t\t'then',\n\t\t'true',\n\t\t'try',\n\t\t'type'\n\t],\n\n\tconstructors: ['#binary', '#date', '#datetime', '#datetimezone', '#duration', '#table', '#time'],\n\n\tconstants: ['#infinity', '#nan', '#sections', '#shared'],\n\n\ttypeKeywords: [\n\t\t'action',\n\t\t'any',\n\t\t'anynonnull',\n\t\t'none',\n\t\t'null',\n\t\t'logical',\n\t\t'number',\n\t\t'time',\n\t\t'date',\n\t\t'datetime',\n\t\t'datetimezone',\n\t\t'duration',\n\t\t'text',\n\t\t'binary',\n\t\t'list',\n\t\t'record',\n\t\t'table',\n\t\t'function'\n\t],\n\n\tbuiltinFunctions: [\n\t\t'Access.Database',\n\t\t'Action.Return',\n\t\t'Action.Sequence',\n\t\t'Action.Try',\n\t\t'ActiveDirectory.Domains',\n\t\t'AdoDotNet.DataSource',\n\t\t'AdoDotNet.Query',\n\t\t'AdobeAnalytics.Cubes',\n\t\t'AnalysisServices.Database',\n\t\t'AnalysisServices.Databases',\n\t\t'AzureStorage.BlobContents',\n\t\t'AzureStorage.Blobs',\n\t\t'AzureStorage.Tables',\n\t\t'Binary.Buffer',\n\t\t'Binary.Combine',\n\t\t'Binary.Compress',\n\t\t'Binary.Decompress',\n\t\t'Binary.End',\n\t\t'Binary.From',\n\t\t'Binary.FromList',\n\t\t'Binary.FromText',\n\t\t'Binary.InferContentType',\n\t\t'Binary.Length',\n\t\t'Binary.ToList',\n\t\t'Binary.ToText',\n\t\t'BinaryFormat.7BitEncodedSignedInteger',\n\t\t'BinaryFormat.7BitEncodedUnsignedInteger',\n\t\t'BinaryFormat.Binary',\n\t\t'BinaryFormat.Byte',\n\t\t'BinaryFormat.ByteOrder',\n\t\t'BinaryFormat.Choice',\n\t\t'BinaryFormat.Decimal',\n\t\t'BinaryFormat.Double',\n\t\t'BinaryFormat.Group',\n\t\t'BinaryFormat.Length',\n\t\t'BinaryFormat.List',\n\t\t'BinaryFormat.Null',\n\t\t'BinaryFormat.Record',\n\t\t'BinaryFormat.SignedInteger16',\n\t\t'BinaryFormat.SignedInteger32',\n\t\t'BinaryFormat.SignedInteger64',\n\t\t'BinaryFormat.Single',\n\t\t'BinaryFormat.Text',\n\t\t'BinaryFormat.Transform',\n\t\t'BinaryFormat.UnsignedInteger16',\n\t\t'BinaryFormat.UnsignedInteger32',\n\t\t'BinaryFormat.UnsignedInteger64',\n\t\t'Byte.From',\n\t\t'Character.FromNumber',\n\t\t'Character.ToNumber',\n\t\t'Combiner.CombineTextByDelimiter',\n\t\t'Combiner.CombineTextByEachDelimiter',\n\t\t'Combiner.CombineTextByLengths',\n\t\t'Combiner.CombineTextByPositions',\n\t\t'Combiner.CombineTextByRanges',\n\t\t'Comparer.Equals',\n\t\t'Comparer.FromCulture',\n\t\t'Comparer.Ordinal',\n\t\t'Comparer.OrdinalIgnoreCase',\n\t\t'Csv.Document',\n\t\t'Cube.AddAndExpandDimensionColumn',\n\t\t'Cube.AddMeasureColumn',\n\t\t'Cube.ApplyParameter',\n\t\t'Cube.AttributeMemberId',\n\t\t'Cube.AttributeMemberProperty',\n\t\t'Cube.CollapseAndRemoveColumns',\n\t\t'Cube.Dimensions',\n\t\t'Cube.DisplayFolders',\n\t\t'Cube.Measures',\n\t\t'Cube.Parameters',\n\t\t'Cube.Properties',\n\t\t'Cube.PropertyKey',\n\t\t'Cube.ReplaceDimensions',\n\t\t'Cube.Transform',\n\t\t'Currency.From',\n\t\t'DB2.Database',\n\t\t'Date.AddDays',\n\t\t'Date.AddMonths',\n\t\t'Date.AddQuarters',\n\t\t'Date.AddWeeks',\n\t\t'Date.AddYears',\n\t\t'Date.Day',\n\t\t'Date.DayOfWeek',\n\t\t'Date.DayOfWeekName',\n\t\t'Date.DayOfYear',\n\t\t'Date.DaysInMonth',\n\t\t'Date.EndOfDay',\n\t\t'Date.EndOfMonth',\n\t\t'Date.EndOfQuarter',\n\t\t'Date.EndOfWeek',\n\t\t'Date.EndOfYear',\n\t\t'Date.From',\n\t\t'Date.FromText',\n\t\t'Date.IsInCurrentDay',\n\t\t'Date.IsInCurrentMonth',\n\t\t'Date.IsInCurrentQuarter',\n\t\t'Date.IsInCurrentWeek',\n\t\t'Date.IsInCurrentYear',\n\t\t'Date.IsInNextDay',\n\t\t'Date.IsInNextMonth',\n\t\t'Date.IsInNextNDays',\n\t\t'Date.IsInNextNMonths',\n\t\t'Date.IsInNextNQuarters',\n\t\t'Date.IsInNextNWeeks',\n\t\t'Date.IsInNextNYears',\n\t\t'Date.IsInNextQuarter',\n\t\t'Date.IsInNextWeek',\n\t\t'Date.IsInNextYear',\n\t\t'Date.IsInPreviousDay',\n\t\t'Date.IsInPreviousMonth',\n\t\t'Date.IsInPreviousNDays',\n\t\t'Date.IsInPreviousNMonths',\n\t\t'Date.IsInPreviousNQuarters',\n\t\t'Date.IsInPreviousNWeeks',\n\t\t'Date.IsInPreviousNYears',\n\t\t'Date.IsInPreviousQuarter',\n\t\t'Date.IsInPreviousWeek',\n\t\t'Date.IsInPreviousYear',\n\t\t'Date.IsInYearToDate',\n\t\t'Date.IsLeapYear',\n\t\t'Date.Month',\n\t\t'Date.MonthName',\n\t\t'Date.QuarterOfYear',\n\t\t'Date.StartOfDay',\n\t\t'Date.StartOfMonth',\n\t\t'Date.StartOfQuarter',\n\t\t'Date.StartOfWeek',\n\t\t'Date.StartOfYear',\n\t\t'Date.ToRecord',\n\t\t'Date.ToText',\n\t\t'Date.WeekOfMonth',\n\t\t'Date.WeekOfYear',\n\t\t'Date.Year',\n\t\t'DateTime.AddZone',\n\t\t'DateTime.Date',\n\t\t'DateTime.FixedLocalNow',\n\t\t'DateTime.From',\n\t\t'DateTime.FromFileTime',\n\t\t'DateTime.FromText',\n\t\t'DateTime.IsInCurrentHour',\n\t\t'DateTime.IsInCurrentMinute',\n\t\t'DateTime.IsInCurrentSecond',\n\t\t'DateTime.IsInNextHour',\n\t\t'DateTime.IsInNextMinute',\n\t\t'DateTime.IsInNextNHours',\n\t\t'DateTime.IsInNextNMinutes',\n\t\t'DateTime.IsInNextNSeconds',\n\t\t'DateTime.IsInNextSecond',\n\t\t'DateTime.IsInPreviousHour',\n\t\t'DateTime.IsInPreviousMinute',\n\t\t'DateTime.IsInPreviousNHours',\n\t\t'DateTime.IsInPreviousNMinutes',\n\t\t'DateTime.IsInPreviousNSeconds',\n\t\t'DateTime.IsInPreviousSecond',\n\t\t'DateTime.LocalNow',\n\t\t'DateTime.Time',\n\t\t'DateTime.ToRecord',\n\t\t'DateTime.ToText',\n\t\t'DateTimeZone.FixedLocalNow',\n\t\t'DateTimeZone.FixedUtcNow',\n\t\t'DateTimeZone.From',\n\t\t'DateTimeZone.FromFileTime',\n\t\t'DateTimeZone.FromText',\n\t\t'DateTimeZone.LocalNow',\n\t\t'DateTimeZone.RemoveZone',\n\t\t'DateTimeZone.SwitchZone',\n\t\t'DateTimeZone.ToLocal',\n\t\t'DateTimeZone.ToRecord',\n\t\t'DateTimeZone.ToText',\n\t\t'DateTimeZone.ToUtc',\n\t\t'DateTimeZone.UtcNow',\n\t\t'DateTimeZone.ZoneHours',\n\t\t'DateTimeZone.ZoneMinutes',\n\t\t'Decimal.From',\n\t\t'Diagnostics.ActivityId',\n\t\t'Diagnostics.Trace',\n\t\t'DirectQueryCapabilities.From',\n\t\t'Double.From',\n\t\t'Duration.Days',\n\t\t'Duration.From',\n\t\t'Duration.FromText',\n\t\t'Duration.Hours',\n\t\t'Duration.Minutes',\n\t\t'Duration.Seconds',\n\t\t'Duration.ToRecord',\n\t\t'Duration.ToText',\n\t\t'Duration.TotalDays',\n\t\t'Duration.TotalHours',\n\t\t'Duration.TotalMinutes',\n\t\t'Duration.TotalSeconds',\n\t\t'Embedded.Value',\n\t\t'Error.Record',\n\t\t'Excel.CurrentWorkbook',\n\t\t'Excel.Workbook',\n\t\t'Exchange.Contents',\n\t\t'Expression.Constant',\n\t\t'Expression.Evaluate',\n\t\t'Expression.Identifier',\n\t\t'Facebook.Graph',\n\t\t'File.Contents',\n\t\t'Folder.Contents',\n\t\t'Folder.Files',\n\t\t'Function.From',\n\t\t'Function.Invoke',\n\t\t'Function.InvokeAfter',\n\t\t'Function.IsDataSource',\n\t\t'GoogleAnalytics.Accounts',\n\t\t'Guid.From',\n\t\t'HdInsight.Containers',\n\t\t'HdInsight.Contents',\n\t\t'HdInsight.Files',\n\t\t'Hdfs.Contents',\n\t\t'Hdfs.Files',\n\t\t'Informix.Database',\n\t\t'Int16.From',\n\t\t'Int32.From',\n\t\t'Int64.From',\n\t\t'Int8.From',\n\t\t'ItemExpression.From',\n\t\t'Json.Document',\n\t\t'Json.FromValue',\n\t\t'Lines.FromBinary',\n\t\t'Lines.FromText',\n\t\t'Lines.ToBinary',\n\t\t'Lines.ToText',\n\t\t'List.Accumulate',\n\t\t'List.AllTrue',\n\t\t'List.Alternate',\n\t\t'List.AnyTrue',\n\t\t'List.Average',\n\t\t'List.Buffer',\n\t\t'List.Combine',\n\t\t'List.Contains',\n\t\t'List.ContainsAll',\n\t\t'List.ContainsAny',\n\t\t'List.Count',\n\t\t'List.Covariance',\n\t\t'List.DateTimeZones',\n\t\t'List.DateTimes',\n\t\t'List.Dates',\n\t\t'List.Difference',\n\t\t'List.Distinct',\n\t\t'List.Durations',\n\t\t'List.FindText',\n\t\t'List.First',\n\t\t'List.FirstN',\n\t\t'List.Generate',\n\t\t'List.InsertRange',\n\t\t'List.Intersect',\n\t\t'List.IsDistinct',\n\t\t'List.IsEmpty',\n\t\t'List.Last',\n\t\t'List.LastN',\n\t\t'List.MatchesAll',\n\t\t'List.MatchesAny',\n\t\t'List.Max',\n\t\t'List.MaxN',\n\t\t'List.Median',\n\t\t'List.Min',\n\t\t'List.MinN',\n\t\t'List.Mode',\n\t\t'List.Modes',\n\t\t'List.NonNullCount',\n\t\t'List.Numbers',\n\t\t'List.PositionOf',\n\t\t'List.PositionOfAny',\n\t\t'List.Positions',\n\t\t'List.Product',\n\t\t'List.Random',\n\t\t'List.Range',\n\t\t'List.RemoveFirstN',\n\t\t'List.RemoveItems',\n\t\t'List.RemoveLastN',\n\t\t'List.RemoveMatchingItems',\n\t\t'List.RemoveNulls',\n\t\t'List.RemoveRange',\n\t\t'List.Repeat',\n\t\t'List.ReplaceMatchingItems',\n\t\t'List.ReplaceRange',\n\t\t'List.ReplaceValue',\n\t\t'List.Reverse',\n\t\t'List.Select',\n\t\t'List.Single',\n\t\t'List.SingleOrDefault',\n\t\t'List.Skip',\n\t\t'List.Sort',\n\t\t'List.StandardDeviation',\n\t\t'List.Sum',\n\t\t'List.Times',\n\t\t'List.Transform',\n\t\t'List.TransformMany',\n\t\t'List.Union',\n\t\t'List.Zip',\n\t\t'Logical.From',\n\t\t'Logical.FromText',\n\t\t'Logical.ToText',\n\t\t'MQ.Queue',\n\t\t'MySQL.Database',\n\t\t'Number.Abs',\n\t\t'Number.Acos',\n\t\t'Number.Asin',\n\t\t'Number.Atan',\n\t\t'Number.Atan2',\n\t\t'Number.BitwiseAnd',\n\t\t'Number.BitwiseNot',\n\t\t'Number.BitwiseOr',\n\t\t'Number.BitwiseShiftLeft',\n\t\t'Number.BitwiseShiftRight',\n\t\t'Number.BitwiseXor',\n\t\t'Number.Combinations',\n\t\t'Number.Cos',\n\t\t'Number.Cosh',\n\t\t'Number.Exp',\n\t\t'Number.Factorial',\n\t\t'Number.From',\n\t\t'Number.FromText',\n\t\t'Number.IntegerDivide',\n\t\t'Number.IsEven',\n\t\t'Number.IsNaN',\n\t\t'Number.IsOdd',\n\t\t'Number.Ln',\n\t\t'Number.Log',\n\t\t'Number.Log10',\n\t\t'Number.Mod',\n\t\t'Number.Permutations',\n\t\t'Number.Power',\n\t\t'Number.Random',\n\t\t'Number.RandomBetween',\n\t\t'Number.Round',\n\t\t'Number.RoundAwayFromZero',\n\t\t'Number.RoundDown',\n\t\t'Number.RoundTowardZero',\n\t\t'Number.RoundUp',\n\t\t'Number.Sign',\n\t\t'Number.Sin',\n\t\t'Number.Sinh',\n\t\t'Number.Sqrt',\n\t\t'Number.Tan',\n\t\t'Number.Tanh',\n\t\t'Number.ToText',\n\t\t'OData.Feed',\n\t\t'Odbc.DataSource',\n\t\t'Odbc.Query',\n\t\t'OleDb.DataSource',\n\t\t'OleDb.Query',\n\t\t'Oracle.Database',\n\t\t'Percentage.From',\n\t\t'PostgreSQL.Database',\n\t\t'RData.FromBinary',\n\t\t'Record.AddField',\n\t\t'Record.Combine',\n\t\t'Record.Field',\n\t\t'Record.FieldCount',\n\t\t'Record.FieldNames',\n\t\t'Record.FieldOrDefault',\n\t\t'Record.FieldValues',\n\t\t'Record.FromList',\n\t\t'Record.FromTable',\n\t\t'Record.HasFields',\n\t\t'Record.RemoveFields',\n\t\t'Record.RenameFields',\n\t\t'Record.ReorderFields',\n\t\t'Record.SelectFields',\n\t\t'Record.ToList',\n\t\t'Record.ToTable',\n\t\t'Record.TransformFields',\n\t\t'Replacer.ReplaceText',\n\t\t'Replacer.ReplaceValue',\n\t\t'RowExpression.Column',\n\t\t'RowExpression.From',\n\t\t'Salesforce.Data',\n\t\t'Salesforce.Reports',\n\t\t'SapBusinessWarehouse.Cubes',\n\t\t'SapHana.Database',\n\t\t'SharePoint.Contents',\n\t\t'SharePoint.Files',\n\t\t'SharePoint.Tables',\n\t\t'Single.From',\n\t\t'Soda.Feed',\n\t\t'Splitter.SplitByNothing',\n\t\t'Splitter.SplitTextByAnyDelimiter',\n\t\t'Splitter.SplitTextByDelimiter',\n\t\t'Splitter.SplitTextByEachDelimiter',\n\t\t'Splitter.SplitTextByLengths',\n\t\t'Splitter.SplitTextByPositions',\n\t\t'Splitter.SplitTextByRanges',\n\t\t'Splitter.SplitTextByRepeatedLengths',\n\t\t'Splitter.SplitTextByWhitespace',\n\t\t'Sql.Database',\n\t\t'Sql.Databases',\n\t\t'SqlExpression.SchemaFrom',\n\t\t'SqlExpression.ToExpression',\n\t\t'Sybase.Database',\n\t\t'Table.AddColumn',\n\t\t'Table.AddIndexColumn',\n\t\t'Table.AddJoinColumn',\n\t\t'Table.AddKey',\n\t\t'Table.AggregateTableColumn',\n\t\t'Table.AlternateRows',\n\t\t'Table.Buffer',\n\t\t'Table.Column',\n\t\t'Table.ColumnCount',\n\t\t'Table.ColumnNames',\n\t\t'Table.ColumnsOfType',\n\t\t'Table.Combine',\n\t\t'Table.CombineColumns',\n\t\t'Table.Contains',\n\t\t'Table.ContainsAll',\n\t\t'Table.ContainsAny',\n\t\t'Table.DemoteHeaders',\n\t\t'Table.Distinct',\n\t\t'Table.DuplicateColumn',\n\t\t'Table.ExpandListColumn',\n\t\t'Table.ExpandRecordColumn',\n\t\t'Table.ExpandTableColumn',\n\t\t'Table.FillDown',\n\t\t'Table.FillUp',\n\t\t'Table.FilterWithDataTable',\n\t\t'Table.FindText',\n\t\t'Table.First',\n\t\t'Table.FirstN',\n\t\t'Table.FirstValue',\n\t\t'Table.FromColumns',\n\t\t'Table.FromList',\n\t\t'Table.FromPartitions',\n\t\t'Table.FromRecords',\n\t\t'Table.FromRows',\n\t\t'Table.FromValue',\n\t\t'Table.Group',\n\t\t'Table.HasColumns',\n\t\t'Table.InsertRows',\n\t\t'Table.IsDistinct',\n\t\t'Table.IsEmpty',\n\t\t'Table.Join',\n\t\t'Table.Keys',\n\t\t'Table.Last',\n\t\t'Table.LastN',\n\t\t'Table.MatchesAllRows',\n\t\t'Table.MatchesAnyRows',\n\t\t'Table.Max',\n\t\t'Table.MaxN',\n\t\t'Table.Min',\n\t\t'Table.MinN',\n\t\t'Table.NestedJoin',\n\t\t'Table.Partition',\n\t\t'Table.PartitionValues',\n\t\t'Table.Pivot',\n\t\t'Table.PositionOf',\n\t\t'Table.PositionOfAny',\n\t\t'Table.PrefixColumns',\n\t\t'Table.Profile',\n\t\t'Table.PromoteHeaders',\n\t\t'Table.Range',\n\t\t'Table.RemoveColumns',\n\t\t'Table.RemoveFirstN',\n\t\t'Table.RemoveLastN',\n\t\t'Table.RemoveMatchingRows',\n\t\t'Table.RemoveRows',\n\t\t'Table.RemoveRowsWithErrors',\n\t\t'Table.RenameColumns',\n\t\t'Table.ReorderColumns',\n\t\t'Table.Repeat',\n\t\t'Table.ReplaceErrorValues',\n\t\t'Table.ReplaceKeys',\n\t\t'Table.ReplaceMatchingRows',\n\t\t'Table.ReplaceRelationshipIdentity',\n\t\t'Table.ReplaceRows',\n\t\t'Table.ReplaceValue',\n\t\t'Table.ReverseRows',\n\t\t'Table.RowCount',\n\t\t'Table.Schema',\n\t\t'Table.SelectColumns',\n\t\t'Table.SelectRows',\n\t\t'Table.SelectRowsWithErrors',\n\t\t'Table.SingleRow',\n\t\t'Table.Skip',\n\t\t'Table.Sort',\n\t\t'Table.SplitColumn',\n\t\t'Table.ToColumns',\n\t\t'Table.ToList',\n\t\t'Table.ToRecords',\n\t\t'Table.ToRows',\n\t\t'Table.TransformColumnNames',\n\t\t'Table.TransformColumnTypes',\n\t\t'Table.TransformColumns',\n\t\t'Table.TransformRows',\n\t\t'Table.Transpose',\n\t\t'Table.Unpivot',\n\t\t'Table.UnpivotOtherColumns',\n\t\t'Table.View',\n\t\t'Table.ViewFunction',\n\t\t'TableAction.DeleteRows',\n\t\t'TableAction.InsertRows',\n\t\t'TableAction.UpdateRows',\n\t\t'Tables.GetRelationships',\n\t\t'Teradata.Database',\n\t\t'Text.AfterDelimiter',\n\t\t'Text.At',\n\t\t'Text.BeforeDelimiter',\n\t\t'Text.BetweenDelimiters',\n\t\t'Text.Clean',\n\t\t'Text.Combine',\n\t\t'Text.Contains',\n\t\t'Text.End',\n\t\t'Text.EndsWith',\n\t\t'Text.Format',\n\t\t'Text.From',\n\t\t'Text.FromBinary',\n\t\t'Text.Insert',\n\t\t'Text.Length',\n\t\t'Text.Lower',\n\t\t'Text.Middle',\n\t\t'Text.NewGuid',\n\t\t'Text.PadEnd',\n\t\t'Text.PadStart',\n\t\t'Text.PositionOf',\n\t\t'Text.PositionOfAny',\n\t\t'Text.Proper',\n\t\t'Text.Range',\n\t\t'Text.Remove',\n\t\t'Text.RemoveRange',\n\t\t'Text.Repeat',\n\t\t'Text.Replace',\n\t\t'Text.ReplaceRange',\n\t\t'Text.Select',\n\t\t'Text.Split',\n\t\t'Text.SplitAny',\n\t\t'Text.Start',\n\t\t'Text.StartsWith',\n\t\t'Text.ToBinary',\n\t\t'Text.ToList',\n\t\t'Text.Trim',\n\t\t'Text.TrimEnd',\n\t\t'Text.TrimStart',\n\t\t'Text.Upper',\n\t\t'Time.EndOfHour',\n\t\t'Time.From',\n\t\t'Time.FromText',\n\t\t'Time.Hour',\n\t\t'Time.Minute',\n\t\t'Time.Second',\n\t\t'Time.StartOfHour',\n\t\t'Time.ToRecord',\n\t\t'Time.ToText',\n\t\t'Type.AddTableKey',\n\t\t'Type.ClosedRecord',\n\t\t'Type.Facets',\n\t\t'Type.ForFunction',\n\t\t'Type.ForRecord',\n\t\t'Type.FunctionParameters',\n\t\t'Type.FunctionRequiredParameters',\n\t\t'Type.FunctionReturn',\n\t\t'Type.Is',\n\t\t'Type.IsNullable',\n\t\t'Type.IsOpenRecord',\n\t\t'Type.ListItem',\n\t\t'Type.NonNullable',\n\t\t'Type.OpenRecord',\n\t\t'Type.RecordFields',\n\t\t'Type.ReplaceFacets',\n\t\t'Type.ReplaceTableKeys',\n\t\t'Type.TableColumn',\n\t\t'Type.TableKeys',\n\t\t'Type.TableRow',\n\t\t'Type.TableSchema',\n\t\t'Type.Union',\n\t\t'Uri.BuildQueryString',\n\t\t'Uri.Combine',\n\t\t'Uri.EscapeDataString',\n\t\t'Uri.Parts',\n\t\t'Value.Add',\n\t\t'Value.As',\n\t\t'Value.Compare',\n\t\t'Value.Divide',\n\t\t'Value.Equals',\n\t\t'Value.Firewall',\n\t\t'Value.FromText',\n\t\t'Value.Is',\n\t\t'Value.Metadata',\n\t\t'Value.Multiply',\n\t\t'Value.NativeQuery',\n\t\t'Value.NullableEquals',\n\t\t'Value.RemoveMetadata',\n\t\t'Value.ReplaceMetadata',\n\t\t'Value.ReplaceType',\n\t\t'Value.Subtract',\n\t\t'Value.Type',\n\t\t'ValueAction.NativeStatement',\n\t\t'ValueAction.Replace',\n\t\t'Variable.Value',\n\t\t'Web.Contents',\n\t\t'Web.Page',\n\t\t'WebAction.Request',\n\t\t'Xml.Document',\n\t\t'Xml.Tables'\n\t],\n\n\tbuiltinConstants: [\n\t\t'BinaryEncoding.Base64',\n\t\t'BinaryEncoding.Hex',\n\t\t'BinaryOccurrence.Optional',\n\t\t'BinaryOccurrence.Repeating',\n\t\t'BinaryOccurrence.Required',\n\t\t'ByteOrder.BigEndian',\n\t\t'ByteOrder.LittleEndian',\n\t\t'Compression.Deflate',\n\t\t'Compression.GZip',\n\t\t'CsvStyle.QuoteAfterDelimiter',\n\t\t'CsvStyle.QuoteAlways',\n\t\t'Culture.Current',\n\t\t'Day.Friday',\n\t\t'Day.Monday',\n\t\t'Day.Saturday',\n\t\t'Day.Sunday',\n\t\t'Day.Thursday',\n\t\t'Day.Tuesday',\n\t\t'Day.Wednesday',\n\t\t'ExtraValues.Error',\n\t\t'ExtraValues.Ignore',\n\t\t'ExtraValues.List',\n\t\t'GroupKind.Global',\n\t\t'GroupKind.Local',\n\t\t'JoinAlgorithm.Dynamic',\n\t\t'JoinAlgorithm.LeftHash',\n\t\t'JoinAlgorithm.LeftIndex',\n\t\t'JoinAlgorithm.PairwiseHash',\n\t\t'JoinAlgorithm.RightHash',\n\t\t'JoinAlgorithm.RightIndex',\n\t\t'JoinAlgorithm.SortMerge',\n\t\t'JoinKind.FullOuter',\n\t\t'JoinKind.Inner',\n\t\t'JoinKind.LeftAnti',\n\t\t'JoinKind.LeftOuter',\n\t\t'JoinKind.RightAnti',\n\t\t'JoinKind.RightOuter',\n\t\t'JoinSide.Left',\n\t\t'JoinSide.Right',\n\t\t'MissingField.Error',\n\t\t'MissingField.Ignore',\n\t\t'MissingField.UseNull',\n\t\t'Number.E',\n\t\t'Number.Epsilon',\n\t\t'Number.NaN',\n\t\t'Number.NegativeInfinity',\n\t\t'Number.PI',\n\t\t'Number.PositiveInfinity',\n\t\t'Occurrence.All',\n\t\t'Occurrence.First',\n\t\t'Occurrence.Last',\n\t\t'Occurrence.Optional',\n\t\t'Occurrence.Repeating',\n\t\t'Occurrence.Required',\n\t\t'Order.Ascending',\n\t\t'Order.Descending',\n\t\t'Precision.Decimal',\n\t\t'Precision.Double',\n\t\t'QuoteStyle.Csv',\n\t\t'QuoteStyle.None',\n\t\t'RelativePosition.FromEnd',\n\t\t'RelativePosition.FromStart',\n\t\t'RoundingMode.AwayFromZero',\n\t\t'RoundingMode.Down',\n\t\t'RoundingMode.ToEven',\n\t\t'RoundingMode.TowardZero',\n\t\t'RoundingMode.Up',\n\t\t'SapHanaDistribution.All',\n\t\t'SapHanaDistribution.Connection',\n\t\t'SapHanaDistribution.Off',\n\t\t'SapHanaDistribution.Statement',\n\t\t'SapHanaRangeOperator.Equals',\n\t\t'SapHanaRangeOperator.GreaterThan',\n\t\t'SapHanaRangeOperator.GreaterThanOrEquals',\n\t\t'SapHanaRangeOperator.LessThan',\n\t\t'SapHanaRangeOperator.LessThanOrEquals',\n\t\t'SapHanaRangeOperator.NotEquals',\n\t\t'TextEncoding.Ascii',\n\t\t'TextEncoding.BigEndianUnicode',\n\t\t'TextEncoding.Unicode',\n\t\t'TextEncoding.Utf16',\n\t\t'TextEncoding.Utf8',\n\t\t'TextEncoding.Windows',\n\t\t'TraceLevel.Critical',\n\t\t'TraceLevel.Error',\n\t\t'TraceLevel.Information',\n\t\t'TraceLevel.Verbose',\n\t\t'TraceLevel.Warning',\n\t\t'WebMethod.Delete',\n\t\t'WebMethod.Get',\n\t\t'WebMethod.Head',\n\t\t'WebMethod.Patch',\n\t\t'WebMethod.Post',\n\t\t'WebMethod.Put'\n\t],\n\n\tbuiltinTypes: [\n\t\t'Action.Type',\n\t\t'Any.Type',\n\t\t'Binary.Type',\n\t\t'BinaryEncoding.Type',\n\t\t'BinaryOccurrence.Type',\n\t\t'Byte.Type',\n\t\t'ByteOrder.Type',\n\t\t'Character.Type',\n\t\t'Compression.Type',\n\t\t'CsvStyle.Type',\n\t\t'Currency.Type',\n\t\t'Date.Type',\n\t\t'DateTime.Type',\n\t\t'DateTimeZone.Type',\n\t\t'Day.Type',\n\t\t'Decimal.Type',\n\t\t'Double.Type',\n\t\t'Duration.Type',\n\t\t'ExtraValues.Type',\n\t\t'Function.Type',\n\t\t'GroupKind.Type',\n\t\t'Guid.Type',\n\t\t'Int16.Type',\n\t\t'Int32.Type',\n\t\t'Int64.Type',\n\t\t'Int8.Type',\n\t\t'JoinAlgorithm.Type',\n\t\t'JoinKind.Type',\n\t\t'JoinSide.Type',\n\t\t'List.Type',\n\t\t'Logical.Type',\n\t\t'MissingField.Type',\n\t\t'None.Type',\n\t\t'Null.Type',\n\t\t'Number.Type',\n\t\t'Occurrence.Type',\n\t\t'Order.Type',\n\t\t'Password.Type',\n\t\t'Percentage.Type',\n\t\t'Precision.Type',\n\t\t'QuoteStyle.Type',\n\t\t'Record.Type',\n\t\t'RelativePosition.Type',\n\t\t'RoundingMode.Type',\n\t\t'SapHanaDistribution.Type',\n\t\t'SapHanaRangeOperator.Type',\n\t\t'Single.Type',\n\t\t'Table.Type',\n\t\t'Text.Type',\n\t\t'TextEncoding.Type',\n\t\t'Time.Type',\n\t\t'TraceLevel.Type',\n\t\t'Type.Type',\n\t\t'Uri.Type',\n\t\t'WebMethod.Type'\n\t],\n\n\ttokenizer: {\n\t\troot: [\n\t\t\t// quoted identifier\n\t\t\t[/#\"[\\w \\.]+\"/, 'identifier.quote'],\n\n\t\t\t// numbers\n\t\t\t[/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\n\t\t\t[/0[xX][0-9a-fA-F]+/, 'number.hex'],\n\t\t\t[/\\d+([eE][\\-+]?\\d+)?/, 'number'],\n\n\t\t\t// keywords\n\t\t\t[\n\t\t\t\t/(#?[a-z]+)\\b/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@typeKeywords': 'type',\n\t\t\t\t\t\t'@keywords': 'keyword',\n\t\t\t\t\t\t'@constants': 'constant',\n\t\t\t\t\t\t'@constructors': 'constructor',\n\t\t\t\t\t\t'@operatorKeywords': 'operators',\n\t\t\t\t\t\t'@default': 'identifier'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t// built-in types\n\t\t\t[\n\t\t\t\t/\\b([A-Z][a-zA-Z0-9]+\\.Type)\\b/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@builtinTypes': 'type',\n\t\t\t\t\t\t'@default': 'identifier'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t// other built-ins\n\t\t\t[\n\t\t\t\t/\\b([A-Z][a-zA-Z0-9]+\\.[A-Z][a-zA-Z0-9]+)\\b/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@builtinFunctions': 'keyword.function',\n\t\t\t\t\t\t'@builtinConstants': 'constant',\n\t\t\t\t\t\t'@default': 'identifier'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t// other identifiers\n\t\t\t[/\\b([a-zA-Z_][\\w\\.]*)\\b/, 'identifier'],\n\n\t\t\t{ include: '@whitespace' },\n\t\t\t{ include: '@comments' },\n\t\t\t{ include: '@strings' },\n\n\t\t\t[/[{}()\\[\\]]/, '@brackets'],\n\t\t\t[/([=\\+<>\\-\\*&@\\?\\/!])|([<>]=)|(<>)|(=>)|(\\.\\.\\.)|(\\.\\.)/, 'operators'],\n\t\t\t[/[,;]/, 'delimiter']\n\t\t],\n\n\t\twhitespace: [[/\\s+/, 'white']],\n\n\t\tcomments: [\n\t\t\t['\\\\/\\\\*', 'comment', '@comment'],\n\t\t\t['\\\\/\\\\/+.*', 'comment']\n\t\t],\n\n\t\tcomment: [\n\t\t\t['\\\\*\\\\/', 'comment', '@pop'],\n\t\t\t['.', 'comment']\n\t\t],\n\n\t\tstrings: [['\"', 'string', '@string']],\n\n\t\tstring: [\n\t\t\t['\"\"', 'string.escape'],\n\t\t\t['\"', 'string', '@pop'],\n\t\t\t['.', 'string']\n\t\t]\n\t}\n}",
  "powershell": "<languages.IMonarchLanguage>{\n\tdefaultToken: '',\n\tignoreCase: true,\n\ttokenPostfix: '.ps1',\n\n\tbrackets: [\n\t\t{ token: 'delimiter.curly', open: '{', close: '}' },\n\t\t{ token: 'delimiter.square', open: '[', close: ']' },\n\t\t{ token: 'delimiter.parenthesis', open: '(', close: ')' }\n\t],\n\n\tkeywords: [\n\t\t'begin',\n\t\t'break',\n\t\t'catch',\n\t\t'class',\n\t\t'continue',\n\t\t'data',\n\t\t'define',\n\t\t'do',\n\t\t'dynamicparam',\n\t\t'else',\n\t\t'elseif',\n\t\t'end',\n\t\t'exit',\n\t\t'filter',\n\t\t'finally',\n\t\t'for',\n\t\t'foreach',\n\t\t'from',\n\t\t'function',\n\t\t'if',\n\t\t'in',\n\t\t'param',\n\t\t'process',\n\t\t'return',\n\t\t'switch',\n\t\t'throw',\n\t\t'trap',\n\t\t'try',\n\t\t'until',\n\t\t'using',\n\t\t'var',\n\t\t'while',\n\t\t'workflow',\n\t\t'parallel',\n\t\t'sequence',\n\t\t'inlinescript',\n\t\t'configuration'\n\t],\n\n\thelpKeywords:\n\t\t/SYNOPSIS|DESCRIPTION|PARAMETER|EXAMPLE|INPUTS|OUTPUTS|NOTES|LINK|COMPONENT|ROLE|FUNCTIONALITY|FORWARDHELPTARGETNAME|FORWARDHELPCATEGORY|REMOTEHELPRUNSPACE|EXTERNALHELP/,\n\n\t// we include these common regular expressions\n\tsymbols: /[=><!~?&%|+\\-*\\/\\^;\\.,]+/,\n\tescapes: /`(?:[abfnrtv\\\\\"'$]|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n\n\t// The main tokenizer for our languages\n\ttokenizer: {\n\t\troot: [\n\t\t\t// commands and keywords\n\t\t\t[\n\t\t\t\t/[a-zA-Z_][\\w-]*/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@keywords': { token: 'keyword.$0' },\n\t\t\t\t\t\t'@default': ''\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t// whitespace\n\t\t\t[/[ \\t\\r\\n]+/, ''],\n\n\t\t\t// labels\n\t\t\t[/^:\\w*/, 'metatag'],\n\n\t\t\t// variables\n\t\t\t[\n\t\t\t\t/\\$(\\{((global|local|private|script|using):)?[\\w]+\\}|((global|local|private|script|using):)?[\\w]+)/,\n\t\t\t\t'variable'\n\t\t\t],\n\n\t\t\t// Comments\n\t\t\t[/<#/, 'comment', '@comment'],\n\t\t\t[/#.*$/, 'comment'],\n\n\t\t\t// delimiters\n\t\t\t[/[{}()\\[\\]]/, '@brackets'],\n\t\t\t[/@symbols/, 'delimiter'],\n\n\t\t\t// numbers\n\t\t\t[/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\n\t\t\t[/0[xX][0-9a-fA-F_]*[0-9a-fA-F]/, 'number.hex'],\n\t\t\t[/\\d+?/, 'number'],\n\n\t\t\t// delimiter: after number because of .\\d floats\n\t\t\t[/[;,.]/, 'delimiter'],\n\n\t\t\t// strings:\n\t\t\t[/\\@\"/, 'string', '@herestring.\"'],\n\t\t\t[/\\@'/, 'string', \"@herestring.'\"],\n\t\t\t[\n\t\t\t\t/\"/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@eos': 'string',\n\t\t\t\t\t\t'@default': { token: 'string', next: '@string.\"' }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t[\n\t\t\t\t/'/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@eos': 'string',\n\t\t\t\t\t\t'@default': { token: 'string', next: \"@string.'\" }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t],\n\n\t\tstring: [\n\t\t\t[\n\t\t\t\t/[^\"'\\$`]+/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@eos': { token: 'string', next: '@popall' },\n\t\t\t\t\t\t'@default': 'string'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t[\n\t\t\t\t/@escapes/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@eos': { token: 'string.escape', next: '@popall' },\n\t\t\t\t\t\t'@default': 'string.escape'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t[\n\t\t\t\t/`./,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@eos': {\n\t\t\t\t\t\t\ttoken: 'string.escape.invalid',\n\t\t\t\t\t\t\tnext: '@popall'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'@default': 'string.escape.invalid'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t[\n\t\t\t\t/\\$[\\w]+$/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'$S2==\"': { token: 'variable', next: '@popall' },\n\t\t\t\t\t\t'@default': { token: 'string', next: '@popall' }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t[\n\t\t\t\t/\\$[\\w]+/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'$S2==\"': 'variable',\n\t\t\t\t\t\t'@default': 'string'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t[\n\t\t\t\t/[\"']/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'$#==$S2': { token: 'string', next: '@pop' },\n\t\t\t\t\t\t'@default': {\n\t\t\t\t\t\t\tcases: {\n\t\t\t\t\t\t\t\t'@eos': { token: 'string', next: '@popall' },\n\t\t\t\t\t\t\t\t'@default': 'string'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t],\n\n\t\therestring: [\n\t\t\t[\n\t\t\t\t/^\\s*([\"'])@/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'$1==$S2': { token: 'string', next: '@pop' },\n\t\t\t\t\t\t'@default': 'string'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/[^\\$`]+/, 'string'],\n\t\t\t[/@escapes/, 'string.escape'],\n\t\t\t[/`./, 'string.escape.invalid'],\n\t\t\t[\n\t\t\t\t/\\$[\\w]+/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'$S2==\"': 'variable',\n\t\t\t\t\t\t'@default': 'string'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t],\n\n\t\tcomment: [\n\t\t\t[/[^#\\.]+/, 'comment'],\n\t\t\t[/#>/, 'comment', '@pop'],\n\t\t\t[/(\\.)(@helpKeywords)(?!\\w)/, { token: 'comment.keyword.$2' }],\n\t\t\t[/[\\.#]/, 'comment']\n\t\t]\n\t}\n}",
  "protobuf": "<languages.IMonarchLanguage>{\n\tdefaultToken: '',\n\ttokenPostfix: '.proto',\n\n\tbrackets: [\n\t\t{ open: '{', close: '}', token: 'delimiter.curly' },\n\t\t{ open: '[', close: ']', token: 'delimiter.square' },\n\t\t{ open: '(', close: ')', token: 'delimiter.parenthesis' },\n\t\t{ open: '<', close: '>', token: 'delimiter.angle' }\n\t],\n\n\tsymbols: /[=><!~?:&|+\\-*/^%]+/,\n\n\tkeywords: [\n\t\t'syntax',\n\t\t'import',\n\t\t'weak',\n\t\t'public',\n\t\t'package',\n\t\t'option',\n\t\t'repeated',\n\t\t'oneof',\n\t\t'map',\n\t\t'reserved',\n\t\t'to',\n\t\t'max',\n\t\t'enum',\n\t\t'message',\n\t\t'service',\n\t\t'rpc',\n\t\t'stream',\n\t\t'returns',\n\t\t'package',\n\t\t'optional',\n\t\t'true',\n\t\t'false'\n\t],\n\n\tbuiltinTypes: [\n\t\t'double',\n\t\t'float',\n\t\t'int32',\n\t\t'int64',\n\t\t'uint32',\n\t\t'uint64',\n\t\t'sint32',\n\t\t'sint64',\n\t\t'fixed32',\n\t\t'fixed64',\n\t\t'sfixed32',\n\t\t'sfixed64',\n\t\t'bool',\n\t\t'string',\n\t\t'bytes'\n\t],\n\n\toperators: ['=', '+', '-'],\n\n\tnamedLiterals,\n\n\tescapes: `\\\\\\\\(u{[0-9A-Fa-f]+}|n|r|t|\\\\\\\\|'|\\\\\\${)`,\n\tidentifier: /[a-zA-Z]\\w*/,\n\tfullIdentifier: /@identifier(?:\\s*\\.\\s*@identifier)*/,\n\toptionName: /(?:@identifier|\\(\\s*@fullIdentifier\\s*\\))(?:\\s*\\.\\s*@identifier)*/,\n\tmessageName: /@identifier/,\n\tenumName: /@identifier/,\n\tmessageType: /\\.?\\s*(?:@identifier\\s*\\.\\s*)*@messageName/,\n\tenumType: /\\.?\\s*(?:@identifier\\s*\\.\\s*)*@enumName/,\n\n\tfloatLit: /[0-9]+\\s*\\.\\s*[0-9]*(?:@exponent)?|[0-9]+@exponent|\\.[0-9]+(?:@exponent)?/,\n\texponent: /[eE]\\s*[+-]?\\s*[0-9]+/,\n\tboolLit: /true\\b|false\\b/,\n\n\tdecimalLit: /[1-9][0-9]*/,\n\toctalLit: /0[0-7]*/,\n\thexLit: /0[xX][0-9a-fA-F]+/,\n\n\ttype: /double|float|int32|int64|uint32|uint64|sint32|sint64|fixed32|fixed64|sfixed32|sfixed64|bool|string|bytes|@messageType|@enumType/,\n\tkeyType: /int32|int64|uint32|uint64|sint32|sint64|fixed32|fixed64|sfixed32|sfixed64|bool|string/,\n\n\ttokenizer: {\n\t\troot: [\n\t\t\t{ include: '@whitespace' },\n\t\t\t[/syntax/, 'keyword'],\n\t\t\t[/=/, 'operators'],\n\t\t\t[/;/, 'delimiter'],\n\t\t\t[\n\t\t\t\t/(\")(proto3)(\")/,\n\t\t\t\t['string.quote', 'string', { token: 'string.quote', switchTo: '@topLevel.proto3' }]\n\t\t\t],\n\t\t\t[\n\t\t\t\t/(\")(proto2)(\")/,\n\t\t\t\t['string.quote', 'string', { token: 'string.quote', switchTo: '@topLevel.proto2' }]\n\t\t\t],\n\t\t\t[\n\t\t\t\t// If no `syntax` provided, regarded as proto2\n\t\t\t\t/.*?/,\n\t\t\t\t{ token: '', switchTo: '@topLevel.proto2' }\n\t\t\t]\n\t\t],\n\n\t\ttopLevel: [\n\t\t\t// whitespace\n\t\t\t{ include: '@whitespace' },\n\t\t\t{ include: '@constant' },\n\t\t\t[/=/, 'operators'],\n\t\t\t[/[;.]/, 'delimiter'],\n\t\t\t[\n\t\t\t\t/@fullIdentifier/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\toption: { token: 'keyword', next: '@option.$S2' },\n\t\t\t\t\t\tenum: { token: 'keyword', next: '@enumDecl.$S2' },\n\t\t\t\t\t\tmessage: { token: 'keyword', next: '@messageDecl.$S2' },\n\t\t\t\t\t\tservice: { token: 'keyword', next: '@serviceDecl.$S2' },\n\t\t\t\t\t\textend: {\n\t\t\t\t\t\t\tcases: {\n\t\t\t\t\t\t\t\t'$S2==proto2': { token: 'keyword', next: '@extendDecl.$S2' }\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'@keywords': 'keyword',\n\t\t\t\t\t\t'@default': 'identifier'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t],\n\n\t\tenumDecl: [\n\t\t\t{ include: '@whitespace' },\n\t\t\t[/@identifier/, 'type.identifier'],\n\t\t\t[/{/, { token: '@brackets', bracket: '@open', switchTo: '@enumBody.$S2' }]\n\t\t],\n\n\t\tenumBody: [\n\t\t\t{ include: '@whitespace' },\n\t\t\t{ include: '@constant' },\n\t\t\t[/=/, 'operators'],\n\t\t\t[/;/, 'delimiter'],\n\t\t\t[/option\\b/, 'keyword', '@option.$S2'],\n\t\t\t[/@identifier/, 'identifier'],\n\t\t\t[/\\[/, { token: '@brackets', bracket: '@open', next: '@options.$S2' }],\n\t\t\t[/}/, { token: '@brackets', bracket: '@close', next: '@pop' }]\n\t\t],\n\n\t\tmessageDecl: [\n\t\t\t{ include: '@whitespace' },\n\t\t\t[/@identifier/, 'type.identifier'],\n\t\t\t[/{/, { token: '@brackets', bracket: '@open', switchTo: '@messageBody.$S2' }]\n\t\t],\n\n\t\tmessageBody: [\n\t\t\t{ include: '@whitespace' },\n\t\t\t{ include: '@constant' },\n\t\t\t[/=/, 'operators'],\n\t\t\t[/;/, 'delimiter'],\n\t\t\t[\n\t\t\t\t'(map)(s*)(<)',\n\t\t\t\t['keyword', 'white', { token: '@brackets', bracket: '@open', next: '@map.$S2' }]\n\t\t\t],\n\t\t\t[\n\t\t\t\t/@identifier/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\toption: { token: 'keyword', next: '@option.$S2' },\n\t\t\t\t\t\tenum: { token: 'keyword', next: '@enumDecl.$S2' },\n\t\t\t\t\t\tmessage: { token: 'keyword', next: '@messageDecl.$S2' },\n\t\t\t\t\t\toneof: { token: 'keyword', next: '@oneofDecl.$S2' },\n\t\t\t\t\t\textensions: {\n\t\t\t\t\t\t\tcases: {\n\t\t\t\t\t\t\t\t'$S2==proto2': { token: 'keyword', next: '@reserved.$S2' }\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\treserved: { token: 'keyword', next: '@reserved.$S2' },\n\t\t\t\t\t\t'(?:repeated|optional)': { token: 'keyword', next: '@field.$S2' },\n\t\t\t\t\t\trequired: {\n\t\t\t\t\t\t\tcases: {\n\t\t\t\t\t\t\t\t'$S2==proto2': { token: 'keyword', next: '@field.$S2' }\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'$S2==proto3': { token: '@rematch', next: '@field.$S2' }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/\\[/, { token: '@brackets', bracket: '@open', next: '@options.$S2' }],\n\t\t\t[/}/, { token: '@brackets', bracket: '@close', next: '@pop' }]\n\t\t],\n\n\t\textendDecl: [\n\t\t\t{ include: '@whitespace' },\n\t\t\t[/@identifier/, 'type.identifier'],\n\t\t\t[/{/, { token: '@brackets', bracket: '@open', switchTo: '@extendBody.$S2' }]\n\t\t],\n\n\t\textendBody: [\n\t\t\t{ include: '@whitespace' },\n\t\t\t{ include: '@constant' },\n\t\t\t[/;/, 'delimiter'],\n\t\t\t[/(?:repeated|optional|required)/, 'keyword', '@field.$S2'],\n\t\t\t[/\\[/, { token: '@brackets', bracket: '@open', next: '@options.$S2' }],\n\t\t\t[/}/, { token: '@brackets', bracket: '@close', next: '@pop' }]\n\t\t],\n\n\t\toptions: [\n\t\t\t{ include: '@whitespace' },\n\t\t\t{ include: '@constant' },\n\t\t\t[/;/, 'delimiter'],\n\t\t\t[/@optionName/, 'annotation'],\n\t\t\t[/[()]/, 'annotation.brackets'],\n\t\t\t[/=/, 'operator'],\n\t\t\t[/\\]/, { token: '@brackets', bracket: '@close', next: '@pop' }]\n\t\t],\n\n\t\toption: [\n\t\t\t{ include: '@whitespace' },\n\t\t\t[/@optionName/, 'annotation'],\n\t\t\t[/[()]/, 'annotation.brackets'],\n\t\t\t[/=/, 'operator', '@pop']\n\t\t],\n\n\t\toneofDecl: [\n\t\t\t{ include: '@whitespace' },\n\t\t\t[/@identifier/, 'identifier'],\n\t\t\t[/{/, { token: '@brackets', bracket: '@open', switchTo: '@oneofBody.$S2' }]\n\t\t],\n\n\t\toneofBody: [\n\t\t\t{ include: '@whitespace' },\n\t\t\t{ include: '@constant' },\n\t\t\t[/;/, 'delimiter'],\n\t\t\t[/(@identifier)(\\s*)(=)/, ['identifier', 'white', 'delimiter']],\n\t\t\t[\n\t\t\t\t/@fullIdentifier|\\./,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@builtinTypes': 'keyword',\n\t\t\t\t\t\t'@default': 'type.identifier'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/\\[/, { token: '@brackets', bracket: '@open', next: '@options.$S2' }],\n\t\t\t[/}/, { token: '@brackets', bracket: '@close', next: '@pop' }]\n\t\t],\n\n\t\treserved: [\n\t\t\t{ include: '@whitespace' },\n\t\t\t[/,/, 'delimiter'],\n\t\t\t[/;/, 'delimiter', '@pop'],\n\t\t\t{ include: '@constant' },\n\t\t\t[/to\\b|max\\b/, 'keyword']\n\t\t],\n\n\t\tmap: [\n\t\t\t{ include: '@whitespace' },\n\t\t\t[\n\t\t\t\t/@fullIdentifier|\\./,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@builtinTypes': 'keyword',\n\t\t\t\t\t\t'@default': 'type.identifier'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/,/, 'delimiter'],\n\t\t\t[/>/, { token: '@brackets', bracket: '@close', switchTo: 'identifier' }]\n\t\t],\n\n\t\tfield: [\n\t\t\t{ include: '@whitespace' },\n\t\t\t[\n\t\t\t\t'group',\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'$S2==proto2': { token: 'keyword', switchTo: '@groupDecl.$S2' }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/(@identifier)(\\s*)(=)/, ['identifier', 'white', { token: 'delimiter', next: '@pop' }]],\n\t\t\t[\n\t\t\t\t/@fullIdentifier|\\./,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@builtinTypes': 'keyword',\n\t\t\t\t\t\t'@default': 'type.identifier'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t],\n\n\t\tgroupDecl: [\n\t\t\t{ include: '@whitespace' },\n\t\t\t[/@identifier/, 'identifier'],\n\t\t\t['=', 'operator'],\n\t\t\t[/{/, { token: '@brackets', bracket: '@open', switchTo: '@messageBody.$S2' }],\n\t\t\t{ include: '@constant' }\n\t\t],\n\n\t\ttype: [\n\t\t\t{ include: '@whitespace' },\n\t\t\t[/@identifier/, 'type.identifier', '@pop'],\n\t\t\t[/./, 'delimiter']\n\t\t],\n\n\t\tidentifier: [{ include: '@whitespace' }, [/@identifier/, 'identifier', '@pop']],\n\n\t\tserviceDecl: [\n\t\t\t{ include: '@whitespace' },\n\t\t\t[/@identifier/, 'identifier'],\n\t\t\t[/{/, { token: '@brackets', bracket: '@open', switchTo: '@serviceBody.$S2' }]\n\t\t],\n\n\t\tserviceBody: [\n\t\t\t{ include: '@whitespace' },\n\t\t\t{ include: '@constant' },\n\t\t\t[/;/, 'delimiter'],\n\t\t\t[/option\\b/, 'keyword', '@option.$S2'],\n\t\t\t[/rpc\\b/, 'keyword', '@rpc.$S2'],\n\t\t\t[/\\[/, { token: '@brackets', bracket: '@open', next: '@options.$S2' }],\n\t\t\t[/}/, { token: '@brackets', bracket: '@close', next: '@pop' }]\n\t\t],\n\n\t\trpc: [\n\t\t\t{ include: '@whitespace' },\n\t\t\t[/@identifier/, 'identifier'],\n\t\t\t[/\\(/, { token: '@brackets', bracket: '@open', switchTo: '@request.$S2' }],\n\t\t\t[/{/, { token: '@brackets', bracket: '@open', next: '@methodOptions.$S2' }],\n\t\t\t[/;/, 'delimiter', '@pop']\n\t\t],\n\n\t\trequest: [\n\t\t\t{ include: '@whitespace' },\n\t\t\t[\n\t\t\t\t/@messageType/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\tstream: { token: 'keyword', next: '@type.$S2' },\n\t\t\t\t\t\t'@default': 'type.identifier'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/\\)/, { token: '@brackets', bracket: '@close', switchTo: '@returns.$S2' }]\n\t\t],\n\n\t\treturns: [\n\t\t\t{ include: '@whitespace' },\n\t\t\t[/returns\\b/, 'keyword'],\n\t\t\t[/\\(/, { token: '@brackets', bracket: '@open', switchTo: '@response.$S2' }]\n\t\t],\n\n\t\tresponse: [\n\t\t\t{ include: '@whitespace' },\n\t\t\t[\n\t\t\t\t/@messageType/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\tstream: { token: 'keyword', next: '@type.$S2' },\n\t\t\t\t\t\t'@default': 'type.identifier'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/\\)/, { token: '@brackets', bracket: '@close', switchTo: '@rpc.$S2' }]\n\t\t],\n\n\t\tmethodOptions: [\n\t\t\t{ include: '@whitespace' },\n\t\t\t{ include: '@constant' },\n\t\t\t[/;/, 'delimiter'],\n\t\t\t['option', 'keyword'],\n\t\t\t[/@optionName/, 'annotation'],\n\t\t\t[/[()]/, 'annotation.brackets'],\n\t\t\t[/=/, 'operator'],\n\t\t\t[/}/, { token: '@brackets', bracket: '@close', next: '@pop' }]\n\t\t],\n\n\t\tcomment: [\n\t\t\t[/[^\\/*]+/, 'comment'],\n\t\t\t[/\\/\\*/, 'comment', '@push'], // nested comment\n\t\t\t['\\\\*/', 'comment', '@pop'],\n\t\t\t[/[\\/*]/, 'comment']\n\t\t],\n\n\t\tstring: [\n\t\t\t[/[^\\\\\"]+/, 'string'],\n\t\t\t[/@escapes/, 'string.escape'],\n\t\t\t[/\\\\./, 'string.escape.invalid'],\n\t\t\t[/\"/, { token: 'string.quote', bracket: '@close', next: '@pop' }]\n\t\t],\n\n\t\tstringSingle: [\n\t\t\t[/[^\\\\']+/, 'string'],\n\t\t\t[/@escapes/, 'string.escape'],\n\t\t\t[/\\\\./, 'string.escape.invalid'],\n\t\t\t[/'/, { token: 'string.quote', bracket: '@close', next: '@pop' }]\n\t\t],\n\n\t\tconstant: [\n\t\t\t['@boolLit', 'keyword.constant'],\n\t\t\t['@hexLit', 'number.hex'],\n\t\t\t['@octalLit', 'number.octal'],\n\t\t\t['@decimalLit', 'number'],\n\t\t\t['@floatLit', 'number.float'],\n\t\t\t[/(\"([^\"\\\\]|\\\\.)*|'([^'\\\\]|\\\\.)*)$/, 'string.invalid'], // non-terminated string\n\t\t\t[/\"/, { token: 'string.quote', bracket: '@open', next: '@string' }],\n\t\t\t[/'/, { token: 'string.quote', bracket: '@open', next: '@stringSingle' }],\n\t\t\t[/{/, { token: '@brackets', bracket: '@open', next: '@prototext' }],\n\t\t\t[/identifier/, 'identifier']\n\t\t],\n\n\t\twhitespace: [\n\t\t\t[/[ \\t\\r\\n]+/, 'white'],\n\t\t\t[/\\/\\*/, 'comment', '@comment'],\n\t\t\t[/\\/\\/.*$/, 'comment']\n\t\t],\n\n\t\tprototext: [\n\t\t\t{ include: '@whitespace' },\n\t\t\t{ include: '@constant' },\n\t\t\t[/@identifier/, 'identifier'],\n\t\t\t[/[:;]/, 'delimiter'],\n\t\t\t[/}/, { token: '@brackets', bracket: '@close', next: '@pop' }]\n\t\t]\n\t}\n}",
  "pug": "<languages.IMonarchLanguage>{\n\tdefaultToken: '',\n\ttokenPostfix: '.pug',\n\n\tignoreCase: true,\n\n\tbrackets: [\n\t\t{ token: 'delimiter.curly', open: '{', close: '}' },\n\t\t{ token: 'delimiter.array', open: '[', close: ']' },\n\t\t{ token: 'delimiter.parenthesis', open: '(', close: ')' }\n\t],\n\n\tkeywords: [\n\t\t'append',\n\t\t'block',\n\t\t'case',\n\t\t'default',\n\t\t'doctype',\n\t\t'each',\n\t\t'else',\n\t\t'extends',\n\t\t'for',\n\t\t'if',\n\t\t'in',\n\t\t'include',\n\t\t'mixin',\n\t\t'typeof',\n\t\t'unless',\n\t\t'var',\n\t\t'when'\n\t],\n\n\ttags: [\n\t\t'a',\n\t\t'abbr',\n\t\t'acronym',\n\t\t'address',\n\t\t'area',\n\t\t'article',\n\t\t'aside',\n\t\t'audio',\n\t\t'b',\n\t\t'base',\n\t\t'basefont',\n\t\t'bdi',\n\t\t'bdo',\n\t\t'blockquote',\n\t\t'body',\n\t\t'br',\n\t\t'button',\n\t\t'canvas',\n\t\t'caption',\n\t\t'center',\n\t\t'cite',\n\t\t'code',\n\t\t'col',\n\t\t'colgroup',\n\t\t'command',\n\t\t'datalist',\n\t\t'dd',\n\t\t'del',\n\t\t'details',\n\t\t'dfn',\n\t\t'div',\n\t\t'dl',\n\t\t'dt',\n\t\t'em',\n\t\t'embed',\n\t\t'fieldset',\n\t\t'figcaption',\n\t\t'figure',\n\t\t'font',\n\t\t'footer',\n\t\t'form',\n\t\t'frame',\n\t\t'frameset',\n\t\t'h1',\n\t\t'h2',\n\t\t'h3',\n\t\t'h4',\n\t\t'h5',\n\t\t'h6',\n\t\t'head',\n\t\t'header',\n\t\t'hgroup',\n\t\t'hr',\n\t\t'html',\n\t\t'i',\n\t\t'iframe',\n\t\t'img',\n\t\t'input',\n\t\t'ins',\n\t\t'keygen',\n\t\t'kbd',\n\t\t'label',\n\t\t'li',\n\t\t'link',\n\t\t'map',\n\t\t'mark',\n\t\t'menu',\n\t\t'meta',\n\t\t'meter',\n\t\t'nav',\n\t\t'noframes',\n\t\t'noscript',\n\t\t'object',\n\t\t'ol',\n\t\t'optgroup',\n\t\t'option',\n\t\t'output',\n\t\t'p',\n\t\t'param',\n\t\t'pre',\n\t\t'progress',\n\t\t'q',\n\t\t'rp',\n\t\t'rt',\n\t\t'ruby',\n\t\t's',\n\t\t'samp',\n\t\t'script',\n\t\t'section',\n\t\t'select',\n\t\t'small',\n\t\t'source',\n\t\t'span',\n\t\t'strike',\n\t\t'strong',\n\t\t'style',\n\t\t'sub',\n\t\t'summary',\n\t\t'sup',\n\t\t'table',\n\t\t'tbody',\n\t\t'td',\n\t\t'textarea',\n\t\t'tfoot',\n\t\t'th',\n\t\t'thead',\n\t\t'time',\n\t\t'title',\n\t\t'tr',\n\t\t'tracks',\n\t\t'tt',\n\t\t'u',\n\t\t'ul',\n\t\t'video',\n\t\t'wbr'\n\t],\n\n\t// we include these common regular expressions\n\tsymbols: /[\\+\\-\\*\\%\\&\\|\\!\\=\\/\\.\\,\\:]+/,\n\tescapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n\n\ttokenizer: {\n\t\troot: [\n\t\t\t// Tag or a keyword at start\n\t\t\t[\n\t\t\t\t/^(\\s*)([a-zA-Z_-][\\w-]*)/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'$2@tags': {\n\t\t\t\t\t\t\tcases: {\n\t\t\t\t\t\t\t\t'@eos': ['', 'tag'],\n\t\t\t\t\t\t\t\t'@default': ['', { token: 'tag', next: '@tag.$1' }]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'$2@keywords': ['', { token: 'keyword.$2' }],\n\t\t\t\t\t\t'@default': ['', '']\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t// id\n\t\t\t[\n\t\t\t\t/^(\\s*)(#[a-zA-Z_-][\\w-]*)/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@eos': ['', 'tag.id'],\n\t\t\t\t\t\t'@default': ['', { token: 'tag.id', next: '@tag.$1' }]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t// class\n\t\t\t[\n\t\t\t\t/^(\\s*)(\\.[a-zA-Z_-][\\w-]*)/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@eos': ['', 'tag.class'],\n\t\t\t\t\t\t'@default': ['', { token: 'tag.class', next: '@tag.$1' }]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t// plain text with pipe\n\t\t\t[/^(\\s*)(\\|.*)$/, ''],\n\n\t\t\t{ include: '@whitespace' },\n\n\t\t\t// keywords\n\t\t\t[\n\t\t\t\t/[a-zA-Z_$][\\w$]*/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@keywords': { token: 'keyword.$0' },\n\t\t\t\t\t\t'@default': ''\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t// delimiters and operators\n\t\t\t[/[{}()\\[\\]]/, '@brackets'],\n\t\t\t[/@symbols/, 'delimiter'],\n\n\t\t\t// numbers\n\t\t\t[/\\d+\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\n\t\t\t[/\\d+/, 'number'],\n\n\t\t\t// strings:\n\t\t\t[/\"/, 'string', '@string.\"'],\n\t\t\t[/'/, 'string', \"@string.'\"]\n\t\t],\n\n\t\ttag: [\n\t\t\t[/(\\.)(\\s*$)/, [{ token: 'delimiter', next: '@blockText.$S2.' }, '']],\n\t\t\t[/\\s+/, { token: '', next: '@simpleText' }],\n\n\t\t\t// id\n\t\t\t[\n\t\t\t\t/#[a-zA-Z_-][\\w-]*/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@eos': { token: 'tag.id', next: '@pop' },\n\t\t\t\t\t\t'@default': 'tag.id'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t// class\n\t\t\t[\n\t\t\t\t/\\.[a-zA-Z_-][\\w-]*/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@eos': { token: 'tag.class', next: '@pop' },\n\t\t\t\t\t\t'@default': 'tag.class'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t// attributes\n\t\t\t[/\\(/, { token: 'delimiter.parenthesis', next: '@attributeList' }]\n\t\t],\n\n\t\tsimpleText: [\n\t\t\t[/[^#]+$/, { token: '', next: '@popall' }],\n\t\t\t[/[^#]+/, { token: '' }],\n\n\t\t\t// interpolation\n\t\t\t[\n\t\t\t\t/(#{)([^}]*)(})/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@eos': [\n\t\t\t\t\t\t\t'interpolation.delimiter',\n\t\t\t\t\t\t\t'interpolation',\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttoken: 'interpolation.delimiter',\n\t\t\t\t\t\t\t\tnext: '@popall'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t],\n\t\t\t\t\t\t'@default': ['interpolation.delimiter', 'interpolation', 'interpolation.delimiter']\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t[/#$/, { token: '', next: '@popall' }],\n\t\t\t[/#/, '']\n\t\t],\n\n\t\tattributeList: [\n\t\t\t[/\\s+/, ''],\n\t\t\t[\n\t\t\t\t/(\\w+)(\\s*=\\s*)(\"|')/,\n\t\t\t\t['attribute.name', 'delimiter', { token: 'attribute.value', next: '@value.$3' }]\n\t\t\t],\n\t\t\t[/\\w+/, 'attribute.name'],\n\n\t\t\t[\n\t\t\t\t/,/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@eos': {\n\t\t\t\t\t\t\ttoken: 'attribute.delimiter',\n\t\t\t\t\t\t\tnext: '@popall'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'@default': 'attribute.delimiter'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t[/\\)$/, { token: 'delimiter.parenthesis', next: '@popall' }],\n\t\t\t[/\\)/, { token: 'delimiter.parenthesis', next: '@pop' }]\n\t\t],\n\n\t\twhitespace: [\n\t\t\t[/^(\\s*)(\\/\\/.*)$/, { token: 'comment', next: '@blockText.$1.comment' }],\n\t\t\t[/[ \\t\\r\\n]+/, ''],\n\t\t\t[/<!--/, { token: 'comment', next: '@comment' }]\n\t\t],\n\n\t\tblockText: [\n\t\t\t[\n\t\t\t\t/^\\s+.*$/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'($S2\\\\s+.*$)': { token: '$S3' },\n\t\t\t\t\t\t'@default': { token: '@rematch', next: '@popall' }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/./, { token: '@rematch', next: '@popall' }]\n\t\t],\n\n\t\tcomment: [\n\t\t\t[/[^<\\-]+/, 'comment.content'],\n\t\t\t[/-->/, { token: 'comment', next: '@pop' }],\n\t\t\t[/<!--/, 'comment.content.invalid'],\n\t\t\t[/[<\\-]/, 'comment.content']\n\t\t],\n\n\t\tstring: [\n\t\t\t[\n\t\t\t\t/[^\\\\\"'#]+/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@eos': { token: 'string', next: '@popall' },\n\t\t\t\t\t\t'@default': 'string'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t[\n\t\t\t\t/@escapes/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@eos': { token: 'string.escape', next: '@popall' },\n\t\t\t\t\t\t'@default': 'string.escape'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t[\n\t\t\t\t/\\\\./,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@eos': {\n\t\t\t\t\t\t\ttoken: 'string.escape.invalid',\n\t\t\t\t\t\t\tnext: '@popall'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'@default': 'string.escape.invalid'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t// interpolation\n\t\t\t[/(#{)([^}]*)(})/, ['interpolation.delimiter', 'interpolation', 'interpolation.delimiter']],\n\t\t\t[/#/, 'string'],\n\t\t\t[\n\t\t\t\t/[\"']/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'$#==$S2': { token: 'string', next: '@pop' },\n\t\t\t\t\t\t'@default': { token: 'string' }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t],\n\n\t\t// Almost identical to above, except for escapes and the output token\n\t\tvalue: [\n\t\t\t[\n\t\t\t\t/[^\\\\\"']+/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@eos': { token: 'attribute.value', next: '@popall' },\n\t\t\t\t\t\t'@default': 'attribute.value'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t[\n\t\t\t\t/\\\\./,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@eos': { token: 'attribute.value', next: '@popall' },\n\t\t\t\t\t\t'@default': 'attribute.value'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t[\n\t\t\t\t/[\"']/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'$#==$S2': { token: 'attribute.value', next: '@pop' },\n\t\t\t\t\t\t'@default': { token: 'attribute.value' }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t]\n\t}\n}",
  "python": "<languages.IMonarchLanguage>{\n\tdefaultToken: '',\n\ttokenPostfix: '.python',\n\n\tkeywords: [\n\t\t// This section is the result of running\n\t\t// `import keyword; for k in sorted(keyword.kwlist + keyword.softkwlist): print(\"  '\" + k + \"',\")`\n\t\t// in a Python REPL,\n\t\t// though note that the output from Python 3 is not a strict superset of the\n\t\t// output from Python 2.\n\t\t'False', // promoted to keyword.kwlist in Python 3\n\t\t'None', // promoted to keyword.kwlist in Python 3\n\t\t'True', // promoted to keyword.kwlist in Python 3\n\t\t'_', // new in Python 3.10\n\t\t'and',\n\t\t'as',\n\t\t'assert',\n\t\t'async', // new in Python 3\n\t\t'await', // new in Python 3\n\t\t'break',\n\t\t'case', // new in Python 3.10\n\t\t'class',\n\t\t'continue',\n\t\t'def',\n\t\t'del',\n\t\t'elif',\n\t\t'else',\n\t\t'except',\n\t\t'exec', // Python 2, but not 3.\n\t\t'finally',\n\t\t'for',\n\t\t'from',\n\t\t'global',\n\t\t'if',\n\t\t'import',\n\t\t'in',\n\t\t'is',\n\t\t'lambda',\n\t\t'match', // new in Python 3.10\n\t\t'nonlocal', // new in Python 3\n\t\t'not',\n\t\t'or',\n\t\t'pass',\n\t\t'print', // Python 2, but not 3.\n\t\t'raise',\n\t\t'return',\n\t\t'try',\n\t\t'type', // new in Python 3.12\n\t\t'while',\n\t\t'with',\n\t\t'yield',\n\n\t\t'int',\n\t\t'float',\n\t\t'long',\n\t\t'complex',\n\t\t'hex',\n\n\t\t'abs',\n\t\t'all',\n\t\t'any',\n\t\t'apply',\n\t\t'basestring',\n\t\t'bin',\n\t\t'bool',\n\t\t'buffer',\n\t\t'bytearray',\n\t\t'callable',\n\t\t'chr',\n\t\t'classmethod',\n\t\t'cmp',\n\t\t'coerce',\n\t\t'compile',\n\t\t'complex',\n\t\t'delattr',\n\t\t'dict',\n\t\t'dir',\n\t\t'divmod',\n\t\t'enumerate',\n\t\t'eval',\n\t\t'execfile',\n\t\t'file',\n\t\t'filter',\n\t\t'format',\n\t\t'frozenset',\n\t\t'getattr',\n\t\t'globals',\n\t\t'hasattr',\n\t\t'hash',\n\t\t'help',\n\t\t'id',\n\t\t'input',\n\t\t'intern',\n\t\t'isinstance',\n\t\t'issubclass',\n\t\t'iter',\n\t\t'len',\n\t\t'locals',\n\t\t'list',\n\t\t'map',\n\t\t'max',\n\t\t'memoryview',\n\t\t'min',\n\t\t'next',\n\t\t'object',\n\t\t'oct',\n\t\t'open',\n\t\t'ord',\n\t\t'pow',\n\t\t'print',\n\t\t'property',\n\t\t'reversed',\n\t\t'range',\n\t\t'raw_input',\n\t\t'reduce',\n\t\t'reload',\n\t\t'repr',\n\t\t'reversed',\n\t\t'round',\n\t\t'self',\n\t\t'set',\n\t\t'setattr',\n\t\t'slice',\n\t\t'sorted',\n\t\t'staticmethod',\n\t\t'str',\n\t\t'sum',\n\t\t'super',\n\t\t'tuple',\n\t\t'type',\n\t\t'unichr',\n\t\t'unicode',\n\t\t'vars',\n\t\t'xrange',\n\t\t'zip',\n\n\t\t'__dict__',\n\t\t'__methods__',\n\t\t'__members__',\n\t\t'__class__',\n\t\t'__bases__',\n\t\t'__name__',\n\t\t'__mro__',\n\t\t'__subclasses__',\n\t\t'__init__',\n\t\t'__import__'\n\t],\n\n\tbrackets: [\n\t\t{ open: '{', close: '}', token: 'delimiter.curly' },\n\t\t{ open: '[', close: ']', token: 'delimiter.bracket' },\n\t\t{ open: '(', close: ')', token: 'delimiter.parenthesis' }\n\t],\n\n\ttokenizer: {\n\t\troot: [\n\t\t\t{ include: '@whitespace' },\n\t\t\t{ include: '@numbers' },\n\t\t\t{ include: '@strings' },\n\n\t\t\t[/[,:;]/, 'delimiter'],\n\t\t\t[/[{}\\[\\]()]/, '@brackets'],\n\n\t\t\t[/@[a-zA-Z_]\\w*/, 'tag'],\n\t\t\t[\n\t\t\t\t/[a-zA-Z_]\\w*/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@keywords': 'keyword',\n\t\t\t\t\t\t'@default': 'identifier'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t],\n\n\t\t// Deal with white space, including single and multi-line comments\n\t\twhitespace: [\n\t\t\t[/\\s+/, 'white'],\n\t\t\t[/(^#.*$)/, 'comment'],\n\t\t\t[/'''/, 'string', '@endDocString'],\n\t\t\t[/\"\"\"/, 'string', '@endDblDocString']\n\t\t],\n\t\tendDocString: [\n\t\t\t[/[^']+/, 'string'],\n\t\t\t[/\\\\'/, 'string'],\n\t\t\t[/'''/, 'string', '@popall'],\n\t\t\t[/'/, 'string']\n\t\t],\n\t\tendDblDocString: [\n\t\t\t[/[^\"]+/, 'string'],\n\t\t\t[/\\\\\"/, 'string'],\n\t\t\t[/\"\"\"/, 'string', '@popall'],\n\t\t\t[/\"/, 'string']\n\t\t],\n\n\t\t// Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation\n\t\tnumbers: [\n\t\t\t[/-?0x([abcdef]|[ABCDEF]|\\d)+[lL]?/, 'number.hex'],\n\t\t\t[/-?(\\d*\\.)?\\d+([eE][+\\-]?\\d+)?[jJ]?[lL]?/, 'number']\n\t\t],\n\n\t\t// Recognize strings, including those broken across lines with \\ (but not without)\n\t\tstrings: [\n\t\t\t[/'$/, 'string.escape', '@popall'],\n\t\t\t[/f'{1,3}/, 'string.escape', '@fStringBody'],\n\t\t\t[/'/, 'string.escape', '@stringBody'],\n\t\t\t[/\"$/, 'string.escape', '@popall'],\n\t\t\t[/f\"{1,3}/, 'string.escape', '@fDblStringBody'],\n\t\t\t[/\"/, 'string.escape', '@dblStringBody']\n\t\t],\n\t\tfStringBody: [\n\t\t\t[/[^\\\\'\\{\\}]+$/, 'string', '@popall'],\n\t\t\t[/[^\\\\'\\{\\}]+/, 'string'],\n\t\t\t[/\\{[^\\}':!=]+/, 'identifier', '@fStringDetail'],\n\t\t\t[/\\\\./, 'string'],\n\t\t\t[/'/, 'string.escape', '@popall'],\n\t\t\t[/\\\\$/, 'string']\n\t\t],\n\t\tstringBody: [\n\t\t\t[/[^\\\\']+$/, 'string', '@popall'],\n\t\t\t[/[^\\\\']+/, 'string'],\n\t\t\t[/\\\\./, 'string'],\n\t\t\t[/'/, 'string.escape', '@popall'],\n\t\t\t[/\\\\$/, 'string']\n\t\t],\n\t\tfDblStringBody: [\n\t\t\t[/[^\\\\\"\\{\\}]+$/, 'string', '@popall'],\n\t\t\t[/[^\\\\\"\\{\\}]+/, 'string'],\n\t\t\t[/\\{[^\\}':!=]+/, 'identifier', '@fStringDetail'],\n\t\t\t[/\\\\./, 'string'],\n\t\t\t[/\"/, 'string.escape', '@popall'],\n\t\t\t[/\\\\$/, 'string']\n\t\t],\n\t\tdblStringBody: [\n\t\t\t[/[^\\\\\"]+$/, 'string', '@popall'],\n\t\t\t[/[^\\\\\"]+/, 'string'],\n\t\t\t[/\\\\./, 'string'],\n\t\t\t[/\"/, 'string.escape', '@popall'],\n\t\t\t[/\\\\$/, 'string']\n\t\t],\n\t\tfStringDetail: [\n\t\t\t[/[:][^}]+/, 'string'],\n\t\t\t[/[!][ars]/, 'string'], // only !a, !r, !s are supported by f-strings: https://docs.python.org/3/tutorial/inputoutput.html#formatted-string-literals\n\t\t\t[/=/, 'string'],\n\t\t\t[/\\}/, 'identifier', '@pop']\n\t\t]\n\t}\n}",
  "qsharp": "<languages.IMonarchLanguage>{\n\t// Set defaultToken to invalid to see what you do not tokenize yet\n\tkeywords: [\n\t\t'namespace',\n\t\t'open',\n\t\t'import',\n\t\t'export',\n\t\t'as',\n\t\t'operation',\n\t\t'function',\n\t\t'body',\n\t\t'adjoint',\n\t\t'newtype',\n\t\t'struct',\n\t\t'controlled',\n\t\t'if',\n\t\t'elif',\n\t\t'else',\n\t\t'repeat',\n\t\t'until',\n\t\t'fixup',\n\t\t'for',\n\t\t'in',\n\t\t'while',\n\t\t'return',\n\t\t'fail',\n\t\t'within',\n\t\t'apply',\n\t\t'Adjoint',\n\t\t'Controlled',\n\t\t'Adj',\n\t\t'Ctl',\n\t\t'is',\n\t\t'self',\n\t\t'auto',\n\t\t'distribute',\n\t\t'invert',\n\t\t'intrinsic',\n\t\t'let',\n\t\t'set',\n\t\t'w/',\n\t\t'new',\n\t\t'not',\n\t\t'and',\n\t\t'or',\n\t\t'use',\n\t\t'borrow',\n\t\t'using',\n\t\t'borrowing',\n\t\t'mutable',\n\t\t'internal'\n\t],\n\n\ttypeKeywords: [\n\t\t'Unit',\n\t\t'Int',\n\t\t'BigInt',\n\t\t'Double',\n\t\t'Bool',\n\t\t'String',\n\t\t'Qubit',\n\t\t'Result',\n\t\t'Pauli',\n\t\t'Range'\n\t],\n\n\tinvalidKeywords: [\n\t\t'abstract',\n\t\t'base',\n\t\t'bool',\n\t\t'break',\n\t\t'byte',\n\t\t'case',\n\t\t'catch',\n\t\t'char',\n\t\t'checked',\n\t\t'class',\n\t\t'const',\n\t\t'continue',\n\t\t'decimal',\n\t\t'default',\n\t\t'delegate',\n\t\t'do',\n\t\t'double',\n\t\t'enum',\n\t\t'event',\n\t\t'explicit',\n\t\t'extern',\n\t\t'finally',\n\t\t'fixed',\n\t\t'float',\n\t\t'foreach',\n\t\t'goto',\n\t\t'implicit',\n\t\t'int',\n\t\t'interface',\n\t\t'lock',\n\t\t'long',\n\t\t'null',\n\t\t'object',\n\t\t'operator',\n\t\t'out',\n\t\t'override',\n\t\t'params',\n\t\t'private',\n\t\t'protected',\n\t\t'public',\n\t\t'readonly',\n\t\t'ref',\n\t\t'sbyte',\n\t\t'sealed',\n\t\t'short',\n\t\t'sizeof',\n\t\t'stackalloc',\n\t\t'static',\n\t\t'string',\n\t\t'switch',\n\t\t'this',\n\t\t'throw',\n\t\t'try',\n\t\t'typeof',\n\t\t'unit',\n\t\t'ulong',\n\t\t'unchecked',\n\t\t'unsafe',\n\t\t'ushort',\n\t\t'virtual',\n\t\t'void',\n\t\t'volatile'\n\t],\n\n\tconstants: ['true', 'false', 'PauliI', 'PauliX', 'PauliY', 'PauliZ', 'One', 'Zero'],\n\n\tbuiltin: [\n\t\t'X',\n\t\t'Y',\n\t\t'Z',\n\t\t'H',\n\t\t'HY',\n\t\t'S',\n\t\t'T',\n\t\t'SWAP',\n\t\t'CNOT',\n\t\t'CCNOT',\n\t\t'MultiX',\n\t\t'R',\n\t\t'RFrac',\n\t\t'Rx',\n\t\t'Ry',\n\t\t'Rz',\n\t\t'R1',\n\t\t'R1Frac',\n\t\t'Exp',\n\t\t'ExpFrac',\n\t\t'Measure',\n\t\t'M',\n\t\t'MultiM',\n\t\t'Message',\n\t\t'Length',\n\t\t'Assert',\n\t\t'AssertProb',\n\t\t'AssertEqual'\n\t],\n\n\toperators: [\n\t\t'and=',\n\t\t'<-',\n\t\t'->',\n\t\t'*',\n\t\t'*=',\n\t\t'@',\n\t\t'!',\n\t\t'^',\n\t\t'^=',\n\t\t':',\n\t\t'::',\n\t\t'.',\n\t\t'..',\n\t\t'==',\n\t\t'...',\n\t\t'=',\n\t\t'=>',\n\t\t'>',\n\t\t'>=',\n\t\t'<',\n\t\t'<=',\n\t\t'-',\n\t\t'-=',\n\t\t'!=',\n\t\t'or=',\n\t\t'%',\n\t\t'%=',\n\t\t'|',\n\t\t'+',\n\t\t'+=',\n\t\t'?',\n\t\t'/',\n\t\t'/=',\n\t\t'&&&',\n\t\t'&&&=',\n\t\t'^^^',\n\t\t'^^^=',\n\t\t'>>>',\n\t\t'>>>=',\n\t\t'<<<',\n\t\t'<<<=',\n\t\t'|||',\n\t\t'|||=',\n\t\t'~~~',\n\t\t'_',\n\t\t'w/',\n\t\t'w/='\n\t],\n\n\tnamespaceFollows: ['namespace', 'open'],\n\n\timportsFollows: ['import'],\n\n\tsymbols: /[=><!~?:&|+\\-*\\/\\^%@._]+/,\n\n\tescapes: /\\\\[\\s\\S]/,\n\n\t// The main tokenizer for our languages\n\ttokenizer: {\n\t\troot: [\n\t\t\t// identifiers and keywords\n\t\t\t[\n\t\t\t\t/[a-zA-Z_$][\\w$]*/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@namespaceFollows': {\n\t\t\t\t\t\t\ttoken: 'keyword.$0',\n\t\t\t\t\t\t\tnext: '@namespace'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'@importsFollows': {\n\t\t\t\t\t\t\ttoken: 'keyword.$0',\n\t\t\t\t\t\t\tnext: '@imports'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'@typeKeywords': 'type',\n\t\t\t\t\t\t'@keywords': 'keyword',\n\t\t\t\t\t\t'@constants': 'constant',\n\t\t\t\t\t\t'@builtin': 'keyword',\n\t\t\t\t\t\t'@invalidKeywords': 'invalid',\n\t\t\t\t\t\t'@default': 'identifier'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t// whitespace\n\t\t\t{ include: '@whitespace' },\n\n\t\t\t// delimiters and operators\n\t\t\t[/[{}()\\[\\]]/, '@brackets'],\n\t\t\t[/@symbols/, { cases: { '@operators': 'operator', '@default': '' } }],\n\n\t\t\t// numbers\n\t\t\t[/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\n\t\t\t[/\\d+/, 'number'],\n\n\t\t\t// delimiter: after number because of .\\d floats\n\t\t\t[/[;,.]/, 'delimiter'],\n\n\t\t\t// strings\n\t\t\t//[/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid' ],  // non-terminated string\n\t\t\t[/\"/, { token: 'string.quote', bracket: '@open', next: '@string' }]\n\t\t],\n\n\t\tstring: [\n\t\t\t[/[^\\\\\"]+/, 'string'],\n\t\t\t[/@escapes/, 'string.escape'],\n\t\t\t[/\"/, { token: 'string.quote', bracket: '@close', next: '@pop' }]\n\t\t],\n\n\t\tnamespace: [\n\t\t\t{ include: '@whitespace' },\n\t\t\t[/[A-Za-z]\\w*/, 'namespace'],\n\t\t\t[/[\\.]/, 'delimiter'],\n\t\t\t['', '', '@pop']\n\t\t],\n\n\t\timports: [\n\t\t\t{ include: '@whitespace' },\n\t\t\t[/[A-Za-z]\\w*(?=\\.)/, 'namespace'],\n\t\t\t[/[A-Za-z]\\w*/, 'identifier'],\n\t\t\t[/\\*/, 'wildcard'],\n\t\t\t[/[\\.,]/, 'delimiter'],\n\t\t\t['', '', '@pop']\n\t\t],\n\n\t\twhitespace: [\n\t\t\t[/[ \\t\\r\\n]+/, 'white'],\n\t\t\t[/(\\/\\/).*/, 'comment']\n\t\t]\n\t}\n}",
  "r": "<languages.IMonarchLanguage>{\n\tdefaultToken: '',\n\ttokenPostfix: '.r',\n\n\troxygen: [\n\t\t'@alias',\n\t\t'@aliases',\n\t\t'@assignee',\n\t\t'@author',\n\t\t'@backref',\n\t\t'@callGraph',\n\t\t'@callGraphDepth',\n\t\t'@callGraphPrimitives',\n\t\t'@concept',\n\t\t'@describeIn',\n\t\t'@description',\n\t\t'@details',\n\t\t'@docType',\n\t\t'@encoding',\n\t\t'@evalNamespace',\n\t\t'@evalRd',\n\t\t'@example',\n\t\t'@examples',\n\t\t'@export',\n\t\t'@exportClass',\n\t\t'@exportMethod',\n\t\t'@exportPattern',\n\t\t'@family',\n\t\t'@field',\n\t\t'@formals',\n\t\t'@format',\n\t\t'@import',\n\t\t'@importClassesFrom',\n\t\t'@importFrom',\n\t\t'@importMethodsFrom',\n\t\t'@include',\n\t\t'@inherit',\n\t\t'@inheritDotParams',\n\t\t'@inheritParams',\n\t\t'@inheritSection',\n\t\t'@keywords',\n\t\t'@md',\n\t\t'@method',\n\t\t'@name',\n\t\t'@noMd',\n\t\t'@noRd',\n\t\t'@note',\n\t\t'@param',\n\t\t'@rawNamespace',\n\t\t'@rawRd',\n\t\t'@rdname',\n\t\t'@references',\n\t\t'@return',\n\t\t'@S3method',\n\t\t'@section',\n\t\t'@seealso',\n\t\t'@setClass',\n\t\t'@slot',\n\t\t'@source',\n\t\t'@template',\n\t\t'@templateVar',\n\t\t'@title',\n\t\t'@TODO',\n\t\t'@usage',\n\t\t'@useDynLib'\n\t],\n\n\tconstants: [\n\t\t'NULL',\n\t\t'FALSE',\n\t\t'TRUE',\n\t\t'NA',\n\t\t'Inf',\n\t\t'NaN',\n\t\t'NA_integer_',\n\t\t'NA_real_',\n\t\t'NA_complex_',\n\t\t'NA_character_',\n\t\t'T',\n\t\t'F',\n\t\t'LETTERS',\n\t\t'letters',\n\t\t'month.abb',\n\t\t'month.name',\n\t\t'pi',\n\t\t'R.version.string'\n\t],\n\n\tkeywords: [\n\t\t'break',\n\t\t'next',\n\t\t'return',\n\t\t'if',\n\t\t'else',\n\t\t'for',\n\t\t'in',\n\t\t'repeat',\n\t\t'while',\n\t\t'array',\n\t\t'category',\n\t\t'character',\n\t\t'complex',\n\t\t'double',\n\t\t'function',\n\t\t'integer',\n\t\t'list',\n\t\t'logical',\n\t\t'matrix',\n\t\t'numeric',\n\t\t'vector',\n\t\t'data.frame',\n\t\t'factor',\n\t\t'library',\n\t\t'require',\n\t\t'attach',\n\t\t'detach',\n\t\t'source'\n\t],\n\n\tspecial: ['\\\\n', '\\\\r', '\\\\t', '\\\\b', '\\\\a', '\\\\f', '\\\\v', \"\\\\'\", '\\\\\"', '\\\\\\\\'],\n\n\tbrackets: [\n\t\t{ open: '{', close: '}', token: 'delimiter.curly' },\n\t\t{ open: '[', close: ']', token: 'delimiter.bracket' },\n\t\t{ open: '(', close: ')', token: 'delimiter.parenthesis' }\n\t],\n\n\ttokenizer: {\n\t\troot: [\n\t\t\t{ include: '@numbers' },\n\t\t\t{ include: '@strings' },\n\n\t\t\t[/[{}\\[\\]()]/, '@brackets'],\n\n\t\t\t{ include: '@operators' },\n\t\t\t[/#'$/, 'comment.doc'],\n\t\t\t[/#'/, 'comment.doc', '@roxygen'],\n\t\t\t[/(^#.*$)/, 'comment'],\n\n\t\t\t[/\\s+/, 'white'],\n\n\t\t\t[/[,:;]/, 'delimiter'],\n\n\t\t\t[/@[a-zA-Z]\\w*/, 'tag'],\n\t\t\t[\n\t\t\t\t/[a-zA-Z]\\w*/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@keywords': 'keyword',\n\t\t\t\t\t\t'@constants': 'constant',\n\t\t\t\t\t\t'@default': 'identifier'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t],\n\n\t\t// Recognize Roxygen comments\n\t\troxygen: [\n\t\t\t[\n\t\t\t\t/@\\w+/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@roxygen': 'tag',\n\t\t\t\t\t\t'@eos': { token: 'comment.doc', next: '@pop' },\n\t\t\t\t\t\t'@default': 'comment.doc'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t[\n\t\t\t\t/\\s+/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@eos': { token: 'comment.doc', next: '@pop' },\n\t\t\t\t\t\t'@default': 'comment.doc'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/.*/, { token: 'comment.doc', next: '@pop' }]\n\t\t],\n\n\t\t// Recognize positives, negatives, decimals, imaginaries, and scientific notation\n\t\tnumbers: [\n\t\t\t[/0[xX][0-9a-fA-F]+/, 'number.hex'],\n\t\t\t[/-?(\\d*\\.)?\\d+([eE][+\\-]?\\d+)?/, 'number']\n\t\t],\n\n\t\t// Recognize operators\n\t\toperators: [\n\t\t\t[/<{1,2}-/, 'operator'],\n\t\t\t[/->{1,2}/, 'operator'],\n\t\t\t[/%[^%\\s]+%/, 'operator'],\n\t\t\t[/\\*\\*/, 'operator'],\n\t\t\t[/%%/, 'operator'],\n\t\t\t[/&&/, 'operator'],\n\t\t\t[/\\|\\|/, 'operator'],\n\t\t\t[/<</, 'operator'],\n\t\t\t[/>>/, 'operator'],\n\t\t\t[/[-+=&|!<>^~*/:$]/, 'operator']\n\t\t],\n\n\t\t// Recognize strings, including those broken across lines\n\t\tstrings: [\n\t\t\t[/'/, 'string.escape', '@stringBody'],\n\t\t\t[/\"/, 'string.escape', '@dblStringBody']\n\t\t],\n\t\tstringBody: [\n\t\t\t[\n\t\t\t\t/\\\\./,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@special': 'string',\n\t\t\t\t\t\t'@default': 'error-token'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/'/, 'string.escape', '@popall'],\n\t\t\t[/./, 'string']\n\t\t],\n\t\tdblStringBody: [\n\t\t\t[\n\t\t\t\t/\\\\./,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@special': 'string',\n\t\t\t\t\t\t'@default': 'error-token'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/\"/, 'string.escape', '@popall'],\n\t\t\t[/./, 'string']\n\t\t]\n\t}\n}",
  "razor": "<languages.IMonarchLanguage>{\n\tdefaultToken: '',\n\ttokenPostfix: '',\n\t// ignoreCase: true,\n\n\t// The main tokenizer for our languages\n\ttokenizer: {\n\t\troot: [\n\t\t\t[/@@@@/], // text\n\t\t\t[/@[^@]/, { token: '@rematch', switchTo: '@razorInSimpleState.root' }],\n\t\t\t[/<!DOCTYPE/, 'metatag.html', '@doctype'],\n\t\t\t[/<!--/, 'comment.html', '@comment'],\n\t\t\t[/(<)([\\w\\-]+)(\\/>)/, ['delimiter.html', 'tag.html', 'delimiter.html']],\n\t\t\t[/(<)(script)/, ['delimiter.html', { token: 'tag.html', next: '@script' }]],\n\t\t\t[/(<)(style)/, ['delimiter.html', { token: 'tag.html', next: '@style' }]],\n\t\t\t[/(<)([:\\w\\-]+)/, ['delimiter.html', { token: 'tag.html', next: '@otherTag' }]],\n\t\t\t[/(<\\/)([\\w\\-]+)/, ['delimiter.html', { token: 'tag.html', next: '@otherTag' }]],\n\t\t\t[/</, 'delimiter.html'],\n\t\t\t[/[ \\t\\r\\n]+/], // whitespace\n\t\t\t[/[^<@]+/] // text\n\t\t],\n\n\t\tdoctype: [\n\t\t\t[/@[^@]/, { token: '@rematch', switchTo: '@razorInSimpleState.comment' }],\n\t\t\t[/[^>]+/, 'metatag.content.html'],\n\t\t\t[/>/, 'metatag.html', '@pop']\n\t\t],\n\n\t\tcomment: [\n\t\t\t[/@[^@]/, { token: '@rematch', switchTo: '@razorInSimpleState.comment' }],\n\t\t\t[/-->/, 'comment.html', '@pop'],\n\t\t\t[/[^-]+/, 'comment.content.html'],\n\t\t\t[/./, 'comment.content.html']\n\t\t],\n\n\t\totherTag: [\n\t\t\t[/@[^@]/, { token: '@rematch', switchTo: '@razorInSimpleState.otherTag' }],\n\t\t\t[/\\/?>/, 'delimiter.html', '@pop'],\n\t\t\t[/\"([^\"]*)\"/, 'attribute.value'],\n\t\t\t[/'([^']*)'/, 'attribute.value'],\n\t\t\t[/[\\w\\-]+/, 'attribute.name'],\n\t\t\t[/=/, 'delimiter'],\n\t\t\t[/[ \\t\\r\\n]+/] // whitespace\n\t\t],\n\n\t\t// -- BEGIN <script> tags handling\n\n\t\t// After <script\n\t\tscript: [\n\t\t\t[/@[^@]/, { token: '@rematch', switchTo: '@razorInSimpleState.script' }],\n\t\t\t[/type/, 'attribute.name', '@scriptAfterType'],\n\t\t\t[/\"([^\"]*)\"/, 'attribute.value'],\n\t\t\t[/'([^']*)'/, 'attribute.value'],\n\t\t\t[/[\\w\\-]+/, 'attribute.name'],\n\t\t\t[/=/, 'delimiter'],\n\t\t\t[\n\t\t\t\t/>/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'delimiter.html',\n\t\t\t\t\tnext: '@scriptEmbedded.text/javascript',\n\t\t\t\t\tnextEmbedded: 'text/javascript'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/[ \\t\\r\\n]+/], // whitespace\n\t\t\t[\n\t\t\t\t/(<\\/)(script\\s*)(>)/,\n\t\t\t\t['delimiter.html', 'tag.html', { token: 'delimiter.html', next: '@pop' }]\n\t\t\t]\n\t\t],\n\n\t\t// After <script ... type\n\t\tscriptAfterType: [\n\t\t\t[\n\t\t\t\t/@[^@]/,\n\t\t\t\t{\n\t\t\t\t\ttoken: '@rematch',\n\t\t\t\t\tswitchTo: '@razorInSimpleState.scriptAfterType'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/=/, 'delimiter', '@scriptAfterTypeEquals'],\n\t\t\t[\n\t\t\t\t/>/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'delimiter.html',\n\t\t\t\t\tnext: '@scriptEmbedded.text/javascript',\n\t\t\t\t\tnextEmbedded: 'text/javascript'\n\t\t\t\t}\n\t\t\t], // cover invalid e.g. <script type>\n\t\t\t[/[ \\t\\r\\n]+/], // whitespace\n\t\t\t[/<\\/script\\s*>/, { token: '@rematch', next: '@pop' }]\n\t\t],\n\n\t\t// After <script ... type =\n\t\tscriptAfterTypeEquals: [\n\t\t\t[\n\t\t\t\t/@[^@]/,\n\t\t\t\t{\n\t\t\t\t\ttoken: '@rematch',\n\t\t\t\t\tswitchTo: '@razorInSimpleState.scriptAfterTypeEquals'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[\n\t\t\t\t/\"([^\"]*)\"/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'attribute.value',\n\t\t\t\t\tswitchTo: '@scriptWithCustomType.$1'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[\n\t\t\t\t/'([^']*)'/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'attribute.value',\n\t\t\t\t\tswitchTo: '@scriptWithCustomType.$1'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[\n\t\t\t\t/>/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'delimiter.html',\n\t\t\t\t\tnext: '@scriptEmbedded.text/javascript',\n\t\t\t\t\tnextEmbedded: 'text/javascript'\n\t\t\t\t}\n\t\t\t], // cover invalid e.g. <script type=>\n\t\t\t[/[ \\t\\r\\n]+/], // whitespace\n\t\t\t[/<\\/script\\s*>/, { token: '@rematch', next: '@pop' }]\n\t\t],\n\n\t\t// After <script ... type = $S2\n\t\tscriptWithCustomType: [\n\t\t\t[\n\t\t\t\t/@[^@]/,\n\t\t\t\t{\n\t\t\t\t\ttoken: '@rematch',\n\t\t\t\t\tswitchTo: '@razorInSimpleState.scriptWithCustomType.$S2'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[\n\t\t\t\t/>/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'delimiter.html',\n\t\t\t\t\tnext: '@scriptEmbedded.$S2',\n\t\t\t\t\tnextEmbedded: '$S2'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/\"([^\"]*)\"/, 'attribute.value'],\n\t\t\t[/'([^']*)'/, 'attribute.value'],\n\t\t\t[/[\\w\\-]+/, 'attribute.name'],\n\t\t\t[/=/, 'delimiter'],\n\t\t\t[/[ \\t\\r\\n]+/], // whitespace\n\t\t\t[/<\\/script\\s*>/, { token: '@rematch', next: '@pop' }]\n\t\t],\n\n\t\tscriptEmbedded: [\n\t\t\t[\n\t\t\t\t/@[^@]/,\n\t\t\t\t{\n\t\t\t\t\ttoken: '@rematch',\n\t\t\t\t\tswitchTo: '@razorInEmbeddedState.scriptEmbedded.$S2',\n\t\t\t\t\tnextEmbedded: '@pop'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/<\\/script/, { token: '@rematch', next: '@pop', nextEmbedded: '@pop' }]\n\t\t],\n\n\t\t// -- END <script> tags handling\n\n\t\t// -- BEGIN <style> tags handling\n\n\t\t// After <style\n\t\tstyle: [\n\t\t\t[/@[^@]/, { token: '@rematch', switchTo: '@razorInSimpleState.style' }],\n\t\t\t[/type/, 'attribute.name', '@styleAfterType'],\n\t\t\t[/\"([^\"]*)\"/, 'attribute.value'],\n\t\t\t[/'([^']*)'/, 'attribute.value'],\n\t\t\t[/[\\w\\-]+/, 'attribute.name'],\n\t\t\t[/=/, 'delimiter'],\n\t\t\t[\n\t\t\t\t/>/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'delimiter.html',\n\t\t\t\t\tnext: '@styleEmbedded.text/css',\n\t\t\t\t\tnextEmbedded: 'text/css'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/[ \\t\\r\\n]+/], // whitespace\n\t\t\t[\n\t\t\t\t/(<\\/)(style\\s*)(>)/,\n\t\t\t\t['delimiter.html', 'tag.html', { token: 'delimiter.html', next: '@pop' }]\n\t\t\t]\n\t\t],\n\n\t\t// After <style ... type\n\t\tstyleAfterType: [\n\t\t\t[\n\t\t\t\t/@[^@]/,\n\t\t\t\t{\n\t\t\t\t\ttoken: '@rematch',\n\t\t\t\t\tswitchTo: '@razorInSimpleState.styleAfterType'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/=/, 'delimiter', '@styleAfterTypeEquals'],\n\t\t\t[\n\t\t\t\t/>/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'delimiter.html',\n\t\t\t\t\tnext: '@styleEmbedded.text/css',\n\t\t\t\t\tnextEmbedded: 'text/css'\n\t\t\t\t}\n\t\t\t], // cover invalid e.g. <style type>\n\t\t\t[/[ \\t\\r\\n]+/], // whitespace\n\t\t\t[/<\\/style\\s*>/, { token: '@rematch', next: '@pop' }]\n\t\t],\n\n\t\t// After <style ... type =\n\t\tstyleAfterTypeEquals: [\n\t\t\t[\n\t\t\t\t/@[^@]/,\n\t\t\t\t{\n\t\t\t\t\ttoken: '@rematch',\n\t\t\t\t\tswitchTo: '@razorInSimpleState.styleAfterTypeEquals'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[\n\t\t\t\t/\"([^\"]*)\"/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'attribute.value',\n\t\t\t\t\tswitchTo: '@styleWithCustomType.$1'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[\n\t\t\t\t/'([^']*)'/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'attribute.value',\n\t\t\t\t\tswitchTo: '@styleWithCustomType.$1'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[\n\t\t\t\t/>/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'delimiter.html',\n\t\t\t\t\tnext: '@styleEmbedded.text/css',\n\t\t\t\t\tnextEmbedded: 'text/css'\n\t\t\t\t}\n\t\t\t], // cover invalid e.g. <style type=>\n\t\t\t[/[ \\t\\r\\n]+/], // whitespace\n\t\t\t[/<\\/style\\s*>/, { token: '@rematch', next: '@pop' }]\n\t\t],\n\n\t\t// After <style ... type = $S2\n\t\tstyleWithCustomType: [\n\t\t\t[\n\t\t\t\t/@[^@]/,\n\t\t\t\t{\n\t\t\t\t\ttoken: '@rematch',\n\t\t\t\t\tswitchTo: '@razorInSimpleState.styleWithCustomType.$S2'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[\n\t\t\t\t/>/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'delimiter.html',\n\t\t\t\t\tnext: '@styleEmbedded.$S2',\n\t\t\t\t\tnextEmbedded: '$S2'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/\"([^\"]*)\"/, 'attribute.value'],\n\t\t\t[/'([^']*)'/, 'attribute.value'],\n\t\t\t[/[\\w\\-]+/, 'attribute.name'],\n\t\t\t[/=/, 'delimiter'],\n\t\t\t[/[ \\t\\r\\n]+/], // whitespace\n\t\t\t[/<\\/style\\s*>/, { token: '@rematch', next: '@pop' }]\n\t\t],\n\n\t\tstyleEmbedded: [\n\t\t\t[\n\t\t\t\t/@[^@]/,\n\t\t\t\t{\n\t\t\t\t\ttoken: '@rematch',\n\t\t\t\t\tswitchTo: '@razorInEmbeddedState.styleEmbedded.$S2',\n\t\t\t\t\tnextEmbedded: '@pop'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/<\\/style/, { token: '@rematch', next: '@pop', nextEmbedded: '@pop' }]\n\t\t],\n\n\t\t// -- END <style> tags handling\n\n\t\trazorInSimpleState: [\n\t\t\t[/@\\*/, 'comment.cs', '@razorBlockCommentTopLevel'],\n\t\t\t[/@[{(]/, 'metatag.cs', '@razorRootTopLevel'],\n\t\t\t[/(@)(\\s*[\\w]+)/, ['metatag.cs', { token: 'identifier.cs', switchTo: '@$S2.$S3' }]],\n\t\t\t[/[})]/, { token: 'metatag.cs', switchTo: '@$S2.$S3' }],\n\t\t\t[/\\*@/, { token: 'comment.cs', switchTo: '@$S2.$S3' }]\n\t\t],\n\n\t\trazorInEmbeddedState: [\n\t\t\t[/@\\*/, 'comment.cs', '@razorBlockCommentTopLevel'],\n\t\t\t[/@[{(]/, 'metatag.cs', '@razorRootTopLevel'],\n\t\t\t[\n\t\t\t\t/(@)(\\s*[\\w]+)/,\n\t\t\t\t[\n\t\t\t\t\t'metatag.cs',\n\t\t\t\t\t{\n\t\t\t\t\t\ttoken: 'identifier.cs',\n\t\t\t\t\t\tswitchTo: '@$S2.$S3',\n\t\t\t\t\t\tnextEmbedded: '$S3'\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t],\n\t\t\t[\n\t\t\t\t/[})]/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'metatag.cs',\n\t\t\t\t\tswitchTo: '@$S2.$S3',\n\t\t\t\t\tnextEmbedded: '$S3'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[\n\t\t\t\t/\\*@/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'comment.cs',\n\t\t\t\t\tswitchTo: '@$S2.$S3',\n\t\t\t\t\tnextEmbedded: '$S3'\n\t\t\t\t}\n\t\t\t]\n\t\t],\n\n\t\trazorBlockCommentTopLevel: [\n\t\t\t[/\\*@/, '@rematch', '@pop'],\n\t\t\t[/[^*]+/, 'comment.cs'],\n\t\t\t[/./, 'comment.cs']\n\t\t],\n\n\t\trazorBlockComment: [\n\t\t\t[/\\*@/, 'comment.cs', '@pop'],\n\t\t\t[/[^*]+/, 'comment.cs'],\n\t\t\t[/./, 'comment.cs']\n\t\t],\n\n\t\trazorRootTopLevel: [\n\t\t\t[/\\{/, 'delimiter.bracket.cs', '@razorRoot'],\n\t\t\t[/\\(/, 'delimiter.parenthesis.cs', '@razorRoot'],\n\t\t\t[/[})]/, '@rematch', '@pop'],\n\t\t\t{ include: 'razorCommon' }\n\t\t],\n\n\t\trazorRoot: [\n\t\t\t[/\\{/, 'delimiter.bracket.cs', '@razorRoot'],\n\t\t\t[/\\(/, 'delimiter.parenthesis.cs', '@razorRoot'],\n\t\t\t[/\\}/, 'delimiter.bracket.cs', '@pop'],\n\t\t\t[/\\)/, 'delimiter.parenthesis.cs', '@pop'],\n\t\t\t{ include: 'razorCommon' }\n\t\t],\n\n\t\trazorCommon: [\n\t\t\t[\n\t\t\t\t/[a-zA-Z_]\\w*/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@razorKeywords': { token: 'keyword.cs' },\n\t\t\t\t\t\t'@default': 'identifier.cs'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t// brackets\n\t\t\t[/[\\[\\]]/, 'delimiter.array.cs'],\n\n\t\t\t// whitespace\n\t\t\t[/[ \\t\\r\\n]+/],\n\n\t\t\t// comments\n\t\t\t[/\\/\\/.*$/, 'comment.cs'],\n\t\t\t[/@\\*/, 'comment.cs', '@razorBlockComment'],\n\n\t\t\t// strings\n\t\t\t[/\"([^\"]*)\"/, 'string.cs'],\n\t\t\t[/'([^']*)'/, 'string.cs'],\n\n\t\t\t// simple html\n\t\t\t[/(<)([\\w\\-]+)(\\/>)/, ['delimiter.html', 'tag.html', 'delimiter.html']],\n\t\t\t[/(<)([\\w\\-]+)(>)/, ['delimiter.html', 'tag.html', 'delimiter.html']],\n\t\t\t[/(<\\/)([\\w\\-]+)(>)/, ['delimiter.html', 'tag.html', 'delimiter.html']],\n\n\t\t\t// delimiters\n\t\t\t[/[\\+\\-\\*\\%\\&\\|\\^\\~\\!\\=\\<\\>\\/\\?\\;\\:\\.\\,]/, 'delimiter.cs'],\n\n\t\t\t// numbers\n\t\t\t[/\\d*\\d+[eE]([\\-+]?\\d+)?/, 'number.float.cs'],\n\t\t\t[/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float.cs'],\n\t\t\t[/0[xX][0-9a-fA-F']*[0-9a-fA-F]/, 'number.hex.cs'],\n\t\t\t[/0[0-7']*[0-7]/, 'number.octal.cs'],\n\t\t\t[/0[bB][0-1']*[0-1]/, 'number.binary.cs'],\n\t\t\t[/\\d[\\d']*/, 'number.cs'],\n\t\t\t[/\\d/, 'number.cs']\n\t\t]\n\t},\n\n\trazorKeywords: [\n\t\t'abstract',\n\t\t'as',\n\t\t'async',\n\t\t'await',\n\t\t'base',\n\t\t'bool',\n\t\t'break',\n\t\t'by',\n\t\t'byte',\n\t\t'case',\n\t\t'catch',\n\t\t'char',\n\t\t'checked',\n\t\t'class',\n\t\t'const',\n\t\t'continue',\n\t\t'decimal',\n\t\t'default',\n\t\t'delegate',\n\t\t'do',\n\t\t'double',\n\t\t'descending',\n\t\t'explicit',\n\t\t'event',\n\t\t'extern',\n\t\t'else',\n\t\t'enum',\n\t\t'false',\n\t\t'finally',\n\t\t'fixed',\n\t\t'float',\n\t\t'for',\n\t\t'foreach',\n\t\t'from',\n\t\t'goto',\n\t\t'group',\n\t\t'if',\n\t\t'implicit',\n\t\t'in',\n\t\t'int',\n\t\t'interface',\n\t\t'internal',\n\t\t'into',\n\t\t'is',\n\t\t'lock',\n\t\t'long',\n\t\t'nameof',\n\t\t'new',\n\t\t'null',\n\t\t'namespace',\n\t\t'object',\n\t\t'operator',\n\t\t'out',\n\t\t'override',\n\t\t'orderby',\n\t\t'params',\n\t\t'private',\n\t\t'protected',\n\t\t'public',\n\t\t'readonly',\n\t\t'ref',\n\t\t'return',\n\t\t'switch',\n\t\t'struct',\n\t\t'sbyte',\n\t\t'sealed',\n\t\t'short',\n\t\t'sizeof',\n\t\t'stackalloc',\n\t\t'static',\n\t\t'string',\n\t\t'select',\n\t\t'this',\n\t\t'throw',\n\t\t'true',\n\t\t'try',\n\t\t'typeof',\n\t\t'uint',\n\t\t'ulong',\n\t\t'unchecked',\n\t\t'unsafe',\n\t\t'ushort',\n\t\t'using',\n\t\t'var',\n\t\t'virtual',\n\t\t'volatile',\n\t\t'void',\n\t\t'when',\n\t\t'while',\n\t\t'where',\n\t\t'yield',\n\t\t'model',\n\t\t'inject' // Razor specific\n\t],\n\n\tescapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/\n}",
  "redis": "<languages.IMonarchLanguage>{\n\tdefaultToken: '',\n\ttokenPostfix: '.redis',\n\tignoreCase: true,\n\n\tbrackets: [\n\t\t{ open: '[', close: ']', token: 'delimiter.square' },\n\t\t{ open: '(', close: ')', token: 'delimiter.parenthesis' }\n\t],\n\n\tkeywords: [\n\t\t'APPEND',\n\t\t'AUTH',\n\t\t'BGREWRITEAOF',\n\t\t'BGSAVE',\n\t\t'BITCOUNT',\n\t\t'BITFIELD',\n\t\t'BITOP',\n\t\t'BITPOS',\n\t\t'BLPOP',\n\t\t'BRPOP',\n\t\t'BRPOPLPUSH',\n\t\t'CLIENT',\n\t\t'KILL',\n\t\t'LIST',\n\t\t'GETNAME',\n\t\t'PAUSE',\n\t\t'REPLY',\n\t\t'SETNAME',\n\t\t'CLUSTER',\n\t\t'ADDSLOTS',\n\t\t'COUNT-FAILURE-REPORTS',\n\t\t'COUNTKEYSINSLOT',\n\t\t'DELSLOTS',\n\t\t'FAILOVER',\n\t\t'FORGET',\n\t\t'GETKEYSINSLOT',\n\t\t'INFO',\n\t\t'KEYSLOT',\n\t\t'MEET',\n\t\t'NODES',\n\t\t'REPLICATE',\n\t\t'RESET',\n\t\t'SAVECONFIG',\n\t\t'SET-CONFIG-EPOCH',\n\t\t'SETSLOT',\n\t\t'SLAVES',\n\t\t'SLOTS',\n\t\t'COMMAND',\n\t\t'COUNT',\n\t\t'GETKEYS',\n\t\t'CONFIG',\n\t\t'GET',\n\t\t'REWRITE',\n\t\t'SET',\n\t\t'RESETSTAT',\n\t\t'DBSIZE',\n\t\t'DEBUG',\n\t\t'OBJECT',\n\t\t'SEGFAULT',\n\t\t'DECR',\n\t\t'DECRBY',\n\t\t'DEL',\n\t\t'DISCARD',\n\t\t'DUMP',\n\t\t'ECHO',\n\t\t'EVAL',\n\t\t'EVALSHA',\n\t\t'EXEC',\n\t\t'EXISTS',\n\t\t'EXPIRE',\n\t\t'EXPIREAT',\n\t\t'FLUSHALL',\n\t\t'FLUSHDB',\n\t\t'GEOADD',\n\t\t'GEOHASH',\n\t\t'GEOPOS',\n\t\t'GEODIST',\n\t\t'GEORADIUS',\n\t\t'GEORADIUSBYMEMBER',\n\t\t'GETBIT',\n\t\t'GETRANGE',\n\t\t'GETSET',\n\t\t'HDEL',\n\t\t'HEXISTS',\n\t\t'HGET',\n\t\t'HGETALL',\n\t\t'HINCRBY',\n\t\t'HINCRBYFLOAT',\n\t\t'HKEYS',\n\t\t'HLEN',\n\t\t'HMGET',\n\t\t'HMSET',\n\t\t'HSET',\n\t\t'HSETNX',\n\t\t'HSTRLEN',\n\t\t'HVALS',\n\t\t'INCR',\n\t\t'INCRBY',\n\t\t'INCRBYFLOAT',\n\t\t'KEYS',\n\t\t'LASTSAVE',\n\t\t'LINDEX',\n\t\t'LINSERT',\n\t\t'LLEN',\n\t\t'LPOP',\n\t\t'LPUSH',\n\t\t'LPUSHX',\n\t\t'LRANGE',\n\t\t'LREM',\n\t\t'LSET',\n\t\t'LTRIM',\n\t\t'MGET',\n\t\t'MIGRATE',\n\t\t'MONITOR',\n\t\t'MOVE',\n\t\t'MSET',\n\t\t'MSETNX',\n\t\t'MULTI',\n\t\t'PERSIST',\n\t\t'PEXPIRE',\n\t\t'PEXPIREAT',\n\t\t'PFADD',\n\t\t'PFCOUNT',\n\t\t'PFMERGE',\n\t\t'PING',\n\t\t'PSETEX',\n\t\t'PSUBSCRIBE',\n\t\t'PUBSUB',\n\t\t'PTTL',\n\t\t'PUBLISH',\n\t\t'PUNSUBSCRIBE',\n\t\t'QUIT',\n\t\t'RANDOMKEY',\n\t\t'READONLY',\n\t\t'READWRITE',\n\t\t'RENAME',\n\t\t'RENAMENX',\n\t\t'RESTORE',\n\t\t'ROLE',\n\t\t'RPOP',\n\t\t'RPOPLPUSH',\n\t\t'RPUSH',\n\t\t'RPUSHX',\n\t\t'SADD',\n\t\t'SAVE',\n\t\t'SCARD',\n\t\t'SCRIPT',\n\t\t'FLUSH',\n\t\t'LOAD',\n\t\t'SDIFF',\n\t\t'SDIFFSTORE',\n\t\t'SELECT',\n\t\t'SETBIT',\n\t\t'SETEX',\n\t\t'SETNX',\n\t\t'SETRANGE',\n\t\t'SHUTDOWN',\n\t\t'SINTER',\n\t\t'SINTERSTORE',\n\t\t'SISMEMBER',\n\t\t'SLAVEOF',\n\t\t'SLOWLOG',\n\t\t'SMEMBERS',\n\t\t'SMOVE',\n\t\t'SORT',\n\t\t'SPOP',\n\t\t'SRANDMEMBER',\n\t\t'SREM',\n\t\t'STRLEN',\n\t\t'SUBSCRIBE',\n\t\t'SUNION',\n\t\t'SUNIONSTORE',\n\t\t'SWAPDB',\n\t\t'SYNC',\n\t\t'TIME',\n\t\t'TOUCH',\n\t\t'TTL',\n\t\t'TYPE',\n\t\t'UNSUBSCRIBE',\n\t\t'UNLINK',\n\t\t'UNWATCH',\n\t\t'WAIT',\n\t\t'WATCH',\n\t\t'ZADD',\n\t\t'ZCARD',\n\t\t'ZCOUNT',\n\t\t'ZINCRBY',\n\t\t'ZINTERSTORE',\n\t\t'ZLEXCOUNT',\n\t\t'ZRANGE',\n\t\t'ZRANGEBYLEX',\n\t\t'ZREVRANGEBYLEX',\n\t\t'ZRANGEBYSCORE',\n\t\t'ZRANK',\n\t\t'ZREM',\n\t\t'ZREMRANGEBYLEX',\n\t\t'ZREMRANGEBYRANK',\n\t\t'ZREMRANGEBYSCORE',\n\t\t'ZREVRANGE',\n\t\t'ZREVRANGEBYSCORE',\n\t\t'ZREVRANK',\n\t\t'ZSCORE',\n\t\t'ZUNIONSTORE',\n\t\t'SCAN',\n\t\t'SSCAN',\n\t\t'HSCAN',\n\t\t'ZSCAN'\n\t],\n\toperators: [\n\t\t// NOT SUPPORTED\n\t],\n\tbuiltinFunctions: [\n\t\t// NOT SUPPORTED\n\t],\n\tbuiltinVariables: [\n\t\t// NOT SUPPORTED\n\t],\n\tpseudoColumns: [\n\t\t// NOT SUPPORTED\n\t],\n\ttokenizer: {\n\t\troot: [\n\t\t\t{ include: '@whitespace' },\n\t\t\t{ include: '@pseudoColumns' },\n\t\t\t{ include: '@numbers' },\n\t\t\t{ include: '@strings' },\n\t\t\t{ include: '@scopes' },\n\t\t\t[/[;,.]/, 'delimiter'],\n\t\t\t[/[()]/, '@brackets'],\n\t\t\t[\n\t\t\t\t/[\\w@#$]+/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@keywords': 'keyword',\n\t\t\t\t\t\t'@operators': 'operator',\n\t\t\t\t\t\t'@builtinVariables': 'predefined',\n\t\t\t\t\t\t'@builtinFunctions': 'predefined',\n\t\t\t\t\t\t'@default': 'identifier'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/[<>=!%&+\\-*/|~^]/, 'operator']\n\t\t],\n\t\twhitespace: [[/\\s+/, 'white']],\n\t\tpseudoColumns: [\n\t\t\t[\n\t\t\t\t/[$][A-Za-z_][\\w@#$]*/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@pseudoColumns': 'predefined',\n\t\t\t\t\t\t'@default': 'identifier'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t],\n\t\tnumbers: [\n\t\t\t[/0[xX][0-9a-fA-F]*/, 'number'],\n\t\t\t[/[$][+-]*\\d*(\\.\\d*)?/, 'number'],\n\t\t\t[/((\\d+(\\.\\d*)?)|(\\.\\d+))([eE][\\-+]?\\d+)?/, 'number']\n\t\t],\n\t\tstrings: [\n\t\t\t[/'/, { token: 'string', next: '@string' }],\n\t\t\t[/\"/, { token: 'string.double', next: '@stringDouble' }]\n\t\t],\n\t\tstring: [\n\t\t\t[/[^']+/, 'string'],\n\t\t\t[/''/, 'string'],\n\t\t\t[/'/, { token: 'string', next: '@pop' }]\n\t\t],\n\t\tstringDouble: [\n\t\t\t[/[^\"]+/, 'string.double'],\n\t\t\t[/\"\"/, 'string.double'],\n\t\t\t[/\"/, { token: 'string.double', next: '@pop' }]\n\t\t],\n\t\tscopes: [\n\t\t\t// NOT SUPPORTED\n\t\t]\n\t}\n}",
  "redshift": "<languages.IMonarchLanguage>{\n\tdefaultToken: '',\n\ttokenPostfix: '.sql',\n\tignoreCase: true,\n\n\tbrackets: [\n\t\t{ open: '[', close: ']', token: 'delimiter.square' },\n\t\t{ open: '(', close: ')', token: 'delimiter.parenthesis' }\n\t],\n\tkeywords: [\n\t\t'AES128',\n\t\t'AES256',\n\t\t'ALL',\n\t\t'ALLOWOVERWRITE',\n\t\t'ANALYSE',\n\t\t'ANALYZE',\n\t\t'AND',\n\t\t'ANY',\n\t\t'ARRAY',\n\t\t'AS',\n\t\t'ASC',\n\t\t'AUTHORIZATION',\n\t\t'AZ64',\n\t\t'BACKUP',\n\t\t'BETWEEN',\n\t\t'BINARY',\n\t\t'BLANKSASNULL',\n\t\t'BOTH',\n\t\t'BYTEDICT',\n\t\t'BZIP2',\n\t\t'CASE',\n\t\t'CAST',\n\t\t'CHECK',\n\t\t'COLLATE',\n\t\t'COLUMN',\n\t\t'CONSTRAINT',\n\t\t'CREATE',\n\t\t'CREDENTIALS',\n\t\t'CROSS',\n\t\t'CURRENT_DATE',\n\t\t'CURRENT_TIME',\n\t\t'CURRENT_TIMESTAMP',\n\t\t'CURRENT_USER',\n\t\t'CURRENT_USER_ID',\n\t\t'DEFAULT',\n\t\t'DEFERRABLE',\n\t\t'DEFLATE',\n\t\t'DEFRAG',\n\t\t'DELTA',\n\t\t'DELTA32K',\n\t\t'DESC',\n\t\t'DISABLE',\n\t\t'DISTINCT',\n\t\t'DO',\n\t\t'ELSE',\n\t\t'EMPTYASNULL',\n\t\t'ENABLE',\n\t\t'ENCODE',\n\t\t'ENCRYPT',\n\t\t'ENCRYPTION',\n\t\t'END',\n\t\t'EXCEPT',\n\t\t'EXPLICIT',\n\t\t'FALSE',\n\t\t'FOR',\n\t\t'FOREIGN',\n\t\t'FREEZE',\n\t\t'FROM',\n\t\t'FULL',\n\t\t'GLOBALDICT256',\n\t\t'GLOBALDICT64K',\n\t\t'GRANT',\n\t\t'GROUP',\n\t\t'GZIP',\n\t\t'HAVING',\n\t\t'IDENTITY',\n\t\t'IGNORE',\n\t\t'ILIKE',\n\t\t'IN',\n\t\t'INITIALLY',\n\t\t'INNER',\n\t\t'INTERSECT',\n\t\t'INTO',\n\t\t'IS',\n\t\t'ISNULL',\n\t\t'JOIN',\n\t\t'LANGUAGE',\n\t\t'LEADING',\n\t\t'LEFT',\n\t\t'LIKE',\n\t\t'LIMIT',\n\t\t'LOCALTIME',\n\t\t'LOCALTIMESTAMP',\n\t\t'LUN',\n\t\t'LUNS',\n\t\t'LZO',\n\t\t'LZOP',\n\t\t'MINUS',\n\t\t'MOSTLY16',\n\t\t'MOSTLY32',\n\t\t'MOSTLY8',\n\t\t'NATURAL',\n\t\t'NEW',\n\t\t'NOT',\n\t\t'NOTNULL',\n\t\t'NULL',\n\t\t'NULLS',\n\t\t'OFF',\n\t\t'OFFLINE',\n\t\t'OFFSET',\n\t\t'OID',\n\t\t'OLD',\n\t\t'ON',\n\t\t'ONLY',\n\t\t'OPEN',\n\t\t'OR',\n\t\t'ORDER',\n\t\t'OUTER',\n\t\t'OVERLAPS',\n\t\t'PARALLEL',\n\t\t'PARTITION',\n\t\t'PERCENT',\n\t\t'PERMISSIONS',\n\t\t'PLACING',\n\t\t'PRIMARY',\n\t\t'RAW',\n\t\t'READRATIO',\n\t\t'RECOVER',\n\t\t'REFERENCES',\n\t\t'RESPECT',\n\t\t'REJECTLOG',\n\t\t'RESORT',\n\t\t'RESTORE',\n\t\t'RIGHT',\n\t\t'SELECT',\n\t\t'SESSION_USER',\n\t\t'SIMILAR',\n\t\t'SNAPSHOT',\n\t\t'SOME',\n\t\t'SYSDATE',\n\t\t'SYSTEM',\n\t\t'TABLE',\n\t\t'TAG',\n\t\t'TDES',\n\t\t'TEXT255',\n\t\t'TEXT32K',\n\t\t'THEN',\n\t\t'TIMESTAMP',\n\t\t'TO',\n\t\t'TOP',\n\t\t'TRAILING',\n\t\t'TRUE',\n\t\t'TRUNCATECOLUMNS',\n\t\t'UNION',\n\t\t'UNIQUE',\n\t\t'USER',\n\t\t'USING',\n\t\t'VERBOSE',\n\t\t'WALLET',\n\t\t'WHEN',\n\t\t'WHERE',\n\t\t'WITH',\n\t\t'WITHOUT'\n\t],\n\toperators: [\n\t\t'AND',\n\t\t'BETWEEN',\n\t\t'IN',\n\t\t'LIKE',\n\t\t'NOT',\n\t\t'OR',\n\t\t'IS',\n\t\t'NULL',\n\t\t'INTERSECT',\n\t\t'UNION',\n\t\t'INNER',\n\t\t'JOIN',\n\t\t'LEFT',\n\t\t'OUTER',\n\t\t'RIGHT'\n\t],\n\tbuiltinFunctions: [\n\t\t'current_schema',\n\t\t'current_schemas',\n\t\t'has_database_privilege',\n\t\t'has_schema_privilege',\n\t\t'has_table_privilege',\n\t\t'age',\n\t\t'current_time',\n\t\t'current_timestamp',\n\t\t'localtime',\n\t\t'isfinite',\n\t\t'now',\n\t\t'ascii',\n\t\t'get_bit',\n\t\t'get_byte',\n\t\t'set_bit',\n\t\t'set_byte',\n\t\t'to_ascii',\n\t\t'approximate percentile_disc',\n\t\t'avg',\n\t\t'count',\n\t\t'listagg',\n\t\t'max',\n\t\t'median',\n\t\t'min',\n\t\t'percentile_cont',\n\t\t'stddev_samp',\n\t\t'stddev_pop',\n\t\t'sum',\n\t\t'var_samp',\n\t\t'var_pop',\n\t\t'bit_and',\n\t\t'bit_or',\n\t\t'bool_and',\n\t\t'bool_or',\n\t\t'cume_dist',\n\t\t'first_value',\n\t\t'lag',\n\t\t'last_value',\n\t\t'lead',\n\t\t'nth_value',\n\t\t'ratio_to_report',\n\t\t'dense_rank',\n\t\t'ntile',\n\t\t'percent_rank',\n\t\t'rank',\n\t\t'row_number',\n\t\t'case',\n\t\t'coalesce',\n\t\t'decode',\n\t\t'greatest',\n\t\t'least',\n\t\t'nvl',\n\t\t'nvl2',\n\t\t'nullif',\n\t\t'add_months',\n\t\t'at time zone',\n\t\t'convert_timezone',\n\t\t'current_date',\n\t\t'date_cmp',\n\t\t'date_cmp_timestamp',\n\t\t'date_cmp_timestamptz',\n\t\t'date_part_year',\n\t\t'dateadd',\n\t\t'datediff',\n\t\t'date_part',\n\t\t'date_trunc',\n\t\t'extract',\n\t\t'getdate',\n\t\t'interval_cmp',\n\t\t'last_day',\n\t\t'months_between',\n\t\t'next_day',\n\t\t'sysdate',\n\t\t'timeofday',\n\t\t'timestamp_cmp',\n\t\t'timestamp_cmp_date',\n\t\t'timestamp_cmp_timestamptz',\n\t\t'timestamptz_cmp',\n\t\t'timestamptz_cmp_date',\n\t\t'timestamptz_cmp_timestamp',\n\t\t'timezone',\n\t\t'to_timestamp',\n\t\t'trunc',\n\t\t'abs',\n\t\t'acos',\n\t\t'asin',\n\t\t'atan',\n\t\t'atan2',\n\t\t'cbrt',\n\t\t'ceil',\n\t\t'ceiling',\n\t\t'checksum',\n\t\t'cos',\n\t\t'cot',\n\t\t'degrees',\n\t\t'dexp',\n\t\t'dlog1',\n\t\t'dlog10',\n\t\t'exp',\n\t\t'floor',\n\t\t'ln',\n\t\t'log',\n\t\t'mod',\n\t\t'pi',\n\t\t'power',\n\t\t'radians',\n\t\t'random',\n\t\t'round',\n\t\t'sin',\n\t\t'sign',\n\t\t'sqrt',\n\t\t'tan',\n\t\t'to_hex',\n\t\t'bpcharcmp',\n\t\t'btrim',\n\t\t'bttext_pattern_cmp',\n\t\t'char_length',\n\t\t'character_length',\n\t\t'charindex',\n\t\t'chr',\n\t\t'concat',\n\t\t'crc32',\n\t\t'func_sha1',\n\t\t'initcap',\n\t\t'left and rights',\n\t\t'len',\n\t\t'length',\n\t\t'lower',\n\t\t'lpad and rpads',\n\t\t'ltrim',\n\t\t'md5',\n\t\t'octet_length',\n\t\t'position',\n\t\t'quote_ident',\n\t\t'quote_literal',\n\t\t'regexp_count',\n\t\t'regexp_instr',\n\t\t'regexp_replace',\n\t\t'regexp_substr',\n\t\t'repeat',\n\t\t'replace',\n\t\t'replicate',\n\t\t'reverse',\n\t\t'rtrim',\n\t\t'split_part',\n\t\t'strpos',\n\t\t'strtol',\n\t\t'substring',\n\t\t'textlen',\n\t\t'translate',\n\t\t'trim',\n\t\t'upper',\n\t\t'cast',\n\t\t'convert',\n\t\t'to_char',\n\t\t'to_date',\n\t\t'to_number',\n\t\t'json_array_length',\n\t\t'json_extract_array_element_text',\n\t\t'json_extract_path_text',\n\t\t'current_setting',\n\t\t'pg_cancel_backend',\n\t\t'pg_terminate_backend',\n\t\t'set_config',\n\t\t'current_database',\n\t\t'current_user',\n\t\t'current_user_id',\n\t\t'pg_backend_pid',\n\t\t'pg_last_copy_count',\n\t\t'pg_last_copy_id',\n\t\t'pg_last_query_id',\n\t\t'pg_last_unload_count',\n\t\t'session_user',\n\t\t'slice_num',\n\t\t'user',\n\t\t'version',\n\t\t'abbrev',\n\t\t'acosd',\n\t\t'any',\n\t\t'area',\n\t\t'array_agg',\n\t\t'array_append',\n\t\t'array_cat',\n\t\t'array_dims',\n\t\t'array_fill',\n\t\t'array_length',\n\t\t'array_lower',\n\t\t'array_ndims',\n\t\t'array_position',\n\t\t'array_positions',\n\t\t'array_prepend',\n\t\t'array_remove',\n\t\t'array_replace',\n\t\t'array_to_json',\n\t\t'array_to_string',\n\t\t'array_to_tsvector',\n\t\t'array_upper',\n\t\t'asind',\n\t\t'atan2d',\n\t\t'atand',\n\t\t'bit',\n\t\t'bit_length',\n\t\t'bound_box',\n\t\t'box',\n\t\t'brin_summarize_new_values',\n\t\t'broadcast',\n\t\t'cardinality',\n\t\t'center',\n\t\t'circle',\n\t\t'clock_timestamp',\n\t\t'col_description',\n\t\t'concat_ws',\n\t\t'convert_from',\n\t\t'convert_to',\n\t\t'corr',\n\t\t'cosd',\n\t\t'cotd',\n\t\t'covar_pop',\n\t\t'covar_samp',\n\t\t'current_catalog',\n\t\t'current_query',\n\t\t'current_role',\n\t\t'currval',\n\t\t'cursor_to_xml',\n\t\t'diameter',\n\t\t'div',\n\t\t'encode',\n\t\t'enum_first',\n\t\t'enum_last',\n\t\t'enum_range',\n\t\t'every',\n\t\t'family',\n\t\t'format',\n\t\t'format_type',\n\t\t'generate_series',\n\t\t'generate_subscripts',\n\t\t'get_current_ts_config',\n\t\t'gin_clean_pending_list',\n\t\t'grouping',\n\t\t'has_any_column_privilege',\n\t\t'has_column_privilege',\n\t\t'has_foreign_data_wrapper_privilege',\n\t\t'has_function_privilege',\n\t\t'has_language_privilege',\n\t\t'has_sequence_privilege',\n\t\t'has_server_privilege',\n\t\t'has_tablespace_privilege',\n\t\t'has_type_privilege',\n\t\t'height',\n\t\t'host',\n\t\t'hostmask',\n\t\t'inet_client_addr',\n\t\t'inet_client_port',\n\t\t'inet_merge',\n\t\t'inet_same_family',\n\t\t'inet_server_addr',\n\t\t'inet_server_port',\n\t\t'isclosed',\n\t\t'isempty',\n\t\t'isopen',\n\t\t'json_agg',\n\t\t'json_object',\n\t\t'json_object_agg',\n\t\t'json_populate_record',\n\t\t'json_populate_recordset',\n\t\t'json_to_record',\n\t\t'json_to_recordset',\n\t\t'jsonb_agg',\n\t\t'jsonb_object_agg',\n\t\t'justify_days',\n\t\t'justify_hours',\n\t\t'justify_interval',\n\t\t'lastval',\n\t\t'left',\n\t\t'line',\n\t\t'localtimestamp',\n\t\t'lower_inc',\n\t\t'lower_inf',\n\t\t'lpad',\n\t\t'lseg',\n\t\t'make_date',\n\t\t'make_interval',\n\t\t'make_time',\n\t\t'make_timestamp',\n\t\t'make_timestamptz',\n\t\t'masklen',\n\t\t'mode',\n\t\t'netmask',\n\t\t'network',\n\t\t'nextval',\n\t\t'npoints',\n\t\t'num_nonnulls',\n\t\t'num_nulls',\n\t\t'numnode',\n\t\t'obj_description',\n\t\t'overlay',\n\t\t'parse_ident',\n\t\t'path',\n\t\t'pclose',\n\t\t'percentile_disc',\n\t\t'pg_advisory_lock',\n\t\t'pg_advisory_lock_shared',\n\t\t'pg_advisory_unlock',\n\t\t'pg_advisory_unlock_all',\n\t\t'pg_advisory_unlock_shared',\n\t\t'pg_advisory_xact_lock',\n\t\t'pg_advisory_xact_lock_shared',\n\t\t'pg_backup_start_time',\n\t\t'pg_blocking_pids',\n\t\t'pg_client_encoding',\n\t\t'pg_collation_is_visible',\n\t\t'pg_column_size',\n\t\t'pg_conf_load_time',\n\t\t'pg_control_checkpoint',\n\t\t'pg_control_init',\n\t\t'pg_control_recovery',\n\t\t'pg_control_system',\n\t\t'pg_conversion_is_visible',\n\t\t'pg_create_logical_replication_slot',\n\t\t'pg_create_physical_replication_slot',\n\t\t'pg_create_restore_point',\n\t\t'pg_current_xlog_flush_location',\n\t\t'pg_current_xlog_insert_location',\n\t\t'pg_current_xlog_location',\n\t\t'pg_database_size',\n\t\t'pg_describe_object',\n\t\t'pg_drop_replication_slot',\n\t\t'pg_export_snapshot',\n\t\t'pg_filenode_relation',\n\t\t'pg_function_is_visible',\n\t\t'pg_get_constraintdef',\n\t\t'pg_get_expr',\n\t\t'pg_get_function_arguments',\n\t\t'pg_get_function_identity_arguments',\n\t\t'pg_get_function_result',\n\t\t'pg_get_functiondef',\n\t\t'pg_get_indexdef',\n\t\t'pg_get_keywords',\n\t\t'pg_get_object_address',\n\t\t'pg_get_owned_sequence',\n\t\t'pg_get_ruledef',\n\t\t'pg_get_serial_sequence',\n\t\t'pg_get_triggerdef',\n\t\t'pg_get_userbyid',\n\t\t'pg_get_viewdef',\n\t\t'pg_has_role',\n\t\t'pg_identify_object',\n\t\t'pg_identify_object_as_address',\n\t\t'pg_index_column_has_property',\n\t\t'pg_index_has_property',\n\t\t'pg_indexam_has_property',\n\t\t'pg_indexes_size',\n\t\t'pg_is_in_backup',\n\t\t'pg_is_in_recovery',\n\t\t'pg_is_other_temp_schema',\n\t\t'pg_is_xlog_replay_paused',\n\t\t'pg_last_committed_xact',\n\t\t'pg_last_xact_replay_timestamp',\n\t\t'pg_last_xlog_receive_location',\n\t\t'pg_last_xlog_replay_location',\n\t\t'pg_listening_channels',\n\t\t'pg_logical_emit_message',\n\t\t'pg_logical_slot_get_binary_changes',\n\t\t'pg_logical_slot_get_changes',\n\t\t'pg_logical_slot_peek_binary_changes',\n\t\t'pg_logical_slot_peek_changes',\n\t\t'pg_ls_dir',\n\t\t'pg_my_temp_schema',\n\t\t'pg_notification_queue_usage',\n\t\t'pg_opclass_is_visible',\n\t\t'pg_operator_is_visible',\n\t\t'pg_opfamily_is_visible',\n\t\t'pg_options_to_table',\n\t\t'pg_postmaster_start_time',\n\t\t'pg_read_binary_file',\n\t\t'pg_read_file',\n\t\t'pg_relation_filenode',\n\t\t'pg_relation_filepath',\n\t\t'pg_relation_size',\n\t\t'pg_reload_conf',\n\t\t'pg_replication_origin_create',\n\t\t'pg_replication_origin_drop',\n\t\t'pg_replication_origin_oid',\n\t\t'pg_replication_origin_progress',\n\t\t'pg_replication_origin_session_is_setup',\n\t\t'pg_replication_origin_session_progress',\n\t\t'pg_replication_origin_session_reset',\n\t\t'pg_replication_origin_session_setup',\n\t\t'pg_replication_origin_xact_reset',\n\t\t'pg_replication_origin_xact_setup',\n\t\t'pg_rotate_logfile',\n\t\t'pg_size_bytes',\n\t\t'pg_size_pretty',\n\t\t'pg_sleep',\n\t\t'pg_sleep_for',\n\t\t'pg_sleep_until',\n\t\t'pg_start_backup',\n\t\t'pg_stat_file',\n\t\t'pg_stop_backup',\n\t\t'pg_switch_xlog',\n\t\t'pg_table_is_visible',\n\t\t'pg_table_size',\n\t\t'pg_tablespace_databases',\n\t\t'pg_tablespace_location',\n\t\t'pg_tablespace_size',\n\t\t'pg_total_relation_size',\n\t\t'pg_trigger_depth',\n\t\t'pg_try_advisory_lock',\n\t\t'pg_try_advisory_lock_shared',\n\t\t'pg_try_advisory_xact_lock',\n\t\t'pg_try_advisory_xact_lock_shared',\n\t\t'pg_ts_config_is_visible',\n\t\t'pg_ts_dict_is_visible',\n\t\t'pg_ts_parser_is_visible',\n\t\t'pg_ts_template_is_visible',\n\t\t'pg_type_is_visible',\n\t\t'pg_typeof',\n\t\t'pg_xact_commit_timestamp',\n\t\t'pg_xlog_location_diff',\n\t\t'pg_xlog_replay_pause',\n\t\t'pg_xlog_replay_resume',\n\t\t'pg_xlogfile_name',\n\t\t'pg_xlogfile_name_offset',\n\t\t'phraseto_tsquery',\n\t\t'plainto_tsquery',\n\t\t'point',\n\t\t'polygon',\n\t\t'popen',\n\t\t'pqserverversion',\n\t\t'query_to_xml',\n\t\t'querytree',\n\t\t'quote_nullable',\n\t\t'radius',\n\t\t'range_merge',\n\t\t'regexp_matches',\n\t\t'regexp_split_to_array',\n\t\t'regexp_split_to_table',\n\t\t'regr_avgx',\n\t\t'regr_avgy',\n\t\t'regr_count',\n\t\t'regr_intercept',\n\t\t'regr_r2',\n\t\t'regr_slope',\n\t\t'regr_sxx',\n\t\t'regr_sxy',\n\t\t'regr_syy',\n\t\t'right',\n\t\t'row_security_active',\n\t\t'row_to_json',\n\t\t'rpad',\n\t\t'scale',\n\t\t'set_masklen',\n\t\t'setseed',\n\t\t'setval',\n\t\t'setweight',\n\t\t'shobj_description',\n\t\t'sind',\n\t\t'sprintf',\n\t\t'statement_timestamp',\n\t\t'stddev',\n\t\t'string_agg',\n\t\t'string_to_array',\n\t\t'strip',\n\t\t'substr',\n\t\t'table_to_xml',\n\t\t'table_to_xml_and_xmlschema',\n\t\t'tand',\n\t\t'text',\n\t\t'to_json',\n\t\t'to_regclass',\n\t\t'to_regnamespace',\n\t\t'to_regoper',\n\t\t'to_regoperator',\n\t\t'to_regproc',\n\t\t'to_regprocedure',\n\t\t'to_regrole',\n\t\t'to_regtype',\n\t\t'to_tsquery',\n\t\t'to_tsvector',\n\t\t'transaction_timestamp',\n\t\t'ts_debug',\n\t\t'ts_delete',\n\t\t'ts_filter',\n\t\t'ts_headline',\n\t\t'ts_lexize',\n\t\t'ts_parse',\n\t\t'ts_rank',\n\t\t'ts_rank_cd',\n\t\t'ts_rewrite',\n\t\t'ts_stat',\n\t\t'ts_token_type',\n\t\t'tsquery_phrase',\n\t\t'tsvector_to_array',\n\t\t'tsvector_update_trigger',\n\t\t'tsvector_update_trigger_column',\n\t\t'txid_current',\n\t\t'txid_current_snapshot',\n\t\t'txid_snapshot_xip',\n\t\t'txid_snapshot_xmax',\n\t\t'txid_snapshot_xmin',\n\t\t'txid_visible_in_snapshot',\n\t\t'unnest',\n\t\t'upper_inc',\n\t\t'upper_inf',\n\t\t'variance',\n\t\t'width',\n\t\t'width_bucket',\n\t\t'xml_is_well_formed',\n\t\t'xml_is_well_formed_content',\n\t\t'xml_is_well_formed_document',\n\t\t'xmlagg',\n\t\t'xmlcomment',\n\t\t'xmlconcat',\n\t\t'xmlelement',\n\t\t'xmlexists',\n\t\t'xmlforest',\n\t\t'xmlparse',\n\t\t'xmlpi',\n\t\t'xmlroot',\n\t\t'xmlserialize',\n\t\t'xpath',\n\t\t'xpath_exists'\n\t],\n\tbuiltinVariables: [\n\t\t// NOT SUPPORTED\n\t],\n\tpseudoColumns: [\n\t\t// NOT SUPPORTED\n\t],\n\ttokenizer: {\n\t\troot: [\n\t\t\t{ include: '@comments' },\n\t\t\t{ include: '@whitespace' },\n\t\t\t{ include: '@pseudoColumns' },\n\t\t\t{ include: '@numbers' },\n\t\t\t{ include: '@strings' },\n\t\t\t{ include: '@complexIdentifiers' },\n\t\t\t{ include: '@scopes' },\n\t\t\t[/[;,.]/, 'delimiter'],\n\t\t\t[/[()]/, '@brackets'],\n\t\t\t[\n\t\t\t\t/[\\w@#$]+/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@keywords': 'keyword',\n\t\t\t\t\t\t'@operators': 'operator',\n\t\t\t\t\t\t'@builtinVariables': 'predefined',\n\t\t\t\t\t\t'@builtinFunctions': 'predefined',\n\t\t\t\t\t\t'@default': 'identifier'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/[<>=!%&+\\-*/|~^]/, 'operator']\n\t\t],\n\t\twhitespace: [[/\\s+/, 'white']],\n\t\tcomments: [\n\t\t\t[/--+.*/, 'comment'],\n\t\t\t[/\\/\\*/, { token: 'comment.quote', next: '@comment' }]\n\t\t],\n\t\tcomment: [\n\t\t\t[/[^*/]+/, 'comment'],\n\t\t\t// Not supporting nested comments, as nested comments seem to not be standard?\n\t\t\t// i.e. http://stackoverflow.com/questions/728172/are-there-multiline-comment-delimiters-in-sql-that-are-vendor-agnostic\n\t\t\t// [/\\/\\*/, { token: 'comment.quote', next: '@push' }],    // nested comment not allowed :-(\n\t\t\t[/\\*\\//, { token: 'comment.quote', next: '@pop' }],\n\t\t\t[/./, 'comment']\n\t\t],\n\t\tpseudoColumns: [\n\t\t\t[\n\t\t\t\t/[$][A-Za-z_][\\w@#$]*/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@pseudoColumns': 'predefined',\n\t\t\t\t\t\t'@default': 'identifier'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t],\n\t\tnumbers: [\n\t\t\t[/0[xX][0-9a-fA-F]*/, 'number'],\n\t\t\t[/[$][+-]*\\d*(\\.\\d*)?/, 'number'],\n\t\t\t[/((\\d+(\\.\\d*)?)|(\\.\\d+))([eE][\\-+]?\\d+)?/, 'number']\n\t\t],\n\t\tstrings: [[/'/, { token: 'string', next: '@string' }]],\n\t\tstring: [\n\t\t\t[/[^']+/, 'string'],\n\t\t\t[/''/, 'string'],\n\t\t\t[/'/, { token: 'string', next: '@pop' }]\n\t\t],\n\t\tcomplexIdentifiers: [[/\"/, { token: 'identifier.quote', next: '@quotedIdentifier' }]],\n\t\tquotedIdentifier: [\n\t\t\t[/[^\"]+/, 'identifier'],\n\t\t\t[/\"\"/, 'identifier'],\n\t\t\t[/\"/, { token: 'identifier.quote', next: '@pop' }]\n\t\t],\n\t\tscopes: [\n\t\t\t// NOT SUPPORTED\n\t\t]\n\t}\n}",
  "restructuredtext": "<languages.IMonarchLanguage>{\n\tdefaultToken: '',\n\ttokenPostfix: '.rst',\n\n\tcontrol: /[\\\\`*_\\[\\]{}()#+\\-\\.!]/,\n\tescapes: /\\\\(?:@control)/,\n\n\tempty: [\n\t\t'area',\n\t\t'base',\n\t\t'basefont',\n\t\t'br',\n\t\t'col',\n\t\t'frame',\n\t\t'hr',\n\t\t'img',\n\t\t'input',\n\t\t'isindex',\n\t\t'link',\n\t\t'meta',\n\t\t'param'\n\t],\n\n\talphanumerics: /[A-Za-z0-9]/,\n\tsimpleRefNameWithoutBq: /(?:@alphanumerics[-_+:.]*@alphanumerics)+|(?:@alphanumerics+)/,\n\tsimpleRefName: /(?:`@phrase`|@simpleRefNameWithoutBq)/,\n\tphrase: /@simpleRefNameWithoutBq(?:\\s@simpleRefNameWithoutBq)*/,\n\tcitationName: /[A-Za-z][A-Za-z0-9-_.]*/,\n\tblockLiteralStart: /(?:[!\"#$%&'()*+,-./:;<=>?@\\[\\]^_`{|}~]|[\\s])/,\n\tprecedingChars: /(?:[ -:/'\"<([{])/,\n\tfollowingChars: /(?:[ -.,:;!?/'\")\\]}>]|$)/,\n\tpunctuation: /(=|-|~|`|#|\"|\\^|\\+|\\*|:|\\.|'|_|\\+)/,\n\ttokenizer: {\n\t\troot: [\n\t\t\t//sections\n\t\t\t[/^(@punctuation{3,}$){1,1}?/, 'keyword'],\n\n\t\t\t//line-blocks\n\t\t\t//No rules on it\n\n\t\t\t//bullet-lists\n\t\t\t[/^\\s*([\\*\\-+‣•]|[a-zA-Z0-9]+\\.|\\([a-zA-Z0-9]+\\)|[a-zA-Z0-9]+\\))\\s/, 'keyword'],\n\n\t\t\t//literal-blocks\n\t\t\t[/([ ]::)\\s*$/, 'keyword', '@blankLineOfLiteralBlocks'],\n\t\t\t[/(::)\\s*$/, 'keyword', '@blankLineOfLiteralBlocks'],\n\n\t\t\t{ include: '@tables' },\n\n\t\t\t{ include: '@explicitMarkupBlocks' },\n\n\t\t\t{ include: '@inlineMarkup' }\n\t\t],\n\t\texplicitMarkupBlocks: [\n\t\t\t//citations\n\t\t\t{ include: '@citations' },\n\t\t\t//footnotes\n\t\t\t{ include: '@footnotes' },\n\t\t\t//directives\n\t\t\t[\n\t\t\t\t/^(\\.\\.\\s)(@simpleRefName)(::\\s)(.*)$/,\n\t\t\t\t[{ token: '', next: 'subsequentLines' }, 'keyword', '', '']\n\t\t\t],\n\n\t\t\t//hyperlink-targets\n\t\t\t[\n\t\t\t\t/^(\\.\\.)(\\s+)(_)(@simpleRefName)(:)(\\s+)(.*)/,\n\t\t\t\t[{ token: '', next: 'hyperlinks' }, '', '', 'string.link', '', '', 'string.link']\n\t\t\t],\n\n\t\t\t//anonymous-hyperlinks\n\t\t\t[\n\t\t\t\t/^((?:(?:\\.\\.)(?:\\s+))?)(__)(:)(\\s+)(.*)/,\n\t\t\t\t[{ token: '', next: 'subsequentLines' }, '', '', '', 'string.link']\n\t\t\t],\n\t\t\t[/^(__\\s+)(.+)/, ['', 'string.link']],\n\n\t\t\t//substitution-definitions\n\t\t\t[\n\t\t\t\t/^(\\.\\.)( \\|)([^| ]+[^|]*[^| ]*)(\\| )(@simpleRefName)(:: .*)/,\n\t\t\t\t[{ token: '', next: 'subsequentLines' }, '', 'string.link', '', 'keyword', ''],\n\t\t\t\t'@rawBlocks'\n\t\t\t],\n\t\t\t[/(\\|)([^| ]+[^|]*[^| ]*)(\\|_{0,2})/, ['', 'string.link', '']],\n\n\t\t\t//comments\n\t\t\t[/^(\\.\\.)([ ].*)$/, [{ token: '', next: '@comments' }, 'comment']]\n\t\t],\n\t\tinlineMarkup: [\n\t\t\t{ include: '@citationsReference' },\n\t\t\t{ include: '@footnotesReference' },\n\n\t\t\t//hyperlink-references\n\t\t\t[/(@simpleRefName)(_{1,2})/, ['string.link', '']],\n\n\t\t\t//embedded-uris-and-aliases\n\t\t\t[/(`)([^<`]+\\s+)(<)(.*)(>)(`)(_)/, ['', 'string.link', '', 'string.link', '', '', '']],\n\n\t\t\t//emphasis\n\t\t\t[/\\*\\*([^\\\\*]|\\*(?!\\*))+\\*\\*/, 'strong'],\n\t\t\t[/\\*[^*]+\\*/, 'emphasis'],\n\n\t\t\t//inline-literals\n\t\t\t[/(``)((?:[^`]|\\`(?!`))+)(``)/, ['', 'keyword', '']],\n\t\t\t[/(__\\s+)(.+)/, ['', 'keyword']],\n\n\t\t\t//interpreted-text\n\t\t\t[/(:)((?:@simpleRefNameWithoutBq)?)(:`)([^`]+)(`)/, ['', 'keyword', '', '', '']],\n\t\t\t[/(`)([^`]+)(`:)((?:@simpleRefNameWithoutBq)?)(:)/, ['', '', '', 'keyword', '']],\n\t\t\t[/(`)([^`]+)(`)/, ''],\n\n\t\t\t//inline-internal-targets\n\t\t\t[/(_`)(@phrase)(`)/, ['', 'string.link', '']]\n\t\t],\n\t\tcitations: [\n\t\t\t[\n\t\t\t\t/^(\\.\\.\\s+\\[)((?:@citationName))(\\]\\s+)(.*)/,\n\t\t\t\t[{ token: '', next: '@subsequentLines' }, 'string.link', '', '']\n\t\t\t]\n\t\t],\n\t\tcitationsReference: [[/(\\[)(@citationName)(\\]_)/, ['', 'string.link', '']]],\n\t\tfootnotes: [\n\t\t\t[\n\t\t\t\t/^(\\.\\.\\s+\\[)((?:[0-9]+))(\\]\\s+.*)/,\n\t\t\t\t[{ token: '', next: '@subsequentLines' }, 'string.link', '']\n\t\t\t],\n\t\t\t[\n\t\t\t\t/^(\\.\\.\\s+\\[)((?:#@simpleRefName?))(\\]\\s+)(.*)/,\n\t\t\t\t[{ token: '', next: '@subsequentLines' }, 'string.link', '', '']\n\t\t\t],\n\t\t\t[\n\t\t\t\t/^(\\.\\.\\s+\\[)((?:\\*))(\\]\\s+)(.*)/,\n\t\t\t\t[{ token: '', next: '@subsequentLines' }, 'string.link', '', '']\n\t\t\t]\n\t\t],\n\t\tfootnotesReference: [\n\t\t\t[/(\\[)([0-9]+)(\\])(_)/, ['', 'string.link', '', '']],\n\t\t\t[/(\\[)(#@simpleRefName?)(\\])(_)/, ['', 'string.link', '', '']],\n\t\t\t[/(\\[)(\\*)(\\])(_)/, ['', 'string.link', '', '']]\n\t\t],\n\t\tblankLineOfLiteralBlocks: [\n\t\t\t[/^$/, '', '@subsequentLinesOfLiteralBlocks'],\n\t\t\t[/^.*$/, '', '@pop']\n\t\t],\n\t\tsubsequentLinesOfLiteralBlocks: [\n\t\t\t[/(@blockLiteralStart+)(.*)/, ['keyword', '']],\n\t\t\t[/^(?!blockLiteralStart)/, '', '@popall']\n\t\t],\n\t\tsubsequentLines: [\n\t\t\t[/^[\\s]+.*/, ''],\n\t\t\t[/^(?!\\s)/, '', '@pop']\n\t\t],\n\t\thyperlinks: [\n\t\t\t[/^[\\s]+.*/, 'string.link'],\n\t\t\t[/^(?!\\s)/, '', '@pop']\n\t\t],\n\t\tcomments: [\n\t\t\t[/^[\\s]+.*/, 'comment'],\n\t\t\t[/^(?!\\s)/, '', '@pop']\n\t\t],\n\t\ttables: [\n\t\t\t[/\\+-[+-]+/, 'keyword'],\n\t\t\t[/\\+=[+=]+/, 'keyword']\n\t\t]\n\t}\n}",
  "ruby": "<languages.IMonarchLanguage>{\n\ttokenPostfix: '.ruby',\n\n\tkeywords: [\n\t\t'__LINE__',\n\t\t'__ENCODING__',\n\t\t'__FILE__',\n\t\t'BEGIN',\n\t\t'END',\n\t\t'alias',\n\t\t'and',\n\t\t'begin',\n\t\t'break',\n\t\t'case',\n\t\t'class',\n\t\t'def',\n\t\t'defined?',\n\t\t'do',\n\t\t'else',\n\t\t'elsif',\n\t\t'end',\n\t\t'ensure',\n\t\t'for',\n\t\t'false',\n\t\t'if',\n\t\t'in',\n\t\t'module',\n\t\t'next',\n\t\t'nil',\n\t\t'not',\n\t\t'or',\n\t\t'redo',\n\t\t'rescue',\n\t\t'retry',\n\t\t'return',\n\t\t'self',\n\t\t'super',\n\t\t'then',\n\t\t'true',\n\t\t'undef',\n\t\t'unless',\n\t\t'until',\n\t\t'when',\n\t\t'while',\n\t\t'yield'\n\t],\n\n\tkeywordops: ['::', '..', '...', '?', ':', '=>'],\n\n\tbuiltins: [\n\t\t'require',\n\t\t'public',\n\t\t'private',\n\t\t'include',\n\t\t'extend',\n\t\t'attr_reader',\n\t\t'protected',\n\t\t'private_class_method',\n\t\t'protected_class_method',\n\t\t'new'\n\t],\n\n\t// these are closed by 'end' (if, while and until are handled separately)\n\tdeclarations: [\n\t\t'module',\n\t\t'class',\n\t\t'def',\n\t\t'case',\n\t\t'do',\n\t\t'begin',\n\t\t'for',\n\t\t'if',\n\t\t'while',\n\t\t'until',\n\t\t'unless'\n\t],\n\n\tlinedecls: ['def', 'case', 'do', 'begin', 'for', 'if', 'while', 'until', 'unless'],\n\n\toperators: [\n\t\t'^',\n\t\t'&',\n\t\t'|',\n\t\t'<=>',\n\t\t'==',\n\t\t'===',\n\t\t'!~',\n\t\t'=~',\n\t\t'>',\n\t\t'>=',\n\t\t'<',\n\t\t'<=',\n\t\t'<<',\n\t\t'>>',\n\t\t'+',\n\t\t'-',\n\t\t'*',\n\t\t'/',\n\t\t'%',\n\t\t'**',\n\t\t'~',\n\t\t'+@',\n\t\t'-@',\n\t\t'[]',\n\t\t'[]=',\n\t\t'`',\n\t\t'+=',\n\t\t'-=',\n\t\t'*=',\n\t\t'**=',\n\t\t'/=',\n\t\t'^=',\n\t\t'%=',\n\t\t'<<=',\n\t\t'>>=',\n\t\t'&=',\n\t\t'&&=',\n\t\t'||=',\n\t\t'|='\n\t],\n\n\tbrackets: [\n\t\t{ open: '(', close: ')', token: 'delimiter.parenthesis' },\n\t\t{ open: '{', close: '}', token: 'delimiter.curly' },\n\t\t{ open: '[', close: ']', token: 'delimiter.square' }\n\t],\n\n\t// we include these common regular expressions\n\tsymbols: /[=><!~?:&|+\\-*\\/\\^%\\.]+/,\n\n\t// escape sequences\n\tescape: /(?:[abefnrstv\\\\\"'\\n\\r]|[0-7]{1,3}|x[0-9A-Fa-f]{1,2}|u[0-9A-Fa-f]{4})/,\n\tescapes: /\\\\(?:C\\-(@escape|.)|c(@escape|.)|@escape)/,\n\n\tdecpart: /\\d(_?\\d)*/,\n\tdecimal: /0|@decpart/,\n\n\tdelim: /[^a-zA-Z0-9\\s\\n\\r]/,\n\theredelim: /(?:\\w+|'[^']*'|\"[^\"]*\"|`[^`]*`)/,\n\n\tregexpctl: /[(){}\\[\\]\\$\\^|\\-*+?\\.]/,\n\tregexpesc: /\\\\(?:[AzZbBdDfnrstvwWn0\\\\\\/]|@regexpctl|c[A-Z]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4})?/,\n\n\t// The main tokenizer for our languages\n\ttokenizer: {\n\t\t// Main entry.\n\t\t// root.<decl> where decl is the current opening declaration (like 'class')\n\t\troot: [\n\t\t\t// identifiers and keywords\n\t\t\t// most complexity here is due to matching 'end' correctly with declarations.\n\t\t\t// We distinguish a declaration that comes first on a line, versus declarations further on a line (which are most likey modifiers)\n\t\t\t[\n\t\t\t\t/^(\\s*)([a-z_]\\w*[!?=]?)/,\n\t\t\t\t[\n\t\t\t\t\t'white',\n\t\t\t\t\t{\n\t\t\t\t\t\tcases: {\n\t\t\t\t\t\t\t'for|until|while': {\n\t\t\t\t\t\t\t\ttoken: 'keyword.$2',\n\t\t\t\t\t\t\t\tnext: '@dodecl.$2'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t'@declarations': {\n\t\t\t\t\t\t\t\ttoken: 'keyword.$2',\n\t\t\t\t\t\t\t\tnext: '@root.$2'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tend: { token: 'keyword.$S2', next: '@pop' },\n\t\t\t\t\t\t\t'@keywords': 'keyword',\n\t\t\t\t\t\t\t'@builtins': 'predefined',\n\t\t\t\t\t\t\t'@default': 'identifier'\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t],\n\t\t\t[\n\t\t\t\t/[a-z_]\\w*[!?=]?/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'if|unless|while|until': {\n\t\t\t\t\t\t\ttoken: 'keyword.$0x',\n\t\t\t\t\t\t\tnext: '@modifier.$0x'\n\t\t\t\t\t\t},\n\t\t\t\t\t\tfor: { token: 'keyword.$2', next: '@dodecl.$2' },\n\t\t\t\t\t\t'@linedecls': { token: 'keyword.$0', next: '@root.$0' },\n\t\t\t\t\t\tend: { token: 'keyword.$S2', next: '@pop' },\n\t\t\t\t\t\t'@keywords': 'keyword',\n\t\t\t\t\t\t'@builtins': 'predefined',\n\t\t\t\t\t\t'@default': 'identifier'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t[/[A-Z][\\w]*[!?=]?/, 'constructor.identifier'], // constant\n\t\t\t[/\\$[\\w]*/, 'global.constant'], // global\n\t\t\t[/@[\\w]*/, 'namespace.instance.identifier'], // instance\n\t\t\t[/@@@[\\w]*/, 'namespace.class.identifier'], // class\n\n\t\t\t// here document\n\t\t\t[/<<[-~](@heredelim).*/, { token: 'string.heredoc.delimiter', next: '@heredoc.$1' }],\n\t\t\t[/[ \\t\\r\\n]+<<(@heredelim).*/, { token: 'string.heredoc.delimiter', next: '@heredoc.$1' }],\n\t\t\t[/^<<(@heredelim).*/, { token: 'string.heredoc.delimiter', next: '@heredoc.$1' }],\n\n\t\t\t// whitespace\n\t\t\t{ include: '@whitespace' },\n\n\t\t\t// strings\n\t\t\t[/\"/, { token: 'string.d.delim', next: '@dstring.d.\"' }],\n\t\t\t[/'/, { token: 'string.sq.delim', next: '@sstring.sq' }],\n\n\t\t\t// % literals. For efficiency, rematch in the 'pstring' state\n\t\t\t[/%([rsqxwW]|Q?)/, { token: '@rematch', next: 'pstring' }],\n\n\t\t\t// commands and symbols\n\t\t\t[/`/, { token: 'string.x.delim', next: '@dstring.x.`' }],\n\t\t\t[/:(\\w|[$@])\\w*[!?=]?/, 'string.s'],\n\t\t\t[/:\"/, { token: 'string.s.delim', next: '@dstring.s.\"' }],\n\t\t\t[/:'/, { token: 'string.s.delim', next: '@sstring.s' }],\n\n\t\t\t// regular expressions. Lookahead for a (not escaped) closing forwardslash on the same line\n\t\t\t[/\\/(?=(\\\\\\/|[^\\/\\n])+\\/)/, { token: 'regexp.delim', next: '@regexp' }],\n\n\t\t\t// delimiters and operators\n\t\t\t[/[{}()\\[\\]]/, '@brackets'],\n\t\t\t[\n\t\t\t\t/@symbols/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@keywordops': 'keyword',\n\t\t\t\t\t\t'@operators': 'operator',\n\t\t\t\t\t\t'@default': ''\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t[/[;,]/, 'delimiter'],\n\n\t\t\t// numbers\n\t\t\t[/0[xX][0-9a-fA-F](_?[0-9a-fA-F])*/, 'number.hex'],\n\t\t\t[/0[_oO][0-7](_?[0-7])*/, 'number.octal'],\n\t\t\t[/0[bB][01](_?[01])*/, 'number.binary'],\n\t\t\t[/0[dD]@decpart/, 'number'],\n\t\t\t[\n\t\t\t\t/@decimal((\\.@decpart)?([eE][\\-+]?@decpart)?)/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t$1: 'number.float',\n\t\t\t\t\t\t'@default': 'number'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t],\n\n\t\t// used to not treat a 'do' as a block opener if it occurs on the same\n\t\t// line as a 'do' statement: 'while|until|for'\n\t\t// dodecl.<decl> where decl is the declarations started, like 'while'\n\t\tdodecl: [\n\t\t\t[/^/, { token: '', switchTo: '@root.$S2' }], // get out of do-skipping mode on a new line\n\t\t\t[\n\t\t\t\t/[a-z_]\\w*[!?=]?/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\tend: { token: 'keyword.$S2', next: '@pop' }, // end on same line\n\t\t\t\t\t\tdo: { token: 'keyword', switchTo: '@root.$S2' }, // do on same line: not an open bracket here\n\t\t\t\t\t\t'@linedecls': {\n\t\t\t\t\t\t\ttoken: '@rematch',\n\t\t\t\t\t\t\tswitchTo: '@root.$S2'\n\t\t\t\t\t\t}, // other declaration on same line: rematch\n\t\t\t\t\t\t'@keywords': 'keyword',\n\t\t\t\t\t\t'@builtins': 'predefined',\n\t\t\t\t\t\t'@default': 'identifier'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t{ include: '@root' }\n\t\t],\n\n\t\t// used to prevent potential modifiers ('if|until|while|unless') to match\n\t\t// with 'end' keywords.\n\t\t// modifier.<decl>x where decl is the declaration starter, like 'if'\n\t\tmodifier: [\n\t\t\t[/^/, '', '@pop'], // it was a modifier: get out of modifier mode on a new line\n\t\t\t[\n\t\t\t\t/[a-z_]\\w*[!?=]?/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\tend: { token: 'keyword.$S2', next: '@pop' }, // end on same line\n\t\t\t\t\t\t'then|else|elsif|do': {\n\t\t\t\t\t\t\ttoken: 'keyword',\n\t\t\t\t\t\t\tswitchTo: '@root.$S2'\n\t\t\t\t\t\t}, // real declaration and not a modifier\n\t\t\t\t\t\t'@linedecls': {\n\t\t\t\t\t\t\ttoken: '@rematch',\n\t\t\t\t\t\t\tswitchTo: '@root.$S2'\n\t\t\t\t\t\t}, // other declaration => not a modifier\n\t\t\t\t\t\t'@keywords': 'keyword',\n\t\t\t\t\t\t'@builtins': 'predefined',\n\t\t\t\t\t\t'@default': 'identifier'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t{ include: '@root' }\n\t\t],\n\n\t\t// single quote strings (also used for symbols)\n\t\t// sstring.<kind>  where kind is 'sq' (single quote) or 's' (symbol)\n\t\tsstring: [\n\t\t\t[/[^\\\\']+/, 'string.$S2'],\n\t\t\t[/\\\\\\\\|\\\\'|\\\\$/, 'string.$S2.escape'],\n\t\t\t[/\\\\./, 'string.$S2.invalid'],\n\t\t\t[/'/, { token: 'string.$S2.delim', next: '@pop' }]\n\t\t],\n\n\t\t// double quoted \"string\".\n\t\t// dstring.<kind>.<delim> where kind is 'd' (double quoted), 'x' (command), or 's' (symbol)\n\t\t// and delim is the ending delimiter (\" or `)\n\t\tdstring: [\n\t\t\t[/[^\\\\`\"#]+/, 'string.$S2'],\n\t\t\t[/#/, 'string.$S2.escape', '@interpolated'],\n\t\t\t[/\\\\$/, 'string.$S2.escape'],\n\t\t\t[/@escapes/, 'string.$S2.escape'],\n\t\t\t[/\\\\./, 'string.$S2.escape.invalid'],\n\t\t\t[\n\t\t\t\t/[`\"]/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'$#==$S3': { token: 'string.$S2.delim', next: '@pop' },\n\t\t\t\t\t\t'@default': 'string.$S2'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t],\n\n\t\t// literal documents\n\t\t// heredoc.<close> where close is the closing delimiter\n\t\theredoc: [\n\t\t\t[\n\t\t\t\t/^(\\s*)(@heredelim)$/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'$2==$S2': ['string.heredoc', { token: 'string.heredoc.delimiter', next: '@pop' }],\n\t\t\t\t\t\t'@default': ['string.heredoc', 'string.heredoc']\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/.*/, 'string.heredoc']\n\t\t],\n\n\t\t// interpolated sequence\n\t\tinterpolated: [\n\t\t\t[/\\$\\w*/, 'global.constant', '@pop'],\n\t\t\t[/@\\w*/, 'namespace.class.identifier', '@pop'],\n\t\t\t[/@@@\\w*/, 'namespace.instance.identifier', '@pop'],\n\t\t\t[\n\t\t\t\t/[{]/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'string.escape.curly',\n\t\t\t\t\tswitchTo: '@interpolated_compound'\n\t\t\t\t}\n\t\t\t],\n\t\t\t['', '', '@pop'] // just a # is interpreted as a #\n\t\t],\n\n\t\t// any code\n\t\tinterpolated_compound: [\n\t\t\t[/[}]/, { token: 'string.escape.curly', next: '@pop' }],\n\t\t\t{ include: '@root' }\n\t\t],\n\n\t\t// %r quoted regexp\n\t\t// pregexp.<open>.<close> where open/close are the open/close delimiter\n\t\tpregexp: [\n\t\t\t{ include: '@whitespace' },\n\t\t\t// turns out that you can quote using regex control characters, aargh!\n\t\t\t// for example; %r|kgjgaj| is ok (even though | is used for alternation)\n\t\t\t// so, we need to match those first\n\t\t\t[\n\t\t\t\t/[^\\(\\{\\[\\\\]/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'$#==$S3': { token: 'regexp.delim', next: '@pop' },\n\t\t\t\t\t\t'$#==$S2': { token: 'regexp.delim', next: '@push' }, // nested delimiters are allowed..\n\t\t\t\t\t\t'~[)}\\\\]]': '@brackets.regexp.escape.control',\n\t\t\t\t\t\t'~@regexpctl': 'regexp.escape.control',\n\t\t\t\t\t\t'@default': 'regexp'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t{ include: '@regexcontrol' }\n\t\t],\n\n\t\t// We match regular expression quite precisely\n\t\tregexp: [\n\t\t\t{ include: '@regexcontrol' },\n\t\t\t[/[^\\\\\\/]/, 'regexp'],\n\t\t\t['/[ixmp]*', { token: 'regexp.delim' }, '@pop']\n\t\t],\n\n\t\tregexcontrol: [\n\t\t\t[\n\t\t\t\t/(\\{)(\\d+(?:,\\d*)?)(\\})/,\n\t\t\t\t[\n\t\t\t\t\t'@brackets.regexp.escape.control',\n\t\t\t\t\t'regexp.escape.control',\n\t\t\t\t\t'@brackets.regexp.escape.control'\n\t\t\t\t]\n\t\t\t],\n\t\t\t[\n\t\t\t\t/(\\[)(\\^?)/,\n\t\t\t\t['@brackets.regexp.escape.control', { token: 'regexp.escape.control', next: '@regexrange' }]\n\t\t\t],\n\t\t\t[/(\\()(\\?[:=!])/, ['@brackets.regexp.escape.control', 'regexp.escape.control']],\n\t\t\t[/\\(\\?#/, { token: 'regexp.escape.control', next: '@regexpcomment' }],\n\t\t\t[/[()]/, '@brackets.regexp.escape.control'],\n\t\t\t[/@regexpctl/, 'regexp.escape.control'],\n\t\t\t[/\\\\$/, 'regexp.escape'],\n\t\t\t[/@regexpesc/, 'regexp.escape'],\n\t\t\t[/\\\\\\./, 'regexp.invalid'],\n\t\t\t[/#/, 'regexp.escape', '@interpolated']\n\t\t],\n\n\t\tregexrange: [\n\t\t\t[/-/, 'regexp.escape.control'],\n\t\t\t[/\\^/, 'regexp.invalid'],\n\t\t\t[/\\\\$/, 'regexp.escape'],\n\t\t\t[/@regexpesc/, 'regexp.escape'],\n\t\t\t[/[^\\]]/, 'regexp'],\n\t\t\t[/\\]/, '@brackets.regexp.escape.control', '@pop']\n\t\t],\n\n\t\tregexpcomment: [\n\t\t\t[/[^)]+/, 'comment'],\n\t\t\t[/\\)/, { token: 'regexp.escape.control', next: '@pop' }]\n\t\t],\n\n\t\t// % quoted strings\n\t\t// A bit repetitive since we need to often special case the kind of ending delimiter\n\t\tpstring: [\n\t\t\t[/%([qws])\\(/, { token: 'string.$1.delim', switchTo: '@qstring.$1.(.)' }],\n\t\t\t[/%([qws])\\[/, { token: 'string.$1.delim', switchTo: '@qstring.$1.[.]' }],\n\t\t\t[/%([qws])\\{/, { token: 'string.$1.delim', switchTo: '@qstring.$1.{.}' }],\n\t\t\t[/%([qws])</, { token: 'string.$1.delim', switchTo: '@qstring.$1.<.>' }],\n\t\t\t[/%([qws])(@delim)/, { token: 'string.$1.delim', switchTo: '@qstring.$1.$2.$2' }],\n\n\t\t\t[/%r\\(/, { token: 'regexp.delim', switchTo: '@pregexp.(.)' }],\n\t\t\t[/%r\\[/, { token: 'regexp.delim', switchTo: '@pregexp.[.]' }],\n\t\t\t[/%r\\{/, { token: 'regexp.delim', switchTo: '@pregexp.{.}' }],\n\t\t\t[/%r</, { token: 'regexp.delim', switchTo: '@pregexp.<.>' }],\n\t\t\t[/%r(@delim)/, { token: 'regexp.delim', switchTo: '@pregexp.$1.$1' }],\n\n\t\t\t[/%(x|W|Q?)\\(/, { token: 'string.$1.delim', switchTo: '@qqstring.$1.(.)' }],\n\t\t\t[/%(x|W|Q?)\\[/, { token: 'string.$1.delim', switchTo: '@qqstring.$1.[.]' }],\n\t\t\t[/%(x|W|Q?)\\{/, { token: 'string.$1.delim', switchTo: '@qqstring.$1.{.}' }],\n\t\t\t[/%(x|W|Q?)</, { token: 'string.$1.delim', switchTo: '@qqstring.$1.<.>' }],\n\t\t\t[/%(x|W|Q?)(@delim)/, { token: 'string.$1.delim', switchTo: '@qqstring.$1.$2.$2' }],\n\n\t\t\t[/%([rqwsxW]|Q?)./, { token: 'invalid', next: '@pop' }], // recover\n\t\t\t[/./, { token: 'invalid', next: '@pop' }] // recover\n\t\t],\n\n\t\t// non-expanded quoted string.\n\t\t// qstring.<kind>.<open>.<close>\n\t\t//  kind = q|w|s  (single quote, array, symbol)\n\t\t//  open = open delimiter\n\t\t//  close = close delimiter\n\t\tqstring: [\n\t\t\t[/\\\\$/, 'string.$S2.escape'],\n\t\t\t[/\\\\./, 'string.$S2.escape'],\n\t\t\t[\n\t\t\t\t/./,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'$#==$S4': { token: 'string.$S2.delim', next: '@pop' },\n\t\t\t\t\t\t'$#==$S3': { token: 'string.$S2.delim', next: '@push' }, // nested delimiters are allowed..\n\t\t\t\t\t\t'@default': 'string.$S2'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t],\n\n\t\t// expanded quoted string.\n\t\t// qqstring.<kind>.<open>.<close>\n\t\t//  kind = Q|W|x  (double quote, array, command)\n\t\t//  open = open delimiter\n\t\t//  close = close delimiter\n\t\tqqstring: [[/#/, 'string.$S2.escape', '@interpolated'], { include: '@qstring' }],\n\n\t\t// whitespace & comments\n\t\twhitespace: [\n\t\t\t[/[ \\t\\r\\n]+/, ''],\n\t\t\t[/^\\s*=begin\\b/, 'comment', '@comment'],\n\t\t\t[/#.*$/, 'comment']\n\t\t],\n\n\t\tcomment: [\n\t\t\t[/[^=]+/, 'comment'],\n\t\t\t[/^\\s*=begin\\b/, 'comment.invalid'], // nested comment\n\t\t\t[/^\\s*=end\\b.*/, 'comment', '@pop'],\n\t\t\t[/[=]/, 'comment']\n\t\t]\n\t}\n}",
  "rust": "<languages.IMonarchLanguage>{\n\ttokenPostfix: '.rust',\n\tdefaultToken: 'invalid',\n\tkeywords: [\n\t\t'as',\n\t\t'async',\n\t\t'await',\n\t\t'box',\n\t\t'break',\n\t\t'const',\n\t\t'continue',\n\t\t'crate',\n\t\t'dyn',\n\t\t'else',\n\t\t'enum',\n\t\t'extern',\n\t\t'false',\n\t\t'fn',\n\t\t'for',\n\t\t'if',\n\t\t'impl',\n\t\t'in',\n\t\t'let',\n\t\t'loop',\n\t\t'match',\n\t\t'mod',\n\t\t'move',\n\t\t'mut',\n\t\t'pub',\n\t\t'ref',\n\t\t'return',\n\t\t'self',\n\t\t'static',\n\t\t'struct',\n\t\t'super',\n\t\t'trait',\n\t\t'true',\n\t\t'try',\n\t\t'type',\n\t\t'unsafe',\n\t\t'use',\n\t\t'where',\n\t\t'while',\n\t\t'catch',\n\t\t'default',\n\t\t'union',\n\t\t'static',\n\t\t'abstract',\n\t\t'alignof',\n\t\t'become',\n\t\t'do',\n\t\t'final',\n\t\t'macro',\n\t\t'offsetof',\n\t\t'override',\n\t\t'priv',\n\t\t'proc',\n\t\t'pure',\n\t\t'sizeof',\n\t\t'typeof',\n\t\t'unsized',\n\t\t'virtual',\n\t\t'yield'\n\t],\n\n\ttypeKeywords: [\n\t\t'Self',\n\t\t'm32',\n\t\t'm64',\n\t\t'm128',\n\t\t'f80',\n\t\t'f16',\n\t\t'f128',\n\t\t'int',\n\t\t'uint',\n\t\t'float',\n\t\t'char',\n\t\t'bool',\n\t\t'u8',\n\t\t'u16',\n\t\t'u32',\n\t\t'u64',\n\t\t'f32',\n\t\t'f64',\n\t\t'i8',\n\t\t'i16',\n\t\t'i32',\n\t\t'i64',\n\t\t'str',\n\t\t'Option',\n\t\t'Either',\n\t\t'c_float',\n\t\t'c_double',\n\t\t'c_void',\n\t\t'FILE',\n\t\t'fpos_t',\n\t\t'DIR',\n\t\t'dirent',\n\t\t'c_char',\n\t\t'c_schar',\n\t\t'c_uchar',\n\t\t'c_short',\n\t\t'c_ushort',\n\t\t'c_int',\n\t\t'c_uint',\n\t\t'c_long',\n\t\t'c_ulong',\n\t\t'size_t',\n\t\t'ptrdiff_t',\n\t\t'clock_t',\n\t\t'time_t',\n\t\t'c_longlong',\n\t\t'c_ulonglong',\n\t\t'intptr_t',\n\t\t'uintptr_t',\n\t\t'off_t',\n\t\t'dev_t',\n\t\t'ino_t',\n\t\t'pid_t',\n\t\t'mode_t',\n\t\t'ssize_t'\n\t],\n\n\tconstants: ['true', 'false', 'Some', 'None', 'Left', 'Right', 'Ok', 'Err'],\n\n\tsupportConstants: [\n\t\t'EXIT_FAILURE',\n\t\t'EXIT_SUCCESS',\n\t\t'RAND_MAX',\n\t\t'EOF',\n\t\t'SEEK_SET',\n\t\t'SEEK_CUR',\n\t\t'SEEK_END',\n\t\t'_IOFBF',\n\t\t'_IONBF',\n\t\t'_IOLBF',\n\t\t'BUFSIZ',\n\t\t'FOPEN_MAX',\n\t\t'FILENAME_MAX',\n\t\t'L_tmpnam',\n\t\t'TMP_MAX',\n\t\t'O_RDONLY',\n\t\t'O_WRONLY',\n\t\t'O_RDWR',\n\t\t'O_APPEND',\n\t\t'O_CREAT',\n\t\t'O_EXCL',\n\t\t'O_TRUNC',\n\t\t'S_IFIFO',\n\t\t'S_IFCHR',\n\t\t'S_IFBLK',\n\t\t'S_IFDIR',\n\t\t'S_IFREG',\n\t\t'S_IFMT',\n\t\t'S_IEXEC',\n\t\t'S_IWRITE',\n\t\t'S_IREAD',\n\t\t'S_IRWXU',\n\t\t'S_IXUSR',\n\t\t'S_IWUSR',\n\t\t'S_IRUSR',\n\t\t'F_OK',\n\t\t'R_OK',\n\t\t'W_OK',\n\t\t'X_OK',\n\t\t'STDIN_FILENO',\n\t\t'STDOUT_FILENO',\n\t\t'STDERR_FILENO'\n\t],\n\n\tsupportMacros: [\n\t\t'format!',\n\t\t'print!',\n\t\t'println!',\n\t\t'panic!',\n\t\t'format_args!',\n\t\t'unreachable!',\n\t\t'write!',\n\t\t'writeln!'\n\t],\n\n\toperators: [\n\t\t'!',\n\t\t'!=',\n\t\t'%',\n\t\t'%=',\n\t\t'&',\n\t\t'&=',\n\t\t'&&',\n\t\t'*',\n\t\t'*=',\n\t\t'+',\n\t\t'+=',\n\t\t'-',\n\t\t'-=',\n\t\t'->',\n\t\t'.',\n\t\t'..',\n\t\t'...',\n\t\t'/',\n\t\t'/=',\n\t\t':',\n\t\t';',\n\t\t'<<',\n\t\t'<<=',\n\t\t'<',\n\t\t'<=',\n\t\t'=',\n\t\t'==',\n\t\t'=>',\n\t\t'>',\n\t\t'>=',\n\t\t'>>',\n\t\t'>>=',\n\t\t'@',\n\t\t'^',\n\t\t'^=',\n\t\t'|',\n\t\t'|=',\n\t\t'||',\n\t\t'_',\n\t\t'?',\n\t\t'#'\n\t],\n\n\tescapes: /\\\\([nrt0\\\"''\\\\]|x\\h{2}|u\\{\\h{1,6}\\})/,\n\tdelimiters: /[,]/,\n\tsymbols: /[\\#\\!\\%\\&\\*\\+\\-\\.\\/\\:\\;\\<\\=\\>\\@\\^\\|_\\?]+/,\n\tintSuffixes: /[iu](8|16|32|64|128|size)/,\n\tfloatSuffixes: /f(32|64)/,\n\n\ttokenizer: {\n\t\troot: [\n\t\t\t// Raw string literals\n\t\t\t[/r(#*)\"/, { token: 'string.quote', bracket: '@open', next: '@stringraw.$1' }],\n\t\t\t[\n\t\t\t\t/[a-zA-Z][a-zA-Z0-9_]*!?|_[a-zA-Z0-9_]+/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@typeKeywords': 'keyword.type',\n\t\t\t\t\t\t'@keywords': 'keyword',\n\t\t\t\t\t\t'@supportConstants': 'keyword',\n\t\t\t\t\t\t'@supportMacros': 'keyword',\n\t\t\t\t\t\t'@constants': 'keyword',\n\t\t\t\t\t\t'@default': 'identifier'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t// Designator\n\t\t\t[/\\$/, 'identifier'],\n\t\t\t// Lifetime annotations\n\t\t\t[/'[a-zA-Z_][a-zA-Z0-9_]*(?=[^\\'])/, 'identifier'],\n\t\t\t// Byte literal\n\t\t\t[/'(\\S|@escapes)'/, 'string.byteliteral'],\n\t\t\t// Strings\n\t\t\t[/\"/, { token: 'string.quote', bracket: '@open', next: '@string' }],\n\t\t\t{ include: '@numbers' },\n\t\t\t// Whitespace + comments\n\t\t\t{ include: '@whitespace' },\n\t\t\t[\n\t\t\t\t/@delimiters/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@keywords': 'keyword',\n\t\t\t\t\t\t'@default': 'delimiter'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t[/[{}()\\[\\]<>]/, '@brackets'],\n\t\t\t[/@symbols/, { cases: { '@operators': 'operator', '@default': '' } }]\n\t\t],\n\n\t\twhitespace: [\n\t\t\t[/[ \\t\\r\\n]+/, 'white'],\n\t\t\t[/\\/\\*/, 'comment', '@comment'],\n\t\t\t[/\\/\\/.*$/, 'comment']\n\t\t],\n\n\t\tcomment: [\n\t\t\t[/[^\\/*]+/, 'comment'],\n\t\t\t[/\\/\\*/, 'comment', '@push'],\n\t\t\t['\\\\*/', 'comment', '@pop'],\n\t\t\t[/[\\/*]/, 'comment']\n\t\t],\n\n\t\tstring: [\n\t\t\t[/[^\\\\\"]+/, 'string'],\n\t\t\t[/@escapes/, 'string.escape'],\n\t\t\t[/\\\\./, 'string.escape.invalid'],\n\t\t\t[/\"/, { token: 'string.quote', bracket: '@close', next: '@pop' }]\n\t\t],\n\n\t\tstringraw: [\n\t\t\t[/[^\"#]+/, { token: 'string' }],\n\t\t\t[\n\t\t\t\t/\"(#*)/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'$1==$S2': { token: 'string.quote', bracket: '@close', next: '@pop' },\n\t\t\t\t\t\t'@default': { token: 'string' }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/[\"#]/, { token: 'string' }]\n\t\t],\n\n\t\tnumbers: [\n\t\t\t//Octal\n\t\t\t[/(0o[0-7_]+)(@intSuffixes)?/, { token: 'number' }],\n\t\t\t//Binary\n\t\t\t[/(0b[0-1_]+)(@intSuffixes)?/, { token: 'number' }],\n\t\t\t//Exponent\n\t\t\t[/[\\d][\\d_]*(\\.[\\d][\\d_]*)?[eE][+-][\\d_]+(@floatSuffixes)?/, { token: 'number' }],\n\t\t\t//Float\n\t\t\t[/\\b(\\d\\.?[\\d_]*)(@floatSuffixes)?\\b/, { token: 'number' }],\n\t\t\t//Hexadecimal\n\t\t\t[/(0x[\\da-fA-F]+)_?(@intSuffixes)?/, { token: 'number' }],\n\t\t\t//Integer\n\t\t\t[/[\\d][\\d_]*(@intSuffixes?)?/, { token: 'number' }]\n\t\t]\n\t}\n}",
  "sb": "<languages.IMonarchLanguage>{\n\tdefaultToken: '',\n\ttokenPostfix: '.sb',\n\tignoreCase: true,\n\n\tbrackets: [\n\t\t{ token: 'delimiter.array', open: '[', close: ']' },\n\t\t{ token: 'delimiter.parenthesis', open: '(', close: ')' },\n\n\t\t// Special bracket statement pairs\n\t\t{ token: 'keyword.tag-if', open: 'If', close: 'EndIf' },\n\t\t{ token: 'keyword.tag-while', open: 'While', close: 'EndWhile' },\n\t\t{ token: 'keyword.tag-for', open: 'For', close: 'EndFor' },\n\t\t{ token: 'keyword.tag-sub', open: 'Sub', close: 'EndSub' }\n\t],\n\n\tkeywords: [\n\t\t'Else',\n\t\t'ElseIf',\n\t\t'EndFor',\n\t\t'EndIf',\n\t\t'EndSub',\n\t\t'EndWhile',\n\t\t'For',\n\t\t'Goto',\n\t\t'If',\n\t\t'Step',\n\t\t'Sub',\n\t\t'Then',\n\t\t'To',\n\t\t'While'\n\t],\n\n\ttagwords: ['If', 'Sub', 'While', 'For'],\n\n\toperators: ['>', '<', '<>', '<=', '>=', 'And', 'Or', '+', '-', '*', '/', '='],\n\n\t// we include these common regular expressions\n\tidentifier: /[a-zA-Z_][\\w]*/,\n\tsymbols: /[=><:+\\-*\\/%\\.,]+/,\n\tescapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n\n\t// The main tokenizer for our languages\n\ttokenizer: {\n\t\troot: [\n\t\t\t// whitespace\n\t\t\t{ include: '@whitespace' },\n\n\t\t\t// classes\n\t\t\t[/(@identifier)(?=[.])/, 'type'],\n\n\t\t\t// identifiers, tagwords, and keywords\n\t\t\t[\n\t\t\t\t/@identifier/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@keywords': { token: 'keyword.$0' },\n\t\t\t\t\t\t'@operators': 'operator',\n\t\t\t\t\t\t'@default': 'variable.name'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t// methods, properties, and events\n\t\t\t[\n\t\t\t\t/([.])(@identifier)/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t$2: ['delimiter', 'type.member'],\n\t\t\t\t\t\t'@default': ''\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t// numbers\n\t\t\t[/\\d*\\.\\d+/, 'number.float'],\n\t\t\t[/\\d+/, 'number'],\n\n\t\t\t// delimiters and operators\n\t\t\t[/[()\\[\\]]/, '@brackets'],\n\t\t\t[\n\t\t\t\t/@symbols/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@operators': 'operator',\n\t\t\t\t\t\t'@default': 'delimiter'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t// strings\n\t\t\t[/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'], // non-teminated string\n\t\t\t[/\"/, 'string', '@string']\n\t\t],\n\n\t\twhitespace: [\n\t\t\t[/[ \\t\\r\\n]+/, ''],\n\t\t\t[/(\\').*$/, 'comment']\n\t\t],\n\n\t\tstring: [\n\t\t\t[/[^\\\\\"]+/, 'string'],\n\t\t\t[/@escapes/, 'string.escape'],\n\t\t\t[/\\\\./, 'string.escape.invalid'],\n\t\t\t[/\"C?/, 'string', '@pop']\n\t\t]\n\t}\n}",
  "scala": "<languages.IMonarchLanguage>{\n\ttokenPostfix: '.scala',\n\n\t// We can't easily add everything from Dotty, but we can at least add some of its keywords\n\tkeywords: [\n\t\t'asInstanceOf',\n\t\t'catch',\n\t\t'class',\n\t\t'classOf',\n\t\t'def',\n\t\t'do',\n\t\t'else',\n\t\t'extends',\n\t\t'finally',\n\t\t'for',\n\t\t'foreach',\n\t\t'forSome',\n\t\t'if',\n\t\t'import',\n\t\t'isInstanceOf',\n\t\t'macro',\n\t\t'match',\n\t\t'new',\n\t\t'object',\n\t\t'package',\n\t\t'return',\n\t\t'throw',\n\t\t'trait',\n\t\t'try',\n\t\t'type',\n\t\t'until',\n\t\t'val',\n\t\t'var',\n\t\t'while',\n\t\t'with',\n\t\t'yield',\n\n\t\t// Dotty-specific:\n\t\t'given',\n\t\t'enum',\n\t\t'then'\n\t],\n\n\t// Dotty-specific:\n\tsoftKeywords: ['as', 'export', 'extension', 'end', 'derives', 'on'],\n\n\tconstants: ['true', 'false', 'null', 'this', 'super'],\n\n\tmodifiers: [\n\t\t'abstract',\n\t\t'final',\n\t\t'implicit',\n\t\t'lazy',\n\t\t'override',\n\t\t'private',\n\t\t'protected',\n\t\t'sealed'\n\t],\n\n\t// Dotty-specific:\n\tsoftModifiers: ['inline', 'opaque', 'open', 'transparent', 'using'],\n\n\tname: /(?:[a-z_$][\\w$]*|`[^`]+`)/,\n\ttype: /(?:[A-Z][\\w$]*)/,\n\n\t// we include these common regular expressions\n\tsymbols: /[=><!~?:&|+\\-*\\/^\\\\%@#]+/,\n\tdigits: /\\d+(_+\\d+)*/,\n\thexdigits: /[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,\n\n\t// C# style strings\n\tescapes: /\\\\(?:[btnfr\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n\n\tfstring_conv: /[bBhHsScCdoxXeEfgGaAt]|[Tn](?:[HIklMSLNpzZsQ]|[BbhAaCYyjmde]|[RTrDFC])/,\n\n\t// The main tokenizer for our languages\n\ttokenizer: {\n\t\troot: [\n\t\t\t// strings\n\t\t\t[/\\braw\"\"\"/, { token: 'string.quote', bracket: '@open', next: '@rawstringt' }],\n\t\t\t[/\\braw\"/, { token: 'string.quote', bracket: '@open', next: '@rawstring' }],\n\n\t\t\t[/\\bs\"\"\"/, { token: 'string.quote', bracket: '@open', next: '@sstringt' }],\n\t\t\t[/\\bs\"/, { token: 'string.quote', bracket: '@open', next: '@sstring' }],\n\n\t\t\t[/\\bf\"\"\"\"/, { token: 'string.quote', bracket: '@open', next: '@fstringt' }],\n\t\t\t[/\\bf\"/, { token: 'string.quote', bracket: '@open', next: '@fstring' }],\n\n\t\t\t[/\"\"\"/, { token: 'string.quote', bracket: '@open', next: '@stringt' }],\n\t\t\t[/\"/, { token: 'string.quote', bracket: '@open', next: '@string' }],\n\n\t\t\t// numbers\n\t\t\t[/(@digits)[eE]([\\-+]?(@digits))?[fFdD]?/, 'number.float', '@allowMethod'],\n\t\t\t[/(@digits)\\.(@digits)([eE][\\-+]?(@digits))?[fFdD]?/, 'number.float', '@allowMethod'],\n\t\t\t[/0[xX](@hexdigits)[Ll]?/, 'number.hex', '@allowMethod'],\n\t\t\t[/(@digits)[fFdD]/, 'number.float', '@allowMethod'],\n\t\t\t[/(@digits)[lL]?/, 'number', '@allowMethod'],\n\n\t\t\t[/\\b_\\*/, 'key'],\n\t\t\t[/\\b(_)\\b/, 'keyword', '@allowMethod'],\n\n\t\t\t// identifiers and keywords\n\t\t\t[/\\bimport\\b/, 'keyword', '@import'],\n\t\t\t[/\\b(case)([ \\t]+)(class)\\b/, ['keyword.modifier', 'white', 'keyword']],\n\t\t\t[/\\bcase\\b/, 'keyword', '@case'],\n\t\t\t[/\\bva[lr]\\b/, 'keyword', '@vardef'],\n\t\t\t[\n\t\t\t\t/\\b(def)([ \\t]+)((?:unary_)?@symbols|@name(?:_=)|@name)/,\n\t\t\t\t['keyword', 'white', 'identifier']\n\t\t\t],\n\t\t\t[/@name(?=[ \\t]*:(?!:))/, 'variable'],\n\t\t\t[/(\\.)(@name|@symbols)/, ['operator', { token: '@rematch', next: '@allowMethod' }]],\n\t\t\t[/([{(])(\\s*)(@name(?=\\s*=>))/, ['@brackets', 'white', 'variable']],\n\t\t\t[\n\t\t\t\t/@name/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@keywords': 'keyword',\n\t\t\t\t\t\t'@softKeywords': 'keyword',\n\t\t\t\t\t\t'@modifiers': 'keyword.modifier',\n\t\t\t\t\t\t'@softModifiers': 'keyword.modifier',\n\t\t\t\t\t\t'@constants': {\n\t\t\t\t\t\t\ttoken: 'constant',\n\t\t\t\t\t\t\tnext: '@allowMethod'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'@default': {\n\t\t\t\t\t\t\ttoken: 'identifier',\n\t\t\t\t\t\t\tnext: '@allowMethod'\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/@type/, 'type', '@allowMethod'],\n\n\t\t\t// whitespace\n\t\t\t{ include: '@whitespace' },\n\n\t\t\t// @ annotations.\n\t\t\t[/@[a-zA-Z_$][\\w$]*(?:\\.[a-zA-Z_$][\\w$]*)*/, 'annotation'],\n\n\t\t\t// delimiters and operators\n\t\t\t[/[{(]/, '@brackets'],\n\t\t\t[/[})]/, '@brackets', '@allowMethod'],\n\t\t\t[/\\[/, 'operator.square'],\n\t\t\t[/](?!\\s*(?:va[rl]|def|type)\\b)/, 'operator.square', '@allowMethod'],\n\t\t\t[/]/, 'operator.square'],\n\t\t\t[/([=-]>|<-|>:|<:|:>|<%)(?=[\\s\\w()[\\]{},\\.\"'`])/, 'keyword'],\n\t\t\t[/@symbols/, 'operator'],\n\n\t\t\t// delimiter: after number because of .\\d floats\n\t\t\t[/[;,\\.]/, 'delimiter'],\n\n\t\t\t// symbols\n\t\t\t[/'[a-zA-Z$][\\w$]*(?!')/, 'attribute.name'],\n\n\t\t\t// characters\n\t\t\t[/'[^\\\\']'/, 'string', '@allowMethod'],\n\t\t\t[/(')(@escapes)(')/, ['string', 'string.escape', { token: 'string', next: '@allowMethod' }]],\n\t\t\t[/'/, 'string.invalid']\n\t\t],\n\n\t\timport: [\n\t\t\t[/;/, 'delimiter', '@pop'],\n\t\t\t[/^|$/, '', '@pop'],\n\t\t\t[/[ \\t]+/, 'white'],\n\t\t\t[/[\\n\\r]+/, 'white', '@pop'],\n\t\t\t[/\\/\\*/, 'comment', '@comment'],\n\t\t\t[/@name|@type/, 'type'],\n\t\t\t[/[(){}]/, '@brackets'],\n\t\t\t[/[[\\]]/, 'operator.square'],\n\t\t\t[/[\\.,]/, 'delimiter']\n\t\t],\n\n\t\tallowMethod: [\n\t\t\t[/^|$/, '', '@pop'],\n\t\t\t[/[ \\t]+/, 'white'],\n\t\t\t[/[\\n\\r]+/, 'white', '@pop'],\n\t\t\t[/\\/\\*/, 'comment', '@comment'],\n\t\t\t[/(?==>[\\s\\w([{])/, 'keyword', '@pop'],\n\t\t\t[\n\t\t\t\t/(@name|@symbols)(?=[ \\t]*[[({\"'`]|[ \\t]+(?:[+-]?\\.?\\d|\\w))/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@keywords': { token: 'keyword', next: '@pop' },\n\t\t\t\t\t\t'->|<-|>:|<:|<%': { token: 'keyword', next: '@pop' },\n\t\t\t\t\t\t'@default': { token: '@rematch', next: '@pop' }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t['', '', '@pop']\n\t\t],\n\n\t\tcomment: [\n\t\t\t[/[^\\/*]+/, 'comment'],\n\t\t\t[/\\/\\*/, 'comment', '@push'], // nested comment\n\t\t\t[/\\*\\//, 'comment', '@pop'],\n\t\t\t[/[\\/*]/, 'comment']\n\t\t],\n\n\t\tcase: [\n\t\t\t[/\\b_\\*/, 'key'],\n\t\t\t[/\\b(_|true|false|null|this|super)\\b/, 'keyword', '@allowMethod'],\n\t\t\t[/\\bif\\b|=>/, 'keyword', '@pop'],\n\t\t\t[/`[^`]+`/, 'identifier', '@allowMethod'],\n\t\t\t[/@name/, 'variable', '@allowMethod'],\n\t\t\t[/:::?|\\||@(?![a-z_$])/, 'keyword'],\n\t\t\t{ include: '@root' }\n\t\t],\n\n\t\tvardef: [\n\t\t\t[/\\b_\\*/, 'key'],\n\t\t\t[/\\b(_|true|false|null|this|super)\\b/, 'keyword'],\n\t\t\t[/@name/, 'variable'],\n\t\t\t[/:::?|\\||@(?![a-z_$])/, 'keyword'],\n\t\t\t[/=|:(?!:)/, 'operator', '@pop'],\n\t\t\t[/$/, 'white', '@pop'],\n\t\t\t{ include: '@root' }\n\t\t],\n\n\t\tstring: [\n\t\t\t[/[^\\\\\"\\n\\r]+/, 'string'],\n\t\t\t[/@escapes/, 'string.escape'],\n\t\t\t[/\\\\./, 'string.escape.invalid'],\n\t\t\t[\n\t\t\t\t/\"/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'string.quote',\n\t\t\t\t\tbracket: '@close',\n\t\t\t\t\tswitchTo: '@allowMethod'\n\t\t\t\t}\n\t\t\t]\n\t\t],\n\n\t\tstringt: [\n\t\t\t[/[^\\\\\"\\n\\r]+/, 'string'],\n\t\t\t[/@escapes/, 'string.escape'],\n\t\t\t[/\\\\./, 'string.escape.invalid'],\n\t\t\t[/\"(?=\"\"\")/, 'string'],\n\t\t\t[\n\t\t\t\t/\"\"\"/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'string.quote',\n\t\t\t\t\tbracket: '@close',\n\t\t\t\t\tswitchTo: '@allowMethod'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/\"/, 'string']\n\t\t],\n\n\t\tfstring: [\n\t\t\t[/@escapes/, 'string.escape'],\n\t\t\t[\n\t\t\t\t/\"/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'string.quote',\n\t\t\t\t\tbracket: '@close',\n\t\t\t\t\tswitchTo: '@allowMethod'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/\\$\\$/, 'string'],\n\t\t\t[/(\\$)([a-z_]\\w*)/, ['operator', 'identifier']],\n\t\t\t[/\\$\\{/, 'operator', '@interp'],\n\t\t\t[/%%/, 'string'],\n\t\t\t[\n\t\t\t\t/(%)([\\-#+ 0,(])(\\d+|\\.\\d+|\\d+\\.\\d+)(@fstring_conv)/,\n\t\t\t\t['metatag', 'keyword.modifier', 'number', 'metatag']\n\t\t\t],\n\t\t\t[/(%)(\\d+|\\.\\d+|\\d+\\.\\d+)(@fstring_conv)/, ['metatag', 'number', 'metatag']],\n\t\t\t[/(%)([\\-#+ 0,(])(@fstring_conv)/, ['metatag', 'keyword.modifier', 'metatag']],\n\t\t\t[/(%)(@fstring_conv)/, ['metatag', 'metatag']],\n\t\t\t[/./, 'string']\n\t\t],\n\n\t\tfstringt: [\n\t\t\t[/@escapes/, 'string.escape'],\n\t\t\t[/\"(?=\"\"\")/, 'string'],\n\t\t\t[\n\t\t\t\t/\"\"\"/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'string.quote',\n\t\t\t\t\tbracket: '@close',\n\t\t\t\t\tswitchTo: '@allowMethod'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/\\$\\$/, 'string'],\n\t\t\t[/(\\$)([a-z_]\\w*)/, ['operator', 'identifier']],\n\t\t\t[/\\$\\{/, 'operator', '@interp'],\n\t\t\t[/%%/, 'string'],\n\t\t\t[\n\t\t\t\t/(%)([\\-#+ 0,(])(\\d+|\\.\\d+|\\d+\\.\\d+)(@fstring_conv)/,\n\t\t\t\t['metatag', 'keyword.modifier', 'number', 'metatag']\n\t\t\t],\n\t\t\t[/(%)(\\d+|\\.\\d+|\\d+\\.\\d+)(@fstring_conv)/, ['metatag', 'number', 'metatag']],\n\t\t\t[/(%)([\\-#+ 0,(])(@fstring_conv)/, ['metatag', 'keyword.modifier', 'metatag']],\n\t\t\t[/(%)(@fstring_conv)/, ['metatag', 'metatag']],\n\t\t\t[/./, 'string']\n\t\t],\n\n\t\tsstring: [\n\t\t\t[/@escapes/, 'string.escape'],\n\t\t\t[\n\t\t\t\t/\"/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'string.quote',\n\t\t\t\t\tbracket: '@close',\n\t\t\t\t\tswitchTo: '@allowMethod'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/\\$\\$/, 'string'],\n\t\t\t[/(\\$)([a-z_]\\w*)/, ['operator', 'identifier']],\n\t\t\t[/\\$\\{/, 'operator', '@interp'],\n\t\t\t[/./, 'string']\n\t\t],\n\n\t\tsstringt: [\n\t\t\t[/@escapes/, 'string.escape'],\n\t\t\t[/\"(?=\"\"\")/, 'string'],\n\t\t\t[\n\t\t\t\t/\"\"\"/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'string.quote',\n\t\t\t\t\tbracket: '@close',\n\t\t\t\t\tswitchTo: '@allowMethod'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/\\$\\$/, 'string'],\n\t\t\t[/(\\$)([a-z_]\\w*)/, ['operator', 'identifier']],\n\t\t\t[/\\$\\{/, 'operator', '@interp'],\n\t\t\t[/./, 'string']\n\t\t],\n\n\t\tinterp: [[/{/, 'operator', '@push'], [/}/, 'operator', '@pop'], { include: '@root' }],\n\n\t\trawstring: [\n\t\t\t[/[^\"]/, 'string'],\n\t\t\t[\n\t\t\t\t/\"/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'string.quote',\n\t\t\t\t\tbracket: '@close',\n\t\t\t\t\tswitchTo: '@allowMethod'\n\t\t\t\t}\n\t\t\t]\n\t\t],\n\n\t\trawstringt: [\n\t\t\t[/[^\"]/, 'string'],\n\t\t\t[/\"(?=\"\"\")/, 'string'],\n\t\t\t[\n\t\t\t\t/\"\"\"/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'string.quote',\n\t\t\t\t\tbracket: '@close',\n\t\t\t\t\tswitchTo: '@allowMethod'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/\"/, 'string']\n\t\t],\n\n\t\twhitespace: [\n\t\t\t[/[ \\t\\r\\n]+/, 'white'],\n\t\t\t[/\\/\\*/, 'comment', '@comment'],\n\t\t\t[/\\/\\/.*$/, 'comment']\n\t\t]\n\t}\n}",
  "scheme": "<languages.IMonarchLanguage>{\n\tdefaultToken: '',\n\tignoreCase: true,\n\ttokenPostfix: '.scheme',\n\n\tbrackets: [\n\t\t{ open: '(', close: ')', token: 'delimiter.parenthesis' },\n\t\t{ open: '{', close: '}', token: 'delimiter.curly' },\n\t\t{ open: '[', close: ']', token: 'delimiter.square' }\n\t],\n\n\tkeywords: [\n\t\t'case',\n\t\t'do',\n\t\t'let',\n\t\t'loop',\n\t\t'if',\n\t\t'else',\n\t\t'when',\n\t\t'cons',\n\t\t'car',\n\t\t'cdr',\n\t\t'cond',\n\t\t'lambda',\n\t\t'lambda*',\n\t\t'syntax-rules',\n\t\t'format',\n\t\t'set!',\n\t\t'quote',\n\t\t'eval',\n\t\t'append',\n\t\t'list',\n\t\t'list?',\n\t\t'member?',\n\t\t'load'\n\t],\n\n\tconstants: ['#t', '#f'],\n\n\toperators: ['eq?', 'eqv?', 'equal?', 'and', 'or', 'not', 'null?'],\n\n\ttokenizer: {\n\t\troot: [\n\t\t\t[/#[xXoObB][0-9a-fA-F]+/, 'number.hex'],\n\t\t\t[/[+-]?\\d+(?:(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)?/, 'number.float'],\n\n\t\t\t[\n\t\t\t\t/(?:\\b(?:(define|define-syntax|define-macro))\\b)(\\s+)((?:\\w|\\-|\\!|\\?)*)/,\n\t\t\t\t['keyword', 'white', 'variable']\n\t\t\t],\n\n\t\t\t{ include: '@whitespace' },\n\t\t\t{ include: '@strings' },\n\n\t\t\t[\n\t\t\t\t/[a-zA-Z_#][a-zA-Z0-9_\\-\\?\\!\\*]*/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@keywords': 'keyword',\n\t\t\t\t\t\t'@constants': 'constant',\n\t\t\t\t\t\t'@operators': 'operators',\n\t\t\t\t\t\t'@default': 'identifier'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t],\n\n\t\tcomment: [\n\t\t\t[/[^\\|#]+/, 'comment'],\n\t\t\t[/#\\|/, 'comment', '@push'],\n\t\t\t[/\\|#/, 'comment', '@pop'],\n\t\t\t[/[\\|#]/, 'comment']\n\t\t],\n\n\t\twhitespace: [\n\t\t\t[/[ \\t\\r\\n]+/, 'white'],\n\t\t\t[/#\\|/, 'comment', '@comment'],\n\t\t\t[/;.*$/, 'comment']\n\t\t],\n\n\t\tstrings: [\n\t\t\t[/\"$/, 'string', '@popall'],\n\t\t\t[/\"(?=.)/, 'string', '@multiLineString']\n\t\t],\n\n\t\tmultiLineString: [\n\t\t\t[/[^\\\\\"]+$/, 'string', '@popall'],\n\t\t\t[/[^\\\\\"]+/, 'string'],\n\t\t\t[/\\\\./, 'string.escape'],\n\t\t\t[/\"/, 'string', '@popall'],\n\t\t\t[/\\\\$/, 'string']\n\t\t]\n\t}\n}",
  "scss": "<languages.IMonarchLanguage>{\n\tdefaultToken: '',\n\ttokenPostfix: '.scss',\n\n\tws: '[ \\t\\n\\r\\f]*', // whitespaces (referenced in several rules)\n\tidentifier:\n\t\t'-?-?([a-zA-Z]|(\\\\\\\\(([0-9a-fA-F]{1,6}\\\\s?)|[^[0-9a-fA-F])))([\\\\w\\\\-]|(\\\\\\\\(([0-9a-fA-F]{1,6}\\\\s?)|[^[0-9a-fA-F])))*',\n\n\tbrackets: [\n\t\t{ open: '{', close: '}', token: 'delimiter.curly' },\n\t\t{ open: '[', close: ']', token: 'delimiter.bracket' },\n\t\t{ open: '(', close: ')', token: 'delimiter.parenthesis' },\n\t\t{ open: '<', close: '>', token: 'delimiter.angle' }\n\t],\n\n\ttokenizer: {\n\t\troot: [{ include: '@selector' }],\n\n\t\tselector: [\n\t\t\t{ include: '@comments' },\n\t\t\t{ include: '@import' },\n\t\t\t{ include: '@variabledeclaration' },\n\t\t\t{ include: '@warndebug' }, // sass: log statements\n\t\t\t['[@](include)', { token: 'keyword', next: '@includedeclaration' }], // sass: include statement\n\t\t\t[\n\t\t\t\t'[@](keyframes|-webkit-keyframes|-moz-keyframes|-o-keyframes)',\n\t\t\t\t{ token: 'keyword', next: '@keyframedeclaration' }\n\t\t\t],\n\t\t\t['[@](page|content|font-face|-moz-document)', { token: 'keyword' }], // sass: placeholder for includes\n\t\t\t['[@](charset|namespace)', { token: 'keyword', next: '@declarationbody' }],\n\t\t\t['[@](function)', { token: 'keyword', next: '@functiondeclaration' }],\n\t\t\t['[@](mixin)', { token: 'keyword', next: '@mixindeclaration' }],\n\t\t\t['url(\\\\-prefix)?\\\\(', { token: 'meta', next: '@urldeclaration' }],\n\t\t\t{ include: '@controlstatement' }, // sass control statements\n\t\t\t{ include: '@selectorname' },\n\t\t\t['[&\\\\*]', 'tag'], // selector symbols\n\t\t\t['[>\\\\+,]', 'delimiter'], // selector operators\n\t\t\t['\\\\[', { token: 'delimiter.bracket', next: '@selectorattribute' }],\n\t\t\t['{', { token: 'delimiter.curly', next: '@selectorbody' }]\n\t\t],\n\n\t\tselectorbody: [\n\t\t\t['[*_]?@identifier@ws:(?=(\\\\s|\\\\d|[^{;}]*[;}]))', 'attribute.name', '@rulevalue'], // rule definition: to distinguish from a nested selector check for whitespace, number or a semicolon\n\t\t\t{ include: '@selector' }, // sass: nested selectors\n\t\t\t['[@](extend)', { token: 'keyword', next: '@extendbody' }], // sass: extend other selectors\n\t\t\t['[@](return)', { token: 'keyword', next: '@declarationbody' }],\n\t\t\t['}', { token: 'delimiter.curly', next: '@pop' }]\n\t\t],\n\n\t\tselectorname: [\n\t\t\t['#{', { token: 'meta', next: '@variableinterpolation' }], // sass: interpolation\n\t\t\t['(\\\\.|#(?=[^{])|%|(@identifier)|:)+', 'tag'] // selector (.foo, div, ...)\n\t\t],\n\n\t\tselectorattribute: [{ include: '@term' }, [']', { token: 'delimiter.bracket', next: '@pop' }]],\n\n\t\tterm: [\n\t\t\t{ include: '@comments' },\n\t\t\t['url(\\\\-prefix)?\\\\(', { token: 'meta', next: '@urldeclaration' }],\n\t\t\t{ include: '@functioninvocation' },\n\t\t\t{ include: '@numbers' },\n\t\t\t{ include: '@strings' },\n\t\t\t{ include: '@variablereference' },\n\t\t\t['(and\\\\b|or\\\\b|not\\\\b)', 'operator'],\n\t\t\t{ include: '@name' },\n\t\t\t['([<>=\\\\+\\\\-\\\\*\\\\/\\\\^\\\\|\\\\~,])', 'operator'],\n\t\t\t[',', 'delimiter'],\n\t\t\t['!default', 'literal'],\n\t\t\t['\\\\(', { token: 'delimiter.parenthesis', next: '@parenthizedterm' }]\n\t\t],\n\n\t\trulevalue: [\n\t\t\t{ include: '@term' },\n\t\t\t['!important', 'literal'],\n\t\t\t[';', 'delimiter', '@pop'],\n\t\t\t['{', { token: 'delimiter.curly', switchTo: '@nestedproperty' }], // sass: nested properties\n\t\t\t['(?=})', { token: '', next: '@pop' }] // missing semicolon\n\t\t],\n\n\t\tnestedproperty: [\n\t\t\t['[*_]?@identifier@ws:', 'attribute.name', '@rulevalue'],\n\t\t\t{ include: '@comments' },\n\t\t\t['}', { token: 'delimiter.curly', next: '@pop' }]\n\t\t],\n\n\t\twarndebug: [['[@](warn|debug)', { token: 'keyword', next: '@declarationbody' }]],\n\n\t\timport: [['[@](import)', { token: 'keyword', next: '@declarationbody' }]],\n\n\t\tvariabledeclaration: [\n\t\t\t// sass variables\n\t\t\t['\\\\$@identifier@ws:', 'variable.decl', '@declarationbody']\n\t\t],\n\n\t\turldeclaration: [\n\t\t\t{ include: '@strings' },\n\t\t\t['[^)\\r\\n]+', 'string'],\n\t\t\t['\\\\)', { token: 'meta', next: '@pop' }]\n\t\t],\n\n\t\tparenthizedterm: [\n\t\t\t{ include: '@term' },\n\t\t\t['\\\\)', { token: 'delimiter.parenthesis', next: '@pop' }]\n\t\t],\n\n\t\tdeclarationbody: [\n\t\t\t{ include: '@term' },\n\t\t\t[';', 'delimiter', '@pop'],\n\t\t\t['(?=})', { token: '', next: '@pop' }] // missing semicolon\n\t\t],\n\n\t\textendbody: [\n\t\t\t{ include: '@selectorname' },\n\t\t\t['!optional', 'literal'],\n\t\t\t[';', 'delimiter', '@pop'],\n\t\t\t['(?=})', { token: '', next: '@pop' }] // missing semicolon\n\t\t],\n\n\t\tvariablereference: [\n\t\t\t// sass variable reference\n\t\t\t['\\\\$@identifier', 'variable.ref'],\n\t\t\t['\\\\.\\\\.\\\\.', 'operator'], // var args in reference\n\t\t\t['#{', { token: 'meta', next: '@variableinterpolation' }] // sass var resolve\n\t\t],\n\n\t\tvariableinterpolation: [\n\t\t\t{ include: '@variablereference' },\n\t\t\t['}', { token: 'meta', next: '@pop' }]\n\t\t],\n\n\t\tcomments: [\n\t\t\t['\\\\/\\\\*', 'comment', '@comment'],\n\t\t\t['\\\\/\\\\/+.*', 'comment']\n\t\t],\n\n\t\tcomment: [\n\t\t\t['\\\\*\\\\/', 'comment', '@pop'],\n\t\t\t['.', 'comment']\n\t\t],\n\n\t\tname: [['@identifier', 'attribute.value']],\n\n\t\tnumbers: [\n\t\t\t['(\\\\d*\\\\.)?\\\\d+([eE][\\\\-+]?\\\\d+)?', { token: 'number', next: '@units' }],\n\t\t\t['#[0-9a-fA-F_]+(?!\\\\w)', 'number.hex']\n\t\t],\n\n\t\tunits: [\n\t\t\t[\n\t\t\t\t'(em|ex|ch|rem|fr|vmin|vmax|vw|vh|vm|cm|mm|in|px|pt|pc|deg|grad|rad|turn|s|ms|Hz|kHz|%)?',\n\t\t\t\t'number',\n\t\t\t\t'@pop'\n\t\t\t]\n\t\t],\n\n\t\tfunctiondeclaration: [\n\t\t\t['@identifier@ws\\\\(', { token: 'meta', next: '@parameterdeclaration' }],\n\t\t\t['{', { token: 'delimiter.curly', switchTo: '@functionbody' }]\n\t\t],\n\n\t\tmixindeclaration: [\n\t\t\t// mixin with parameters\n\t\t\t['@identifier@ws\\\\(', { token: 'meta', next: '@parameterdeclaration' }],\n\t\t\t// mixin without parameters\n\t\t\t['@identifier', 'meta'],\n\t\t\t['{', { token: 'delimiter.curly', switchTo: '@selectorbody' }]\n\t\t],\n\n\t\tparameterdeclaration: [\n\t\t\t['\\\\$@identifier@ws:', 'variable.decl'],\n\t\t\t['\\\\.\\\\.\\\\.', 'operator'], // var args in declaration\n\t\t\t[',', 'delimiter'],\n\t\t\t{ include: '@term' },\n\t\t\t['\\\\)', { token: 'meta', next: '@pop' }]\n\t\t],\n\n\t\tincludedeclaration: [\n\t\t\t{ include: '@functioninvocation' },\n\t\t\t['@identifier', 'meta'],\n\t\t\t[';', 'delimiter', '@pop'],\n\t\t\t['(?=})', { token: '', next: '@pop' }], // missing semicolon\n\t\t\t['{', { token: 'delimiter.curly', switchTo: '@selectorbody' }]\n\t\t],\n\n\t\tkeyframedeclaration: [\n\t\t\t['@identifier', 'meta'],\n\t\t\t['{', { token: 'delimiter.curly', switchTo: '@keyframebody' }]\n\t\t],\n\n\t\tkeyframebody: [\n\t\t\t{ include: '@term' },\n\t\t\t['{', { token: 'delimiter.curly', next: '@selectorbody' }],\n\t\t\t['}', { token: 'delimiter.curly', next: '@pop' }]\n\t\t],\n\n\t\tcontrolstatement: [\n\t\t\t[\n\t\t\t\t'[@](if|else|for|while|each|media)',\n\t\t\t\t{ token: 'keyword.flow', next: '@controlstatementdeclaration' }\n\t\t\t]\n\t\t],\n\n\t\tcontrolstatementdeclaration: [\n\t\t\t['(in|from|through|if|to)\\\\b', { token: 'keyword.flow' }],\n\t\t\t{ include: '@term' },\n\t\t\t['{', { token: 'delimiter.curly', switchTo: '@selectorbody' }]\n\t\t],\n\n\t\tfunctionbody: [\n\t\t\t['[@](return)', { token: 'keyword' }],\n\t\t\t{ include: '@variabledeclaration' },\n\t\t\t{ include: '@term' },\n\t\t\t{ include: '@controlstatement' },\n\t\t\t[';', 'delimiter'],\n\t\t\t['}', { token: 'delimiter.curly', next: '@pop' }]\n\t\t],\n\n\t\tfunctioninvocation: [['@identifier\\\\(', { token: 'meta', next: '@functionarguments' }]],\n\n\t\tfunctionarguments: [\n\t\t\t['\\\\$@identifier@ws:', 'attribute.name'],\n\t\t\t['[,]', 'delimiter'],\n\t\t\t{ include: '@term' },\n\t\t\t['\\\\)', { token: 'meta', next: '@pop' }]\n\t\t],\n\n\t\tstrings: [\n\t\t\t['~?\"', { token: 'string.delimiter', next: '@stringenddoublequote' }],\n\t\t\t[\"~?'\", { token: 'string.delimiter', next: '@stringendquote' }]\n\t\t],\n\n\t\tstringenddoublequote: [\n\t\t\t['\\\\\\\\.', 'string'],\n\t\t\t['\"', { token: 'string.delimiter', next: '@pop' }],\n\t\t\t['.', 'string']\n\t\t],\n\n\t\tstringendquote: [\n\t\t\t['\\\\\\\\.', 'string'],\n\t\t\t[\"'\", { token: 'string.delimiter', next: '@pop' }],\n\t\t\t['.', 'string']\n\t\t]\n\t}\n}",
  "shell": "<languages.IMonarchLanguage>{\n\tdefaultToken: '',\n\tignoreCase: true,\n\ttokenPostfix: '.shell',\n\n\tbrackets: [\n\t\t{ token: 'delimiter.bracket', open: '{', close: '}' },\n\t\t{ token: 'delimiter.parenthesis', open: '(', close: ')' },\n\t\t{ token: 'delimiter.square', open: '[', close: ']' }\n\t],\n\n\tkeywords: [\n\t\t'if',\n\t\t'then',\n\t\t'do',\n\t\t'else',\n\t\t'elif',\n\t\t'while',\n\t\t'until',\n\t\t'for',\n\t\t'in',\n\t\t'esac',\n\t\t'fi',\n\t\t'fin',\n\t\t'fil',\n\t\t'done',\n\t\t'exit',\n\t\t'set',\n\t\t'unset',\n\t\t'export',\n\t\t'function'\n\t],\n\n\tbuiltins: [\n\t\t'ab',\n\t\t'awk',\n\t\t'bash',\n\t\t'beep',\n\t\t'cat',\n\t\t'cc',\n\t\t'cd',\n\t\t'chown',\n\t\t'chmod',\n\t\t'chroot',\n\t\t'clear',\n\t\t'cp',\n\t\t'curl',\n\t\t'cut',\n\t\t'diff',\n\t\t'echo',\n\t\t'find',\n\t\t'gawk',\n\t\t'gcc',\n\t\t'get',\n\t\t'git',\n\t\t'grep',\n\t\t'hg',\n\t\t'kill',\n\t\t'killall',\n\t\t'ln',\n\t\t'ls',\n\t\t'make',\n\t\t'mkdir',\n\t\t'openssl',\n\t\t'mv',\n\t\t'nc',\n\t\t'node',\n\t\t'npm',\n\t\t'ping',\n\t\t'ps',\n\t\t'restart',\n\t\t'rm',\n\t\t'rmdir',\n\t\t'sed',\n\t\t'service',\n\t\t'sh',\n\t\t'shopt',\n\t\t'shred',\n\t\t'source',\n\t\t'sort',\n\t\t'sleep',\n\t\t'ssh',\n\t\t'start',\n\t\t'stop',\n\t\t'su',\n\t\t'sudo',\n\t\t'svn',\n\t\t'tee',\n\t\t'telnet',\n\t\t'top',\n\t\t'touch',\n\t\t'vi',\n\t\t'vim',\n\t\t'wall',\n\t\t'wc',\n\t\t'wget',\n\t\t'who',\n\t\t'write',\n\t\t'yes',\n\t\t'zsh'\n\t],\n\n\tstartingWithDash: /\\-+\\w+/,\n\n\tidentifiersWithDashes: /[a-zA-Z]\\w+(?:@startingWithDash)+/,\n\n\t// we include these common regular expressions\n\tsymbols: /[=><!~?&|+\\-*\\/\\^;\\.,]+/,\n\n\t// The main tokenizer for our languages\n\ttokenizer: {\n\t\troot: [\n\t\t\t[/@identifiersWithDashes/, ''],\n\n\t\t\t[/(\\s)((?:@startingWithDash)+)/, ['white', 'attribute.name']],\n\n\t\t\t[\n\t\t\t\t/[a-zA-Z]\\w*/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@keywords': 'keyword',\n\t\t\t\t\t\t'@builtins': 'type.identifier',\n\t\t\t\t\t\t'@default': ''\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t{ include: '@whitespace' },\n\n\t\t\t{ include: '@strings' },\n\t\t\t{ include: '@parameters' },\n\t\t\t{ include: '@heredoc' },\n\n\t\t\t[/[{}\\[\\]()]/, '@brackets'],\n\n\t\t\t[/@symbols/, 'delimiter'],\n\n\t\t\t{ include: '@numbers' },\n\n\t\t\t[/[,;]/, 'delimiter']\n\t\t],\n\n\t\twhitespace: [\n\t\t\t[/\\s+/, 'white'],\n\t\t\t[/(^#!.*$)/, 'metatag'],\n\t\t\t[/(^#.*$)/, 'comment']\n\t\t],\n\n\t\tnumbers: [\n\t\t\t[/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\n\t\t\t[/0[xX][0-9a-fA-F_]*[0-9a-fA-F]/, 'number.hex'],\n\t\t\t[/\\d+/, 'number']\n\t\t],\n\n\t\t// Recognize strings, including those broken across lines\n\t\tstrings: [\n\t\t\t[/'/, 'string', '@stringBody'],\n\t\t\t[/\"/, 'string', '@dblStringBody']\n\t\t],\n\t\tstringBody: [\n\t\t\t[/'/, 'string', '@popall'],\n\t\t\t[/./, 'string']\n\t\t],\n\t\tdblStringBody: [\n\t\t\t[/\"/, 'string', '@popall'],\n\t\t\t[/./, 'string']\n\t\t],\n\n\t\theredoc: [\n\t\t\t[\n\t\t\t\t/(<<[-<]?)(\\s*)(['\"`]?)([\\w\\-]+)(['\"`]?)/,\n\t\t\t\t[\n\t\t\t\t\t'constants',\n\t\t\t\t\t'white',\n\t\t\t\t\t'string.heredoc.delimiter',\n\t\t\t\t\t'string.heredoc',\n\t\t\t\t\t'string.heredoc.delimiter'\n\t\t\t\t]\n\t\t\t]\n\t\t],\n\n\t\tparameters: [\n\t\t\t[/\\$\\d+/, 'variable.predefined'],\n\t\t\t[/\\$\\w+/, 'variable'],\n\t\t\t[/\\$[*@#?\\-$!0_]/, 'variable'],\n\t\t\t[/\\$'/, 'variable', '@parameterBodyQuote'],\n\t\t\t[/\\$\"/, 'variable', '@parameterBodyDoubleQuote'],\n\t\t\t[/\\$\\(/, 'variable', '@parameterBodyParen'],\n\t\t\t[/\\$\\{/, 'variable', '@parameterBodyCurlyBrace']\n\t\t],\n\t\tparameterBodyQuote: [\n\t\t\t[/[^#:%*@\\-!_']+/, 'variable'],\n\t\t\t[/[#:%*@\\-!_]/, 'delimiter'],\n\t\t\t[/[']/, 'variable', '@pop']\n\t\t],\n\t\tparameterBodyDoubleQuote: [\n\t\t\t[/[^#:%*@\\-!_\"]+/, 'variable'],\n\t\t\t[/[#:%*@\\-!_]/, 'delimiter'],\n\t\t\t[/[\"]/, 'variable', '@pop']\n\t\t],\n\t\tparameterBodyParen: [\n\t\t\t[/[^#:%*@\\-!_)]+/, 'variable'],\n\t\t\t[/[#:%*@\\-!_]/, 'delimiter'],\n\t\t\t[/[)]/, 'variable', '@pop']\n\t\t],\n\t\tparameterBodyCurlyBrace: [\n\t\t\t[/[^#:%*@\\-!_}]+/, 'variable'],\n\t\t\t[/[#:%*@\\-!_]/, 'delimiter'],\n\t\t\t[/[}]/, 'variable', '@pop']\n\t\t]\n\t}\n}",
  "solidity": "<languages.IMonarchLanguage>{\n\tdefaultToken: '',\n\ttokenPostfix: '.sol',\n\n\tbrackets: [\n\t\t{ token: 'delimiter.curly', open: '{', close: '}' },\n\t\t{ token: 'delimiter.parenthesis', open: '(', close: ')' },\n\t\t{ token: 'delimiter.square', open: '[', close: ']' },\n\t\t{ token: 'delimiter.angle', open: '<', close: '>' }\n\t],\n\n\tkeywords: [\n\t\t// Main keywords\n\t\t'pragma',\n\t\t'solidity',\n\t\t'contract',\n\t\t'library',\n\t\t'using',\n\t\t'struct',\n\t\t'function',\n\t\t'modifier',\n\t\t'constructor',\n\t\t//Built-in types\n\t\t'address',\n\t\t'string',\n\t\t'bool',\n\t\t//Other types\n\t\t'Int',\n\t\t'Uint',\n\t\t'Byte',\n\t\t'Fixed',\n\t\t'Ufixed',\n\t\t//All int\n\t\t'int',\n\t\t'int8',\n\t\t'int16',\n\t\t'int24',\n\t\t'int32',\n\t\t'int40',\n\t\t'int48',\n\t\t'int56',\n\t\t'int64',\n\t\t'int72',\n\t\t'int80',\n\t\t'int88',\n\t\t'int96',\n\t\t'int104',\n\t\t'int112',\n\t\t'int120',\n\t\t'int128',\n\t\t'int136',\n\t\t'int144',\n\t\t'int152',\n\t\t'int160',\n\t\t'int168',\n\t\t'int176',\n\t\t'int184',\n\t\t'int192',\n\t\t'int200',\n\t\t'int208',\n\t\t'int216',\n\t\t'int224',\n\t\t'int232',\n\t\t'int240',\n\t\t'int248',\n\t\t'int256',\n\t\t//All uint\n\t\t'uint',\n\t\t'uint8',\n\t\t'uint16',\n\t\t'uint24',\n\t\t'uint32',\n\t\t'uint40',\n\t\t'uint48',\n\t\t'uint56',\n\t\t'uint64',\n\t\t'uint72',\n\t\t'uint80',\n\t\t'uint88',\n\t\t'uint96',\n\t\t'uint104',\n\t\t'uint112',\n\t\t'uint120',\n\t\t'uint128',\n\t\t'uint136',\n\t\t'uint144',\n\t\t'uint152',\n\t\t'uint160',\n\t\t'uint168',\n\t\t'uint176',\n\t\t'uint184',\n\t\t'uint192',\n\t\t'uint200',\n\t\t'uint208',\n\t\t'uint216',\n\t\t'uint224',\n\t\t'uint232',\n\t\t'uint240',\n\t\t'uint248',\n\t\t'uint256',\n\t\t//All Byte\n\t\t'byte',\n\t\t'bytes',\n\t\t'bytes1',\n\t\t'bytes2',\n\t\t'bytes3',\n\t\t'bytes4',\n\t\t'bytes5',\n\t\t'bytes6',\n\t\t'bytes7',\n\t\t'bytes8',\n\t\t'bytes9',\n\t\t'bytes10',\n\t\t'bytes11',\n\t\t'bytes12',\n\t\t'bytes13',\n\t\t'bytes14',\n\t\t'bytes15',\n\t\t'bytes16',\n\t\t'bytes17',\n\t\t'bytes18',\n\t\t'bytes19',\n\t\t'bytes20',\n\t\t'bytes21',\n\t\t'bytes22',\n\t\t'bytes23',\n\t\t'bytes24',\n\t\t'bytes25',\n\t\t'bytes26',\n\t\t'bytes27',\n\t\t'bytes28',\n\t\t'bytes29',\n\t\t'bytes30',\n\t\t'bytes31',\n\t\t'bytes32',\n\t\t//All fixed\n\t\t'fixed',\n\t\t'fixed0x8',\n\t\t'fixed0x16',\n\t\t'fixed0x24',\n\t\t'fixed0x32',\n\t\t'fixed0x40',\n\t\t'fixed0x48',\n\t\t'fixed0x56',\n\t\t'fixed0x64',\n\t\t'fixed0x72',\n\t\t'fixed0x80',\n\t\t'fixed0x88',\n\t\t'fixed0x96',\n\t\t'fixed0x104',\n\t\t'fixed0x112',\n\t\t'fixed0x120',\n\t\t'fixed0x128',\n\t\t'fixed0x136',\n\t\t'fixed0x144',\n\t\t'fixed0x152',\n\t\t'fixed0x160',\n\t\t'fixed0x168',\n\t\t'fixed0x176',\n\t\t'fixed0x184',\n\t\t'fixed0x192',\n\t\t'fixed0x200',\n\t\t'fixed0x208',\n\t\t'fixed0x216',\n\t\t'fixed0x224',\n\t\t'fixed0x232',\n\t\t'fixed0x240',\n\t\t'fixed0x248',\n\t\t'fixed0x256',\n\t\t'fixed8x8',\n\t\t'fixed8x16',\n\t\t'fixed8x24',\n\t\t'fixed8x32',\n\t\t'fixed8x40',\n\t\t'fixed8x48',\n\t\t'fixed8x56',\n\t\t'fixed8x64',\n\t\t'fixed8x72',\n\t\t'fixed8x80',\n\t\t'fixed8x88',\n\t\t'fixed8x96',\n\t\t'fixed8x104',\n\t\t'fixed8x112',\n\t\t'fixed8x120',\n\t\t'fixed8x128',\n\t\t'fixed8x136',\n\t\t'fixed8x144',\n\t\t'fixed8x152',\n\t\t'fixed8x160',\n\t\t'fixed8x168',\n\t\t'fixed8x176',\n\t\t'fixed8x184',\n\t\t'fixed8x192',\n\t\t'fixed8x200',\n\t\t'fixed8x208',\n\t\t'fixed8x216',\n\t\t'fixed8x224',\n\t\t'fixed8x232',\n\t\t'fixed8x240',\n\t\t'fixed8x248',\n\t\t'fixed16x8',\n\t\t'fixed16x16',\n\t\t'fixed16x24',\n\t\t'fixed16x32',\n\t\t'fixed16x40',\n\t\t'fixed16x48',\n\t\t'fixed16x56',\n\t\t'fixed16x64',\n\t\t'fixed16x72',\n\t\t'fixed16x80',\n\t\t'fixed16x88',\n\t\t'fixed16x96',\n\t\t'fixed16x104',\n\t\t'fixed16x112',\n\t\t'fixed16x120',\n\t\t'fixed16x128',\n\t\t'fixed16x136',\n\t\t'fixed16x144',\n\t\t'fixed16x152',\n\t\t'fixed16x160',\n\t\t'fixed16x168',\n\t\t'fixed16x176',\n\t\t'fixed16x184',\n\t\t'fixed16x192',\n\t\t'fixed16x200',\n\t\t'fixed16x208',\n\t\t'fixed16x216',\n\t\t'fixed16x224',\n\t\t'fixed16x232',\n\t\t'fixed16x240',\n\t\t'fixed24x8',\n\t\t'fixed24x16',\n\t\t'fixed24x24',\n\t\t'fixed24x32',\n\t\t'fixed24x40',\n\t\t'fixed24x48',\n\t\t'fixed24x56',\n\t\t'fixed24x64',\n\t\t'fixed24x72',\n\t\t'fixed24x80',\n\t\t'fixed24x88',\n\t\t'fixed24x96',\n\t\t'fixed24x104',\n\t\t'fixed24x112',\n\t\t'fixed24x120',\n\t\t'fixed24x128',\n\t\t'fixed24x136',\n\t\t'fixed24x144',\n\t\t'fixed24x152',\n\t\t'fixed24x160',\n\t\t'fixed24x168',\n\t\t'fixed24x176',\n\t\t'fixed24x184',\n\t\t'fixed24x192',\n\t\t'fixed24x200',\n\t\t'fixed24x208',\n\t\t'fixed24x216',\n\t\t'fixed24x224',\n\t\t'fixed24x232',\n\t\t'fixed32x8',\n\t\t'fixed32x16',\n\t\t'fixed32x24',\n\t\t'fixed32x32',\n\t\t'fixed32x40',\n\t\t'fixed32x48',\n\t\t'fixed32x56',\n\t\t'fixed32x64',\n\t\t'fixed32x72',\n\t\t'fixed32x80',\n\t\t'fixed32x88',\n\t\t'fixed32x96',\n\t\t'fixed32x104',\n\t\t'fixed32x112',\n\t\t'fixed32x120',\n\t\t'fixed32x128',\n\t\t'fixed32x136',\n\t\t'fixed32x144',\n\t\t'fixed32x152',\n\t\t'fixed32x160',\n\t\t'fixed32x168',\n\t\t'fixed32x176',\n\t\t'fixed32x184',\n\t\t'fixed32x192',\n\t\t'fixed32x200',\n\t\t'fixed32x208',\n\t\t'fixed32x216',\n\t\t'fixed32x224',\n\t\t'fixed40x8',\n\t\t'fixed40x16',\n\t\t'fixed40x24',\n\t\t'fixed40x32',\n\t\t'fixed40x40',\n\t\t'fixed40x48',\n\t\t'fixed40x56',\n\t\t'fixed40x64',\n\t\t'fixed40x72',\n\t\t'fixed40x80',\n\t\t'fixed40x88',\n\t\t'fixed40x96',\n\t\t'fixed40x104',\n\t\t'fixed40x112',\n\t\t'fixed40x120',\n\t\t'fixed40x128',\n\t\t'fixed40x136',\n\t\t'fixed40x144',\n\t\t'fixed40x152',\n\t\t'fixed40x160',\n\t\t'fixed40x168',\n\t\t'fixed40x176',\n\t\t'fixed40x184',\n\t\t'fixed40x192',\n\t\t'fixed40x200',\n\t\t'fixed40x208',\n\t\t'fixed40x216',\n\t\t'fixed48x8',\n\t\t'fixed48x16',\n\t\t'fixed48x24',\n\t\t'fixed48x32',\n\t\t'fixed48x40',\n\t\t'fixed48x48',\n\t\t'fixed48x56',\n\t\t'fixed48x64',\n\t\t'fixed48x72',\n\t\t'fixed48x80',\n\t\t'fixed48x88',\n\t\t'fixed48x96',\n\t\t'fixed48x104',\n\t\t'fixed48x112',\n\t\t'fixed48x120',\n\t\t'fixed48x128',\n\t\t'fixed48x136',\n\t\t'fixed48x144',\n\t\t'fixed48x152',\n\t\t'fixed48x160',\n\t\t'fixed48x168',\n\t\t'fixed48x176',\n\t\t'fixed48x184',\n\t\t'fixed48x192',\n\t\t'fixed48x200',\n\t\t'fixed48x208',\n\t\t'fixed56x8',\n\t\t'fixed56x16',\n\t\t'fixed56x24',\n\t\t'fixed56x32',\n\t\t'fixed56x40',\n\t\t'fixed56x48',\n\t\t'fixed56x56',\n\t\t'fixed56x64',\n\t\t'fixed56x72',\n\t\t'fixed56x80',\n\t\t'fixed56x88',\n\t\t'fixed56x96',\n\t\t'fixed56x104',\n\t\t'fixed56x112',\n\t\t'fixed56x120',\n\t\t'fixed56x128',\n\t\t'fixed56x136',\n\t\t'fixed56x144',\n\t\t'fixed56x152',\n\t\t'fixed56x160',\n\t\t'fixed56x168',\n\t\t'fixed56x176',\n\t\t'fixed56x184',\n\t\t'fixed56x192',\n\t\t'fixed56x200',\n\t\t'fixed64x8',\n\t\t'fixed64x16',\n\t\t'fixed64x24',\n\t\t'fixed64x32',\n\t\t'fixed64x40',\n\t\t'fixed64x48',\n\t\t'fixed64x56',\n\t\t'fixed64x64',\n\t\t'fixed64x72',\n\t\t'fixed64x80',\n\t\t'fixed64x88',\n\t\t'fixed64x96',\n\t\t'fixed64x104',\n\t\t'fixed64x112',\n\t\t'fixed64x120',\n\t\t'fixed64x128',\n\t\t'fixed64x136',\n\t\t'fixed64x144',\n\t\t'fixed64x152',\n\t\t'fixed64x160',\n\t\t'fixed64x168',\n\t\t'fixed64x176',\n\t\t'fixed64x184',\n\t\t'fixed64x192',\n\t\t'fixed72x8',\n\t\t'fixed72x16',\n\t\t'fixed72x24',\n\t\t'fixed72x32',\n\t\t'fixed72x40',\n\t\t'fixed72x48',\n\t\t'fixed72x56',\n\t\t'fixed72x64',\n\t\t'fixed72x72',\n\t\t'fixed72x80',\n\t\t'fixed72x88',\n\t\t'fixed72x96',\n\t\t'fixed72x104',\n\t\t'fixed72x112',\n\t\t'fixed72x120',\n\t\t'fixed72x128',\n\t\t'fixed72x136',\n\t\t'fixed72x144',\n\t\t'fixed72x152',\n\t\t'fixed72x160',\n\t\t'fixed72x168',\n\t\t'fixed72x176',\n\t\t'fixed72x184',\n\t\t'fixed80x8',\n\t\t'fixed80x16',\n\t\t'fixed80x24',\n\t\t'fixed80x32',\n\t\t'fixed80x40',\n\t\t'fixed80x48',\n\t\t'fixed80x56',\n\t\t'fixed80x64',\n\t\t'fixed80x72',\n\t\t'fixed80x80',\n\t\t'fixed80x88',\n\t\t'fixed80x96',\n\t\t'fixed80x104',\n\t\t'fixed80x112',\n\t\t'fixed80x120',\n\t\t'fixed80x128',\n\t\t'fixed80x136',\n\t\t'fixed80x144',\n\t\t'fixed80x152',\n\t\t'fixed80x160',\n\t\t'fixed80x168',\n\t\t'fixed80x176',\n\t\t'fixed88x8',\n\t\t'fixed88x16',\n\t\t'fixed88x24',\n\t\t'fixed88x32',\n\t\t'fixed88x40',\n\t\t'fixed88x48',\n\t\t'fixed88x56',\n\t\t'fixed88x64',\n\t\t'fixed88x72',\n\t\t'fixed88x80',\n\t\t'fixed88x88',\n\t\t'fixed88x96',\n\t\t'fixed88x104',\n\t\t'fixed88x112',\n\t\t'fixed88x120',\n\t\t'fixed88x128',\n\t\t'fixed88x136',\n\t\t'fixed88x144',\n\t\t'fixed88x152',\n\t\t'fixed88x160',\n\t\t'fixed88x168',\n\t\t'fixed96x8',\n\t\t'fixed96x16',\n\t\t'fixed96x24',\n\t\t'fixed96x32',\n\t\t'fixed96x40',\n\t\t'fixed96x48',\n\t\t'fixed96x56',\n\t\t'fixed96x64',\n\t\t'fixed96x72',\n\t\t'fixed96x80',\n\t\t'fixed96x88',\n\t\t'fixed96x96',\n\t\t'fixed96x104',\n\t\t'fixed96x112',\n\t\t'fixed96x120',\n\t\t'fixed96x128',\n\t\t'fixed96x136',\n\t\t'fixed96x144',\n\t\t'fixed96x152',\n\t\t'fixed96x160',\n\t\t'fixed104x8',\n\t\t'fixed104x16',\n\t\t'fixed104x24',\n\t\t'fixed104x32',\n\t\t'fixed104x40',\n\t\t'fixed104x48',\n\t\t'fixed104x56',\n\t\t'fixed104x64',\n\t\t'fixed104x72',\n\t\t'fixed104x80',\n\t\t'fixed104x88',\n\t\t'fixed104x96',\n\t\t'fixed104x104',\n\t\t'fixed104x112',\n\t\t'fixed104x120',\n\t\t'fixed104x128',\n\t\t'fixed104x136',\n\t\t'fixed104x144',\n\t\t'fixed104x152',\n\t\t'fixed112x8',\n\t\t'fixed112x16',\n\t\t'fixed112x24',\n\t\t'fixed112x32',\n\t\t'fixed112x40',\n\t\t'fixed112x48',\n\t\t'fixed112x56',\n\t\t'fixed112x64',\n\t\t'fixed112x72',\n\t\t'fixed112x80',\n\t\t'fixed112x88',\n\t\t'fixed112x96',\n\t\t'fixed112x104',\n\t\t'fixed112x112',\n\t\t'fixed112x120',\n\t\t'fixed112x128',\n\t\t'fixed112x136',\n\t\t'fixed112x144',\n\t\t'fixed120x8',\n\t\t'fixed120x16',\n\t\t'fixed120x24',\n\t\t'fixed120x32',\n\t\t'fixed120x40',\n\t\t'fixed120x48',\n\t\t'fixed120x56',\n\t\t'fixed120x64',\n\t\t'fixed120x72',\n\t\t'fixed120x80',\n\t\t'fixed120x88',\n\t\t'fixed120x96',\n\t\t'fixed120x104',\n\t\t'fixed120x112',\n\t\t'fixed120x120',\n\t\t'fixed120x128',\n\t\t'fixed120x136',\n\t\t'fixed128x8',\n\t\t'fixed128x16',\n\t\t'fixed128x24',\n\t\t'fixed128x32',\n\t\t'fixed128x40',\n\t\t'fixed128x48',\n\t\t'fixed128x56',\n\t\t'fixed128x64',\n\t\t'fixed128x72',\n\t\t'fixed128x80',\n\t\t'fixed128x88',\n\t\t'fixed128x96',\n\t\t'fixed128x104',\n\t\t'fixed128x112',\n\t\t'fixed128x120',\n\t\t'fixed128x128',\n\t\t'fixed136x8',\n\t\t'fixed136x16',\n\t\t'fixed136x24',\n\t\t'fixed136x32',\n\t\t'fixed136x40',\n\t\t'fixed136x48',\n\t\t'fixed136x56',\n\t\t'fixed136x64',\n\t\t'fixed136x72',\n\t\t'fixed136x80',\n\t\t'fixed136x88',\n\t\t'fixed136x96',\n\t\t'fixed136x104',\n\t\t'fixed136x112',\n\t\t'fixed136x120',\n\t\t'fixed144x8',\n\t\t'fixed144x16',\n\t\t'fixed144x24',\n\t\t'fixed144x32',\n\t\t'fixed144x40',\n\t\t'fixed144x48',\n\t\t'fixed144x56',\n\t\t'fixed144x64',\n\t\t'fixed144x72',\n\t\t'fixed144x80',\n\t\t'fixed144x88',\n\t\t'fixed144x96',\n\t\t'fixed144x104',\n\t\t'fixed144x112',\n\t\t'fixed152x8',\n\t\t'fixed152x16',\n\t\t'fixed152x24',\n\t\t'fixed152x32',\n\t\t'fixed152x40',\n\t\t'fixed152x48',\n\t\t'fixed152x56',\n\t\t'fixed152x64',\n\t\t'fixed152x72',\n\t\t'fixed152x80',\n\t\t'fixed152x88',\n\t\t'fixed152x96',\n\t\t'fixed152x104',\n\t\t'fixed160x8',\n\t\t'fixed160x16',\n\t\t'fixed160x24',\n\t\t'fixed160x32',\n\t\t'fixed160x40',\n\t\t'fixed160x48',\n\t\t'fixed160x56',\n\t\t'fixed160x64',\n\t\t'fixed160x72',\n\t\t'fixed160x80',\n\t\t'fixed160x88',\n\t\t'fixed160x96',\n\t\t'fixed168x8',\n\t\t'fixed168x16',\n\t\t'fixed168x24',\n\t\t'fixed168x32',\n\t\t'fixed168x40',\n\t\t'fixed168x48',\n\t\t'fixed168x56',\n\t\t'fixed168x64',\n\t\t'fixed168x72',\n\t\t'fixed168x80',\n\t\t'fixed168x88',\n\t\t'fixed176x8',\n\t\t'fixed176x16',\n\t\t'fixed176x24',\n\t\t'fixed176x32',\n\t\t'fixed176x40',\n\t\t'fixed176x48',\n\t\t'fixed176x56',\n\t\t'fixed176x64',\n\t\t'fixed176x72',\n\t\t'fixed176x80',\n\t\t'fixed184x8',\n\t\t'fixed184x16',\n\t\t'fixed184x24',\n\t\t'fixed184x32',\n\t\t'fixed184x40',\n\t\t'fixed184x48',\n\t\t'fixed184x56',\n\t\t'fixed184x64',\n\t\t'fixed184x72',\n\t\t'fixed192x8',\n\t\t'fixed192x16',\n\t\t'fixed192x24',\n\t\t'fixed192x32',\n\t\t'fixed192x40',\n\t\t'fixed192x48',\n\t\t'fixed192x56',\n\t\t'fixed192x64',\n\t\t'fixed200x8',\n\t\t'fixed200x16',\n\t\t'fixed200x24',\n\t\t'fixed200x32',\n\t\t'fixed200x40',\n\t\t'fixed200x48',\n\t\t'fixed200x56',\n\t\t'fixed208x8',\n\t\t'fixed208x16',\n\t\t'fixed208x24',\n\t\t'fixed208x32',\n\t\t'fixed208x40',\n\t\t'fixed208x48',\n\t\t'fixed216x8',\n\t\t'fixed216x16',\n\t\t'fixed216x24',\n\t\t'fixed216x32',\n\t\t'fixed216x40',\n\t\t'fixed224x8',\n\t\t'fixed224x16',\n\t\t'fixed224x24',\n\t\t'fixed224x32',\n\t\t'fixed232x8',\n\t\t'fixed232x16',\n\t\t'fixed232x24',\n\t\t'fixed240x8',\n\t\t'fixed240x16',\n\t\t'fixed248x8',\n\t\t//All ufixed\n\t\t'ufixed',\n\t\t'ufixed0x8',\n\t\t'ufixed0x16',\n\t\t'ufixed0x24',\n\t\t'ufixed0x32',\n\t\t'ufixed0x40',\n\t\t'ufixed0x48',\n\t\t'ufixed0x56',\n\t\t'ufixed0x64',\n\t\t'ufixed0x72',\n\t\t'ufixed0x80',\n\t\t'ufixed0x88',\n\t\t'ufixed0x96',\n\t\t'ufixed0x104',\n\t\t'ufixed0x112',\n\t\t'ufixed0x120',\n\t\t'ufixed0x128',\n\t\t'ufixed0x136',\n\t\t'ufixed0x144',\n\t\t'ufixed0x152',\n\t\t'ufixed0x160',\n\t\t'ufixed0x168',\n\t\t'ufixed0x176',\n\t\t'ufixed0x184',\n\t\t'ufixed0x192',\n\t\t'ufixed0x200',\n\t\t'ufixed0x208',\n\t\t'ufixed0x216',\n\t\t'ufixed0x224',\n\t\t'ufixed0x232',\n\t\t'ufixed0x240',\n\t\t'ufixed0x248',\n\t\t'ufixed0x256',\n\t\t'ufixed8x8',\n\t\t'ufixed8x16',\n\t\t'ufixed8x24',\n\t\t'ufixed8x32',\n\t\t'ufixed8x40',\n\t\t'ufixed8x48',\n\t\t'ufixed8x56',\n\t\t'ufixed8x64',\n\t\t'ufixed8x72',\n\t\t'ufixed8x80',\n\t\t'ufixed8x88',\n\t\t'ufixed8x96',\n\t\t'ufixed8x104',\n\t\t'ufixed8x112',\n\t\t'ufixed8x120',\n\t\t'ufixed8x128',\n\t\t'ufixed8x136',\n\t\t'ufixed8x144',\n\t\t'ufixed8x152',\n\t\t'ufixed8x160',\n\t\t'ufixed8x168',\n\t\t'ufixed8x176',\n\t\t'ufixed8x184',\n\t\t'ufixed8x192',\n\t\t'ufixed8x200',\n\t\t'ufixed8x208',\n\t\t'ufixed8x216',\n\t\t'ufixed8x224',\n\t\t'ufixed8x232',\n\t\t'ufixed8x240',\n\t\t'ufixed8x248',\n\t\t'ufixed16x8',\n\t\t'ufixed16x16',\n\t\t'ufixed16x24',\n\t\t'ufixed16x32',\n\t\t'ufixed16x40',\n\t\t'ufixed16x48',\n\t\t'ufixed16x56',\n\t\t'ufixed16x64',\n\t\t'ufixed16x72',\n\t\t'ufixed16x80',\n\t\t'ufixed16x88',\n\t\t'ufixed16x96',\n\t\t'ufixed16x104',\n\t\t'ufixed16x112',\n\t\t'ufixed16x120',\n\t\t'ufixed16x128',\n\t\t'ufixed16x136',\n\t\t'ufixed16x144',\n\t\t'ufixed16x152',\n\t\t'ufixed16x160',\n\t\t'ufixed16x168',\n\t\t'ufixed16x176',\n\t\t'ufixed16x184',\n\t\t'ufixed16x192',\n\t\t'ufixed16x200',\n\t\t'ufixed16x208',\n\t\t'ufixed16x216',\n\t\t'ufixed16x224',\n\t\t'ufixed16x232',\n\t\t'ufixed16x240',\n\t\t'ufixed24x8',\n\t\t'ufixed24x16',\n\t\t'ufixed24x24',\n\t\t'ufixed24x32',\n\t\t'ufixed24x40',\n\t\t'ufixed24x48',\n\t\t'ufixed24x56',\n\t\t'ufixed24x64',\n\t\t'ufixed24x72',\n\t\t'ufixed24x80',\n\t\t'ufixed24x88',\n\t\t'ufixed24x96',\n\t\t'ufixed24x104',\n\t\t'ufixed24x112',\n\t\t'ufixed24x120',\n\t\t'ufixed24x128',\n\t\t'ufixed24x136',\n\t\t'ufixed24x144',\n\t\t'ufixed24x152',\n\t\t'ufixed24x160',\n\t\t'ufixed24x168',\n\t\t'ufixed24x176',\n\t\t'ufixed24x184',\n\t\t'ufixed24x192',\n\t\t'ufixed24x200',\n\t\t'ufixed24x208',\n\t\t'ufixed24x216',\n\t\t'ufixed24x224',\n\t\t'ufixed24x232',\n\t\t'ufixed32x8',\n\t\t'ufixed32x16',\n\t\t'ufixed32x24',\n\t\t'ufixed32x32',\n\t\t'ufixed32x40',\n\t\t'ufixed32x48',\n\t\t'ufixed32x56',\n\t\t'ufixed32x64',\n\t\t'ufixed32x72',\n\t\t'ufixed32x80',\n\t\t'ufixed32x88',\n\t\t'ufixed32x96',\n\t\t'ufixed32x104',\n\t\t'ufixed32x112',\n\t\t'ufixed32x120',\n\t\t'ufixed32x128',\n\t\t'ufixed32x136',\n\t\t'ufixed32x144',\n\t\t'ufixed32x152',\n\t\t'ufixed32x160',\n\t\t'ufixed32x168',\n\t\t'ufixed32x176',\n\t\t'ufixed32x184',\n\t\t'ufixed32x192',\n\t\t'ufixed32x200',\n\t\t'ufixed32x208',\n\t\t'ufixed32x216',\n\t\t'ufixed32x224',\n\t\t'ufixed40x8',\n\t\t'ufixed40x16',\n\t\t'ufixed40x24',\n\t\t'ufixed40x32',\n\t\t'ufixed40x40',\n\t\t'ufixed40x48',\n\t\t'ufixed40x56',\n\t\t'ufixed40x64',\n\t\t'ufixed40x72',\n\t\t'ufixed40x80',\n\t\t'ufixed40x88',\n\t\t'ufixed40x96',\n\t\t'ufixed40x104',\n\t\t'ufixed40x112',\n\t\t'ufixed40x120',\n\t\t'ufixed40x128',\n\t\t'ufixed40x136',\n\t\t'ufixed40x144',\n\t\t'ufixed40x152',\n\t\t'ufixed40x160',\n\t\t'ufixed40x168',\n\t\t'ufixed40x176',\n\t\t'ufixed40x184',\n\t\t'ufixed40x192',\n\t\t'ufixed40x200',\n\t\t'ufixed40x208',\n\t\t'ufixed40x216',\n\t\t'ufixed48x8',\n\t\t'ufixed48x16',\n\t\t'ufixed48x24',\n\t\t'ufixed48x32',\n\t\t'ufixed48x40',\n\t\t'ufixed48x48',\n\t\t'ufixed48x56',\n\t\t'ufixed48x64',\n\t\t'ufixed48x72',\n\t\t'ufixed48x80',\n\t\t'ufixed48x88',\n\t\t'ufixed48x96',\n\t\t'ufixed48x104',\n\t\t'ufixed48x112',\n\t\t'ufixed48x120',\n\t\t'ufixed48x128',\n\t\t'ufixed48x136',\n\t\t'ufixed48x144',\n\t\t'ufixed48x152',\n\t\t'ufixed48x160',\n\t\t'ufixed48x168',\n\t\t'ufixed48x176',\n\t\t'ufixed48x184',\n\t\t'ufixed48x192',\n\t\t'ufixed48x200',\n\t\t'ufixed48x208',\n\t\t'ufixed56x8',\n\t\t'ufixed56x16',\n\t\t'ufixed56x24',\n\t\t'ufixed56x32',\n\t\t'ufixed56x40',\n\t\t'ufixed56x48',\n\t\t'ufixed56x56',\n\t\t'ufixed56x64',\n\t\t'ufixed56x72',\n\t\t'ufixed56x80',\n\t\t'ufixed56x88',\n\t\t'ufixed56x96',\n\t\t'ufixed56x104',\n\t\t'ufixed56x112',\n\t\t'ufixed56x120',\n\t\t'ufixed56x128',\n\t\t'ufixed56x136',\n\t\t'ufixed56x144',\n\t\t'ufixed56x152',\n\t\t'ufixed56x160',\n\t\t'ufixed56x168',\n\t\t'ufixed56x176',\n\t\t'ufixed56x184',\n\t\t'ufixed56x192',\n\t\t'ufixed56x200',\n\t\t'ufixed64x8',\n\t\t'ufixed64x16',\n\t\t'ufixed64x24',\n\t\t'ufixed64x32',\n\t\t'ufixed64x40',\n\t\t'ufixed64x48',\n\t\t'ufixed64x56',\n\t\t'ufixed64x64',\n\t\t'ufixed64x72',\n\t\t'ufixed64x80',\n\t\t'ufixed64x88',\n\t\t'ufixed64x96',\n\t\t'ufixed64x104',\n\t\t'ufixed64x112',\n\t\t'ufixed64x120',\n\t\t'ufixed64x128',\n\t\t'ufixed64x136',\n\t\t'ufixed64x144',\n\t\t'ufixed64x152',\n\t\t'ufixed64x160',\n\t\t'ufixed64x168',\n\t\t'ufixed64x176',\n\t\t'ufixed64x184',\n\t\t'ufixed64x192',\n\t\t'ufixed72x8',\n\t\t'ufixed72x16',\n\t\t'ufixed72x24',\n\t\t'ufixed72x32',\n\t\t'ufixed72x40',\n\t\t'ufixed72x48',\n\t\t'ufixed72x56',\n\t\t'ufixed72x64',\n\t\t'ufixed72x72',\n\t\t'ufixed72x80',\n\t\t'ufixed72x88',\n\t\t'ufixed72x96',\n\t\t'ufixed72x104',\n\t\t'ufixed72x112',\n\t\t'ufixed72x120',\n\t\t'ufixed72x128',\n\t\t'ufixed72x136',\n\t\t'ufixed72x144',\n\t\t'ufixed72x152',\n\t\t'ufixed72x160',\n\t\t'ufixed72x168',\n\t\t'ufixed72x176',\n\t\t'ufixed72x184',\n\t\t'ufixed80x8',\n\t\t'ufixed80x16',\n\t\t'ufixed80x24',\n\t\t'ufixed80x32',\n\t\t'ufixed80x40',\n\t\t'ufixed80x48',\n\t\t'ufixed80x56',\n\t\t'ufixed80x64',\n\t\t'ufixed80x72',\n\t\t'ufixed80x80',\n\t\t'ufixed80x88',\n\t\t'ufixed80x96',\n\t\t'ufixed80x104',\n\t\t'ufixed80x112',\n\t\t'ufixed80x120',\n\t\t'ufixed80x128',\n\t\t'ufixed80x136',\n\t\t'ufixed80x144',\n\t\t'ufixed80x152',\n\t\t'ufixed80x160',\n\t\t'ufixed80x168',\n\t\t'ufixed80x176',\n\t\t'ufixed88x8',\n\t\t'ufixed88x16',\n\t\t'ufixed88x24',\n\t\t'ufixed88x32',\n\t\t'ufixed88x40',\n\t\t'ufixed88x48',\n\t\t'ufixed88x56',\n\t\t'ufixed88x64',\n\t\t'ufixed88x72',\n\t\t'ufixed88x80',\n\t\t'ufixed88x88',\n\t\t'ufixed88x96',\n\t\t'ufixed88x104',\n\t\t'ufixed88x112',\n\t\t'ufixed88x120',\n\t\t'ufixed88x128',\n\t\t'ufixed88x136',\n\t\t'ufixed88x144',\n\t\t'ufixed88x152',\n\t\t'ufixed88x160',\n\t\t'ufixed88x168',\n\t\t'ufixed96x8',\n\t\t'ufixed96x16',\n\t\t'ufixed96x24',\n\t\t'ufixed96x32',\n\t\t'ufixed96x40',\n\t\t'ufixed96x48',\n\t\t'ufixed96x56',\n\t\t'ufixed96x64',\n\t\t'ufixed96x72',\n\t\t'ufixed96x80',\n\t\t'ufixed96x88',\n\t\t'ufixed96x96',\n\t\t'ufixed96x104',\n\t\t'ufixed96x112',\n\t\t'ufixed96x120',\n\t\t'ufixed96x128',\n\t\t'ufixed96x136',\n\t\t'ufixed96x144',\n\t\t'ufixed96x152',\n\t\t'ufixed96x160',\n\t\t'ufixed104x8',\n\t\t'ufixed104x16',\n\t\t'ufixed104x24',\n\t\t'ufixed104x32',\n\t\t'ufixed104x40',\n\t\t'ufixed104x48',\n\t\t'ufixed104x56',\n\t\t'ufixed104x64',\n\t\t'ufixed104x72',\n\t\t'ufixed104x80',\n\t\t'ufixed104x88',\n\t\t'ufixed104x96',\n\t\t'ufixed104x104',\n\t\t'ufixed104x112',\n\t\t'ufixed104x120',\n\t\t'ufixed104x128',\n\t\t'ufixed104x136',\n\t\t'ufixed104x144',\n\t\t'ufixed104x152',\n\t\t'ufixed112x8',\n\t\t'ufixed112x16',\n\t\t'ufixed112x24',\n\t\t'ufixed112x32',\n\t\t'ufixed112x40',\n\t\t'ufixed112x48',\n\t\t'ufixed112x56',\n\t\t'ufixed112x64',\n\t\t'ufixed112x72',\n\t\t'ufixed112x80',\n\t\t'ufixed112x88',\n\t\t'ufixed112x96',\n\t\t'ufixed112x104',\n\t\t'ufixed112x112',\n\t\t'ufixed112x120',\n\t\t'ufixed112x128',\n\t\t'ufixed112x136',\n\t\t'ufixed112x144',\n\t\t'ufixed120x8',\n\t\t'ufixed120x16',\n\t\t'ufixed120x24',\n\t\t'ufixed120x32',\n\t\t'ufixed120x40',\n\t\t'ufixed120x48',\n\t\t'ufixed120x56',\n\t\t'ufixed120x64',\n\t\t'ufixed120x72',\n\t\t'ufixed120x80',\n\t\t'ufixed120x88',\n\t\t'ufixed120x96',\n\t\t'ufixed120x104',\n\t\t'ufixed120x112',\n\t\t'ufixed120x120',\n\t\t'ufixed120x128',\n\t\t'ufixed120x136',\n\t\t'ufixed128x8',\n\t\t'ufixed128x16',\n\t\t'ufixed128x24',\n\t\t'ufixed128x32',\n\t\t'ufixed128x40',\n\t\t'ufixed128x48',\n\t\t'ufixed128x56',\n\t\t'ufixed128x64',\n\t\t'ufixed128x72',\n\t\t'ufixed128x80',\n\t\t'ufixed128x88',\n\t\t'ufixed128x96',\n\t\t'ufixed128x104',\n\t\t'ufixed128x112',\n\t\t'ufixed128x120',\n\t\t'ufixed128x128',\n\t\t'ufixed136x8',\n\t\t'ufixed136x16',\n\t\t'ufixed136x24',\n\t\t'ufixed136x32',\n\t\t'ufixed136x40',\n\t\t'ufixed136x48',\n\t\t'ufixed136x56',\n\t\t'ufixed136x64',\n\t\t'ufixed136x72',\n\t\t'ufixed136x80',\n\t\t'ufixed136x88',\n\t\t'ufixed136x96',\n\t\t'ufixed136x104',\n\t\t'ufixed136x112',\n\t\t'ufixed136x120',\n\t\t'ufixed144x8',\n\t\t'ufixed144x16',\n\t\t'ufixed144x24',\n\t\t'ufixed144x32',\n\t\t'ufixed144x40',\n\t\t'ufixed144x48',\n\t\t'ufixed144x56',\n\t\t'ufixed144x64',\n\t\t'ufixed144x72',\n\t\t'ufixed144x80',\n\t\t'ufixed144x88',\n\t\t'ufixed144x96',\n\t\t'ufixed144x104',\n\t\t'ufixed144x112',\n\t\t'ufixed152x8',\n\t\t'ufixed152x16',\n\t\t'ufixed152x24',\n\t\t'ufixed152x32',\n\t\t'ufixed152x40',\n\t\t'ufixed152x48',\n\t\t'ufixed152x56',\n\t\t'ufixed152x64',\n\t\t'ufixed152x72',\n\t\t'ufixed152x80',\n\t\t'ufixed152x88',\n\t\t'ufixed152x96',\n\t\t'ufixed152x104',\n\t\t'ufixed160x8',\n\t\t'ufixed160x16',\n\t\t'ufixed160x24',\n\t\t'ufixed160x32',\n\t\t'ufixed160x40',\n\t\t'ufixed160x48',\n\t\t'ufixed160x56',\n\t\t'ufixed160x64',\n\t\t'ufixed160x72',\n\t\t'ufixed160x80',\n\t\t'ufixed160x88',\n\t\t'ufixed160x96',\n\t\t'ufixed168x8',\n\t\t'ufixed168x16',\n\t\t'ufixed168x24',\n\t\t'ufixed168x32',\n\t\t'ufixed168x40',\n\t\t'ufixed168x48',\n\t\t'ufixed168x56',\n\t\t'ufixed168x64',\n\t\t'ufixed168x72',\n\t\t'ufixed168x80',\n\t\t'ufixed168x88',\n\t\t'ufixed176x8',\n\t\t'ufixed176x16',\n\t\t'ufixed176x24',\n\t\t'ufixed176x32',\n\t\t'ufixed176x40',\n\t\t'ufixed176x48',\n\t\t'ufixed176x56',\n\t\t'ufixed176x64',\n\t\t'ufixed176x72',\n\t\t'ufixed176x80',\n\t\t'ufixed184x8',\n\t\t'ufixed184x16',\n\t\t'ufixed184x24',\n\t\t'ufixed184x32',\n\t\t'ufixed184x40',\n\t\t'ufixed184x48',\n\t\t'ufixed184x56',\n\t\t'ufixed184x64',\n\t\t'ufixed184x72',\n\t\t'ufixed192x8',\n\t\t'ufixed192x16',\n\t\t'ufixed192x24',\n\t\t'ufixed192x32',\n\t\t'ufixed192x40',\n\t\t'ufixed192x48',\n\t\t'ufixed192x56',\n\t\t'ufixed192x64',\n\t\t'ufixed200x8',\n\t\t'ufixed200x16',\n\t\t'ufixed200x24',\n\t\t'ufixed200x32',\n\t\t'ufixed200x40',\n\t\t'ufixed200x48',\n\t\t'ufixed200x56',\n\t\t'ufixed208x8',\n\t\t'ufixed208x16',\n\t\t'ufixed208x24',\n\t\t'ufixed208x32',\n\t\t'ufixed208x40',\n\t\t'ufixed208x48',\n\t\t'ufixed216x8',\n\t\t'ufixed216x16',\n\t\t'ufixed216x24',\n\t\t'ufixed216x32',\n\t\t'ufixed216x40',\n\t\t'ufixed224x8',\n\t\t'ufixed224x16',\n\t\t'ufixed224x24',\n\t\t'ufixed224x32',\n\t\t'ufixed232x8',\n\t\t'ufixed232x16',\n\t\t'ufixed232x24',\n\t\t'ufixed240x8',\n\t\t'ufixed240x16',\n\t\t'ufixed248x8',\n\t\t'event',\n\t\t'enum',\n\t\t'let',\n\t\t'mapping',\n\t\t'private',\n\t\t'public',\n\t\t'external',\n\t\t'inherited',\n\t\t'payable',\n\t\t'true',\n\t\t'false',\n\t\t'var',\n\t\t'import',\n\t\t'constant',\n\t\t'if',\n\t\t'else',\n\t\t'for',\n\t\t'else',\n\t\t'for',\n\t\t'while',\n\t\t'do',\n\t\t'break',\n\t\t'continue',\n\t\t'throw',\n\t\t'returns',\n\t\t'return',\n\t\t'suicide',\n\t\t'new',\n\t\t'is',\n\t\t'this',\n\t\t'super'\n\t],\n\n\toperators: [\n\t\t'=',\n\t\t'>',\n\t\t'<',\n\t\t'!',\n\t\t'~',\n\t\t'?',\n\t\t':',\n\t\t'==',\n\t\t'<=',\n\t\t'>=',\n\t\t'!=',\n\t\t'&&',\n\t\t'||',\n\t\t'++',\n\t\t'--',\n\t\t'+',\n\t\t'-',\n\t\t'*',\n\t\t'/',\n\t\t'&',\n\t\t'|',\n\t\t'^',\n\t\t'%',\n\t\t'<<',\n\t\t'>>',\n\t\t'>>>',\n\t\t'+=',\n\t\t'-=',\n\t\t'*=',\n\t\t'/=',\n\t\t'&=',\n\t\t'|=',\n\t\t'^=',\n\t\t'%=',\n\t\t'<<=',\n\t\t'>>=',\n\t\t'>>>='\n\t],\n\n\t// we include these common regular expressions\n\tsymbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n\tescapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n\tintegersuffix: /(ll|LL|u|U|l|L)?(ll|LL|u|U|l|L)?/,\n\tfloatsuffix: /[fFlL]?/,\n\n\t// The main tokenizer for our languages\n\ttokenizer: {\n\t\troot: [\n\t\t\t// identifiers and keywords\n\t\t\t[\n\t\t\t\t/[a-zA-Z_]\\w*/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@keywords': { token: 'keyword.$0' },\n\t\t\t\t\t\t'@default': 'identifier'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t// whitespace\n\t\t\t{ include: '@whitespace' },\n\n\t\t\t// [[ attributes ]].\n\t\t\t[/\\[\\[.*\\]\\]/, 'annotation'],\n\n\t\t\t// Preprocessor directive\n\t\t\t[/^\\s*#\\w+/, 'keyword'],\n\n\t\t\t//DataTypes\n\t\t\t[/int\\d*/, 'keyword'],\n\n\t\t\t// delimiters and operators\n\t\t\t[/[{}()\\[\\]]/, '@brackets'],\n\t\t\t[/[<>](?!@symbols)/, '@brackets'],\n\t\t\t[\n\t\t\t\t/@symbols/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@operators': 'delimiter',\n\t\t\t\t\t\t'@default': ''\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t// numbers\n\t\t\t[/\\d*\\d+[eE]([\\-+]?\\d+)?(@floatsuffix)/, 'number.float'],\n\t\t\t[/\\d*\\.\\d+([eE][\\-+]?\\d+)?(@floatsuffix)/, 'number.float'],\n\t\t\t[/0[xX][0-9a-fA-F']*[0-9a-fA-F](@integersuffix)/, 'number.hex'],\n\t\t\t[/0[0-7']*[0-7](@integersuffix)/, 'number.octal'],\n\t\t\t[/0[bB][0-1']*[0-1](@integersuffix)/, 'number.binary'],\n\t\t\t[/\\d[\\d']*\\d(@integersuffix)/, 'number'],\n\t\t\t[/\\d(@integersuffix)/, 'number'],\n\n\t\t\t// delimiter: after number because of .\\d floats\n\t\t\t[/[;,.]/, 'delimiter'],\n\n\t\t\t// strings\n\t\t\t[/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'], // non-teminated string\n\t\t\t[/\"/, 'string', '@string'],\n\n\t\t\t// characters\n\t\t\t[/'[^\\\\']'/, 'string'],\n\t\t\t[/(')(@escapes)(')/, ['string', 'string.escape', 'string']],\n\t\t\t[/'/, 'string.invalid']\n\t\t],\n\n\t\twhitespace: [\n\t\t\t[/[ \\t\\r\\n]+/, ''],\n\t\t\t[/\\/\\*\\*(?!\\/)/, 'comment.doc', '@doccomment'],\n\t\t\t[/\\/\\*/, 'comment', '@comment'],\n\t\t\t[/\\/\\/.*$/, 'comment']\n\t\t],\n\n\t\tcomment: [\n\t\t\t[/[^\\/*]+/, 'comment'],\n\t\t\t[/\\*\\//, 'comment', '@pop'],\n\t\t\t[/[\\/*]/, 'comment']\n\t\t],\n\t\t//Identical copy of comment above, except for the addition of .doc\n\t\tdoccomment: [\n\t\t\t[/[^\\/*]+/, 'comment.doc'],\n\t\t\t[/\\*\\//, 'comment.doc', '@pop'],\n\t\t\t[/[\\/*]/, 'comment.doc']\n\t\t],\n\n\t\tstring: [\n\t\t\t[/[^\\\\\"]+/, 'string'],\n\t\t\t[/@escapes/, 'string.escape'],\n\t\t\t[/\\\\./, 'string.escape.invalid'],\n\t\t\t[/\"/, 'string', '@pop']\n\t\t]\n\t}\n}",
  "sophia": "<languages.IMonarchLanguage>{\n\tdefaultToken: '',\n\ttokenPostfix: '.aes',\n\n\tbrackets: [\n\t\t{ token: 'delimiter.curly', open: '{', close: '}' },\n\t\t{ token: 'delimiter.parenthesis', open: '(', close: ')' },\n\t\t{ token: 'delimiter.square', open: '[', close: ']' },\n\t\t{ token: 'delimiter.angle', open: '<', close: '>' }\n\t],\n\n\tkeywords: [\n\t\t// Main keywords\n\t\t'contract',\n\t\t'library',\n\t\t'entrypoint',\n\t\t'function',\n\t\t'stateful',\n\t\t'state',\n\t\t'hash',\n\t\t'signature',\n\t\t'tuple',\n\t\t'list',\n\t\t'address',\n\t\t'string',\n\t\t'bool',\n\t\t'int',\n\t\t'record',\n\t\t'datatype',\n\t\t'type',\n\t\t'option',\n\t\t'oracle',\n\t\t'oracle_query',\n\t\t'Call',\n\t\t'Bits',\n\t\t'Bytes',\n\t\t'Oracle',\n\t\t'String',\n\t\t'Crypto',\n\t\t'Address',\n\t\t'Auth',\n\t\t'Chain',\n\t\t'None',\n\t\t'Some',\n\t\t'bits',\n\t\t'bytes',\n\t\t'event',\n\t\t'let',\n\t\t'map',\n\t\t'private',\n\t\t'public',\n\t\t'true',\n\t\t'false',\n\t\t'var',\n\t\t'if',\n\t\t'else',\n\t\t'throw'\n\t],\n\n\toperators: [\n\t\t'=',\n\t\t'>',\n\t\t'<',\n\t\t'!',\n\t\t'~',\n\t\t'?',\n\t\t'::',\n\t\t':',\n\t\t'==',\n\t\t'<=',\n\t\t'>=',\n\t\t'!=',\n\t\t'&&',\n\t\t'||',\n\t\t'++',\n\t\t'--',\n\t\t'+',\n\t\t'-',\n\t\t'*',\n\t\t'/',\n\t\t'&',\n\t\t'|',\n\t\t'^',\n\t\t'%',\n\t\t'<<',\n\t\t'>>',\n\t\t'>>>',\n\t\t'+=',\n\t\t'-=',\n\t\t'*=',\n\t\t'/=',\n\t\t'&=',\n\t\t'|=',\n\t\t'^=',\n\t\t'%=',\n\t\t'<<=',\n\t\t'>>=',\n\t\t'>>>='\n\t],\n\n\t// we include these common regular expressions\n\tsymbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n\tescapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n\tintegersuffix: /(ll|LL|u|U|l|L)?(ll|LL|u|U|l|L)?/,\n\tfloatsuffix: /[fFlL]?/,\n\n\t// The main tokenizer for our languages\n\ttokenizer: {\n\t\troot: [\n\t\t\t// identifiers and keywords\n\t\t\t[\n\t\t\t\t/[a-zA-Z_]\\w*/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@keywords': { token: 'keyword.$0' },\n\t\t\t\t\t\t'@default': 'identifier'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t// whitespace\n\t\t\t{ include: '@whitespace' },\n\n\t\t\t// [[ attributes ]].\n\t\t\t[/\\[\\[.*\\]\\]/, 'annotation'],\n\n\t\t\t// Preprocessor directive\n\t\t\t[/^\\s*#\\w+/, 'keyword'],\n\n\t\t\t//DataTypes\n\t\t\t[/int\\d*/, 'keyword'],\n\n\t\t\t// delimiters and operators\n\t\t\t[/[{}()\\[\\]]/, '@brackets'],\n\t\t\t[/[<>](?!@symbols)/, '@brackets'],\n\t\t\t[\n\t\t\t\t/@symbols/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@operators': 'delimiter',\n\t\t\t\t\t\t'@default': ''\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t// numbers\n\t\t\t[/\\d*\\d+[eE]([\\-+]?\\d+)?(@floatsuffix)/, 'number.float'],\n\t\t\t[/\\d*\\.\\d+([eE][\\-+]?\\d+)?(@floatsuffix)/, 'number.float'],\n\t\t\t[/0[xX][0-9a-fA-F']*[0-9a-fA-F](@integersuffix)/, 'number.hex'],\n\t\t\t[/0[0-7']*[0-7](@integersuffix)/, 'number.octal'],\n\t\t\t[/0[bB][0-1']*[0-1](@integersuffix)/, 'number.binary'],\n\t\t\t[/\\d[\\d']*\\d(@integersuffix)/, 'number'],\n\t\t\t[/\\d(@integersuffix)/, 'number'],\n\n\t\t\t// delimiter: after number because of .\\d floats\n\t\t\t[/[;,.]/, 'delimiter'],\n\n\t\t\t// strings\n\t\t\t[/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'], // non-teminated string\n\t\t\t[/\"/, 'string', '@string'],\n\n\t\t\t// characters\n\t\t\t[/'[^\\\\']'/, 'string'],\n\t\t\t[/(')(@escapes)(')/, ['string', 'string.escape', 'string']],\n\t\t\t[/'/, 'string.invalid']\n\t\t],\n\n\t\twhitespace: [\n\t\t\t[/[ \\t\\r\\n]+/, ''],\n\t\t\t[/\\/\\*\\*(?!\\/)/, 'comment.doc', '@doccomment'],\n\t\t\t[/\\/\\*/, 'comment', '@comment'],\n\t\t\t[/\\/\\/.*$/, 'comment']\n\t\t],\n\n\t\tcomment: [\n\t\t\t[/[^\\/*]+/, 'comment'],\n\t\t\t[/\\*\\//, 'comment', '@pop'],\n\t\t\t[/[\\/*]/, 'comment']\n\t\t],\n\t\t//Identical copy of comment above, except for the addition of .doc\n\t\tdoccomment: [\n\t\t\t[/[^\\/*]+/, 'comment.doc'],\n\t\t\t[/\\*\\//, 'comment.doc', '@pop'],\n\t\t\t[/[\\/*]/, 'comment.doc']\n\t\t],\n\n\t\tstring: [\n\t\t\t[/[^\\\\\"]+/, 'string'],\n\t\t\t[/@escapes/, 'string.escape'],\n\t\t\t[/\\\\./, 'string.escape.invalid'],\n\t\t\t[/\"/, 'string', '@pop']\n\t\t]\n\t}\n}",
  "sparql": "<languages.IMonarchLanguage>{\n\tdefaultToken: '',\n\ttokenPostfix: '.rq',\n\n\tbrackets: [\n\t\t{ token: 'delimiter.curly', open: '{', close: '}' },\n\t\t{ token: 'delimiter.parenthesis', open: '(', close: ')' },\n\t\t{ token: 'delimiter.square', open: '[', close: ']' },\n\t\t{ token: 'delimiter.angle', open: '<', close: '>' }\n\t],\n\n\tkeywords: [\n\t\t'add',\n\t\t'as',\n\t\t'asc',\n\t\t'ask',\n\t\t'base',\n\t\t'by',\n\t\t'clear',\n\t\t'construct',\n\t\t'copy',\n\t\t'create',\n\t\t'data',\n\t\t'delete',\n\t\t'desc',\n\t\t'describe',\n\t\t'distinct',\n\t\t'drop',\n\t\t'false',\n\t\t'filter',\n\t\t'from',\n\t\t'graph',\n\t\t'group',\n\t\t'having',\n\t\t'in',\n\t\t'insert',\n\t\t'limit',\n\t\t'load',\n\t\t'minus',\n\t\t'move',\n\t\t'named',\n\t\t'not',\n\t\t'offset',\n\t\t'optional',\n\t\t'order',\n\t\t'prefix',\n\t\t'reduced',\n\t\t'select',\n\t\t'service',\n\t\t'silent',\n\t\t'to',\n\t\t'true',\n\t\t'undef',\n\t\t'union',\n\t\t'using',\n\t\t'values',\n\t\t'where',\n\t\t'with'\n\t],\n\n\tbuiltinFunctions: [\n\t\t'a',\n\t\t'abs',\n\t\t'avg',\n\t\t'bind',\n\t\t'bnode',\n\t\t'bound',\n\t\t'ceil',\n\t\t'coalesce',\n\t\t'concat',\n\t\t'contains',\n\t\t'count',\n\t\t'datatype',\n\t\t'day',\n\t\t'encode_for_uri',\n\t\t'exists',\n\t\t'floor',\n\t\t'group_concat',\n\t\t'hours',\n\t\t'if',\n\t\t'iri',\n\t\t'isblank',\n\t\t'isiri',\n\t\t'isliteral',\n\t\t'isnumeric',\n\t\t'isuri',\n\t\t'lang',\n\t\t'langmatches',\n\t\t'lcase',\n\t\t'max',\n\t\t'md5',\n\t\t'min',\n\t\t'minutes',\n\t\t'month',\n\t\t'now',\n\t\t'rand',\n\t\t'regex',\n\t\t'replace',\n\t\t'round',\n\t\t'sameterm',\n\t\t'sample',\n\t\t'seconds',\n\t\t'sha1',\n\t\t'sha256',\n\t\t'sha384',\n\t\t'sha512',\n\t\t'str',\n\t\t'strafter',\n\t\t'strbefore',\n\t\t'strdt',\n\t\t'strends',\n\t\t'strlang',\n\t\t'strlen',\n\t\t'strstarts',\n\t\t'struuid',\n\t\t'substr',\n\t\t'sum',\n\t\t'timezone',\n\t\t'tz',\n\t\t'ucase',\n\t\t'uri',\n\t\t'uuid',\n\t\t'year'\n\t],\n\n\t// describe tokens\n\tignoreCase: true,\n\ttokenizer: {\n\t\troot: [\n\t\t\t// resource indicators\n\t\t\t[/<[^\\s\\u00a0>]*>?/, 'tag'],\n\n\t\t\t// strings\n\t\t\t{ include: '@strings' },\n\n\t\t\t// line comment\n\t\t\t[/#.*/, 'comment'],\n\n\t\t\t// special chars with special meaning\n\t\t\t[/[{}()\\[\\]]/, '@brackets'],\n\t\t\t[/[;,.]/, 'delimiter'],\n\n\t\t\t// (prefixed) name\n\t\t\t[/[_\\w\\d]+:(\\.(?=[\\w_\\-\\\\%])|[:\\w_-]|\\\\[-\\\\_~.!$&'()*+,;=/?#@%]|%[a-f\\d][a-f\\d])*/, 'tag'],\n\t\t\t[/:(\\.(?=[\\w_\\-\\\\%])|[:\\w_-]|\\\\[-\\\\_~.!$&'()*+,;=/?#@%]|%[a-f\\d][a-f\\d])+/, 'tag'],\n\n\t\t\t// identifiers, builtinFunctions and keywords\n\t\t\t[\n\t\t\t\t/[$?]?[_\\w\\d]+/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@keywords': { token: 'keyword' },\n\t\t\t\t\t\t'@builtinFunctions': { token: 'predefined.sql' },\n\t\t\t\t\t\t'@default': 'identifier'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t// operators\n\t\t\t[/\\^\\^/, 'operator.sql'],\n\t\t\t[/\\^[*+\\-<>=&|^\\/!?]*/, 'operator.sql'],\n\t\t\t[/[*+\\-<>=&|\\/!?]/, 'operator.sql'],\n\n\t\t\t// symbol\n\t\t\t[/@[a-z\\d\\-]*/, 'metatag.html'],\n\n\t\t\t// whitespaces\n\t\t\t[/\\s+/, 'white']\n\t\t],\n\n\t\tstrings: [\n\t\t\t[/'([^'\\\\]|\\\\.)*$/, 'string.invalid'], // non-terminated single-quoted string\n\t\t\t[/'$/, 'string.sql', '@pop'],\n\t\t\t[/'/, 'string.sql', '@stringBody'],\n\t\t\t[/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'], // non-terminated single-quoted string\n\t\t\t[/\"$/, 'string.sql', '@pop'],\n\t\t\t[/\"/, 'string.sql', '@dblStringBody']\n\t\t],\n\t\t// single-quoted strings\n\t\tstringBody: [\n\t\t\t[/[^\\\\']+/, 'string.sql'],\n\t\t\t[/\\\\./, 'string.escape'],\n\t\t\t[/'/, 'string.sql', '@pop']\n\t\t],\n\t\t// double-quoted strings\n\t\tdblStringBody: [\n\t\t\t[/[^\\\\\"]+/, 'string.sql'],\n\t\t\t[/\\\\./, 'string.escape'],\n\t\t\t[/\"/, 'string.sql', '@pop']\n\t\t]\n\t}\n}",
  "sql": "<languages.IMonarchLanguage>{\n\tdefaultToken: '',\n\ttokenPostfix: '.sql',\n\tignoreCase: true,\n\n\tbrackets: [\n\t\t{ open: '[', close: ']', token: 'delimiter.square' },\n\t\t{ open: '(', close: ')', token: 'delimiter.parenthesis' }\n\t],\n\n\tkeywords: [\n\t\t// This list is generated using `keywords.js`\n\t\t'ABORT',\n\t\t'ABSOLUTE',\n\t\t'ACTION',\n\t\t'ADA',\n\t\t'ADD',\n\t\t'AFTER',\n\t\t'ALL',\n\t\t'ALLOCATE',\n\t\t'ALTER',\n\t\t'ALWAYS',\n\t\t'ANALYZE',\n\t\t'AND',\n\t\t'ANY',\n\t\t'ARE',\n\t\t'AS',\n\t\t'ASC',\n\t\t'ASSERTION',\n\t\t'AT',\n\t\t'ATTACH',\n\t\t'AUTHORIZATION',\n\t\t'AUTOINCREMENT',\n\t\t'AVG',\n\t\t'BACKUP',\n\t\t'BEFORE',\n\t\t'BEGIN',\n\t\t'BETWEEN',\n\t\t'BIT',\n\t\t'BIT_LENGTH',\n\t\t'BOTH',\n\t\t'BREAK',\n\t\t'BROWSE',\n\t\t'BULK',\n\t\t'BY',\n\t\t'CASCADE',\n\t\t'CASCADED',\n\t\t'CASE',\n\t\t'CAST',\n\t\t'CATALOG',\n\t\t'CHAR',\n\t\t'CHARACTER',\n\t\t'CHARACTER_LENGTH',\n\t\t'CHAR_LENGTH',\n\t\t'CHECK',\n\t\t'CHECKPOINT',\n\t\t'CLOSE',\n\t\t'CLUSTERED',\n\t\t'COALESCE',\n\t\t'COLLATE',\n\t\t'COLLATION',\n\t\t'COLUMN',\n\t\t'COMMIT',\n\t\t'COMPUTE',\n\t\t'CONFLICT',\n\t\t'CONNECT',\n\t\t'CONNECTION',\n\t\t'CONSTRAINT',\n\t\t'CONSTRAINTS',\n\t\t'CONTAINS',\n\t\t'CONTAINSTABLE',\n\t\t'CONTINUE',\n\t\t'CONVERT',\n\t\t'CORRESPONDING',\n\t\t'COUNT',\n\t\t'CREATE',\n\t\t'CROSS',\n\t\t'CURRENT',\n\t\t'CURRENT_DATE',\n\t\t'CURRENT_TIME',\n\t\t'CURRENT_TIMESTAMP',\n\t\t'CURRENT_USER',\n\t\t'CURSOR',\n\t\t'DATABASE',\n\t\t'DATE',\n\t\t'DAY',\n\t\t'DBCC',\n\t\t'DEALLOCATE',\n\t\t'DEC',\n\t\t'DECIMAL',\n\t\t'DECLARE',\n\t\t'DEFAULT',\n\t\t'DEFERRABLE',\n\t\t'DEFERRED',\n\t\t'DELETE',\n\t\t'DENY',\n\t\t'DESC',\n\t\t'DESCRIBE',\n\t\t'DESCRIPTOR',\n\t\t'DETACH',\n\t\t'DIAGNOSTICS',\n\t\t'DISCONNECT',\n\t\t'DISK',\n\t\t'DISTINCT',\n\t\t'DISTRIBUTED',\n\t\t'DO',\n\t\t'DOMAIN',\n\t\t'DOUBLE',\n\t\t'DROP',\n\t\t'DUMP',\n\t\t'EACH',\n\t\t'ELSE',\n\t\t'END',\n\t\t'END-EXEC',\n\t\t'ERRLVL',\n\t\t'ESCAPE',\n\t\t'EXCEPT',\n\t\t'EXCEPTION',\n\t\t'EXCLUDE',\n\t\t'EXCLUSIVE',\n\t\t'EXEC',\n\t\t'EXECUTE',\n\t\t'EXISTS',\n\t\t'EXIT',\n\t\t'EXPLAIN',\n\t\t'EXTERNAL',\n\t\t'EXTRACT',\n\t\t'FAIL',\n\t\t'FALSE',\n\t\t'FETCH',\n\t\t'FILE',\n\t\t'FILLFACTOR',\n\t\t'FILTER',\n\t\t'FIRST',\n\t\t'FLOAT',\n\t\t'FOLLOWING',\n\t\t'FOR',\n\t\t'FOREIGN',\n\t\t'FORTRAN',\n\t\t'FOUND',\n\t\t'FREETEXT',\n\t\t'FREETEXTTABLE',\n\t\t'FROM',\n\t\t'FULL',\n\t\t'FUNCTION',\n\t\t'GENERATED',\n\t\t'GET',\n\t\t'GLOB',\n\t\t'GLOBAL',\n\t\t'GO',\n\t\t'GOTO',\n\t\t'GRANT',\n\t\t'GROUP',\n\t\t'GROUPS',\n\t\t'HAVING',\n\t\t'HOLDLOCK',\n\t\t'HOUR',\n\t\t'IDENTITY',\n\t\t'IDENTITYCOL',\n\t\t'IDENTITY_INSERT',\n\t\t'IF',\n\t\t'IGNORE',\n\t\t'IMMEDIATE',\n\t\t'IN',\n\t\t'INCLUDE',\n\t\t'INDEX',\n\t\t'INDEXED',\n\t\t'INDICATOR',\n\t\t'INITIALLY',\n\t\t'INNER',\n\t\t'INPUT',\n\t\t'INSENSITIVE',\n\t\t'INSERT',\n\t\t'INSTEAD',\n\t\t'INT',\n\t\t'INTEGER',\n\t\t'INTERSECT',\n\t\t'INTERVAL',\n\t\t'INTO',\n\t\t'IS',\n\t\t'ISNULL',\n\t\t'ISOLATION',\n\t\t'JOIN',\n\t\t'KEY',\n\t\t'KILL',\n\t\t'LANGUAGE',\n\t\t'LAST',\n\t\t'LEADING',\n\t\t'LEFT',\n\t\t'LEVEL',\n\t\t'LIKE',\n\t\t'LIMIT',\n\t\t'LINENO',\n\t\t'LOAD',\n\t\t'LOCAL',\n\t\t'LOWER',\n\t\t'MATCH',\n\t\t'MATERIALIZED',\n\t\t'MAX',\n\t\t'MERGE',\n\t\t'MIN',\n\t\t'MINUTE',\n\t\t'MODULE',\n\t\t'MONTH',\n\t\t'NAMES',\n\t\t'NATIONAL',\n\t\t'NATURAL',\n\t\t'NCHAR',\n\t\t'NEXT',\n\t\t'NO',\n\t\t'NOCHECK',\n\t\t'NONCLUSTERED',\n\t\t'NONE',\n\t\t'NOT',\n\t\t'NOTHING',\n\t\t'NOTNULL',\n\t\t'NULL',\n\t\t'NULLIF',\n\t\t'NULLS',\n\t\t'NUMERIC',\n\t\t'OCTET_LENGTH',\n\t\t'OF',\n\t\t'OFF',\n\t\t'OFFSET',\n\t\t'OFFSETS',\n\t\t'ON',\n\t\t'ONLY',\n\t\t'OPEN',\n\t\t'OPENDATASOURCE',\n\t\t'OPENQUERY',\n\t\t'OPENROWSET',\n\t\t'OPENXML',\n\t\t'OPTION',\n\t\t'OR',\n\t\t'ORDER',\n\t\t'OTHERS',\n\t\t'OUTER',\n\t\t'OUTPUT',\n\t\t'OVER',\n\t\t'OVERLAPS',\n\t\t'PAD',\n\t\t'PARTIAL',\n\t\t'PARTITION',\n\t\t'PASCAL',\n\t\t'PERCENT',\n\t\t'PIVOT',\n\t\t'PLAN',\n\t\t'POSITION',\n\t\t'PRAGMA',\n\t\t'PRECEDING',\n\t\t'PRECISION',\n\t\t'PREPARE',\n\t\t'PRESERVE',\n\t\t'PRIMARY',\n\t\t'PRINT',\n\t\t'PRIOR',\n\t\t'PRIVILEGES',\n\t\t'PROC',\n\t\t'PROCEDURE',\n\t\t'PUBLIC',\n\t\t'QUERY',\n\t\t'RAISE',\n\t\t'RAISERROR',\n\t\t'RANGE',\n\t\t'READ',\n\t\t'READTEXT',\n\t\t'REAL',\n\t\t'RECONFIGURE',\n\t\t'RECURSIVE',\n\t\t'REFERENCES',\n\t\t'REGEXP',\n\t\t'REINDEX',\n\t\t'RELATIVE',\n\t\t'RELEASE',\n\t\t'RENAME',\n\t\t'REPLACE',\n\t\t'REPLICATION',\n\t\t'RESTORE',\n\t\t'RESTRICT',\n\t\t'RETURN',\n\t\t'RETURNING',\n\t\t'REVERT',\n\t\t'REVOKE',\n\t\t'RIGHT',\n\t\t'ROLLBACK',\n\t\t'ROW',\n\t\t'ROWCOUNT',\n\t\t'ROWGUIDCOL',\n\t\t'ROWS',\n\t\t'RULE',\n\t\t'SAVE',\n\t\t'SAVEPOINT',\n\t\t'SCHEMA',\n\t\t'SCROLL',\n\t\t'SECOND',\n\t\t'SECTION',\n\t\t'SECURITYAUDIT',\n\t\t'SELECT',\n\t\t'SEMANTICKEYPHRASETABLE',\n\t\t'SEMANTICSIMILARITYDETAILSTABLE',\n\t\t'SEMANTICSIMILARITYTABLE',\n\t\t'SESSION',\n\t\t'SESSION_USER',\n\t\t'SET',\n\t\t'SETUSER',\n\t\t'SHUTDOWN',\n\t\t'SIZE',\n\t\t'SMALLINT',\n\t\t'SOME',\n\t\t'SPACE',\n\t\t'SQL',\n\t\t'SQLCA',\n\t\t'SQLCODE',\n\t\t'SQLERROR',\n\t\t'SQLSTATE',\n\t\t'SQLWARNING',\n\t\t'STATISTICS',\n\t\t'SUBSTRING',\n\t\t'SUM',\n\t\t'SYSTEM_USER',\n\t\t'TABLE',\n\t\t'TABLESAMPLE',\n\t\t'TEMP',\n\t\t'TEMPORARY',\n\t\t'TEXTSIZE',\n\t\t'THEN',\n\t\t'TIES',\n\t\t'TIME',\n\t\t'TIMESTAMP',\n\t\t'TIMEZONE_HOUR',\n\t\t'TIMEZONE_MINUTE',\n\t\t'TO',\n\t\t'TOP',\n\t\t'TRAILING',\n\t\t'TRAN',\n\t\t'TRANSACTION',\n\t\t'TRANSLATE',\n\t\t'TRANSLATION',\n\t\t'TRIGGER',\n\t\t'TRIM',\n\t\t'TRUE',\n\t\t'TRUNCATE',\n\t\t'TRY_CONVERT',\n\t\t'TSEQUAL',\n\t\t'UNBOUNDED',\n\t\t'UNION',\n\t\t'UNIQUE',\n\t\t'UNKNOWN',\n\t\t'UNPIVOT',\n\t\t'UPDATE',\n\t\t'UPDATETEXT',\n\t\t'UPPER',\n\t\t'USAGE',\n\t\t'USE',\n\t\t'USER',\n\t\t'USING',\n\t\t'VACUUM',\n\t\t'VALUE',\n\t\t'VALUES',\n\t\t'VARCHAR',\n\t\t'VARYING',\n\t\t'VIEW',\n\t\t'VIRTUAL',\n\t\t'WAITFOR',\n\t\t'WHEN',\n\t\t'WHENEVER',\n\t\t'WHERE',\n\t\t'WHILE',\n\t\t'WINDOW',\n\t\t'WITH',\n\t\t'WITHIN GROUP',\n\t\t'WITHOUT',\n\t\t'WORK',\n\t\t'WRITE',\n\t\t'WRITETEXT',\n\t\t'YEAR',\n\t\t'ZONE'\n\t],\n\toperators: [\n\t\t// Logical\n\t\t'ALL',\n\t\t'AND',\n\t\t'ANY',\n\t\t'BETWEEN',\n\t\t'EXISTS',\n\t\t'IN',\n\t\t'LIKE',\n\t\t'NOT',\n\t\t'OR',\n\t\t'SOME',\n\t\t// Set\n\t\t'EXCEPT',\n\t\t'INTERSECT',\n\t\t'UNION',\n\t\t// Join\n\t\t'APPLY',\n\t\t'CROSS',\n\t\t'FULL',\n\t\t'INNER',\n\t\t'JOIN',\n\t\t'LEFT',\n\t\t'OUTER',\n\t\t'RIGHT',\n\t\t// Predicates\n\t\t'CONTAINS',\n\t\t'FREETEXT',\n\t\t'IS',\n\t\t'NULL',\n\t\t// Pivoting\n\t\t'PIVOT',\n\t\t'UNPIVOT',\n\t\t// Merging\n\t\t'MATCHED'\n\t],\n\tbuiltinFunctions: [\n\t\t// Aggregate\n\t\t'AVG',\n\t\t'CHECKSUM_AGG',\n\t\t'COUNT',\n\t\t'COUNT_BIG',\n\t\t'GROUPING',\n\t\t'GROUPING_ID',\n\t\t'MAX',\n\t\t'MIN',\n\t\t'SUM',\n\t\t'STDEV',\n\t\t'STDEVP',\n\t\t'VAR',\n\t\t'VARP',\n\t\t// Analytic\n\t\t'CUME_DIST',\n\t\t'FIRST_VALUE',\n\t\t'LAG',\n\t\t'LAST_VALUE',\n\t\t'LEAD',\n\t\t'PERCENTILE_CONT',\n\t\t'PERCENTILE_DISC',\n\t\t'PERCENT_RANK',\n\t\t// Collation\n\t\t'COLLATE',\n\t\t'COLLATIONPROPERTY',\n\t\t'TERTIARY_WEIGHTS',\n\t\t// Azure\n\t\t'FEDERATION_FILTERING_VALUE',\n\t\t// Conversion\n\t\t'CAST',\n\t\t'CONVERT',\n\t\t'PARSE',\n\t\t'TRY_CAST',\n\t\t'TRY_CONVERT',\n\t\t'TRY_PARSE',\n\t\t// Cryptographic\n\t\t'ASYMKEY_ID',\n\t\t'ASYMKEYPROPERTY',\n\t\t'CERTPROPERTY',\n\t\t'CERT_ID',\n\t\t'CRYPT_GEN_RANDOM',\n\t\t'DECRYPTBYASYMKEY',\n\t\t'DECRYPTBYCERT',\n\t\t'DECRYPTBYKEY',\n\t\t'DECRYPTBYKEYAUTOASYMKEY',\n\t\t'DECRYPTBYKEYAUTOCERT',\n\t\t'DECRYPTBYPASSPHRASE',\n\t\t'ENCRYPTBYASYMKEY',\n\t\t'ENCRYPTBYCERT',\n\t\t'ENCRYPTBYKEY',\n\t\t'ENCRYPTBYPASSPHRASE',\n\t\t'HASHBYTES',\n\t\t'IS_OBJECTSIGNED',\n\t\t'KEY_GUID',\n\t\t'KEY_ID',\n\t\t'KEY_NAME',\n\t\t'SIGNBYASYMKEY',\n\t\t'SIGNBYCERT',\n\t\t'SYMKEYPROPERTY',\n\t\t'VERIFYSIGNEDBYCERT',\n\t\t'VERIFYSIGNEDBYASYMKEY',\n\t\t// Cursor\n\t\t'CURSOR_STATUS',\n\t\t// Datatype\n\t\t'DATALENGTH',\n\t\t'IDENT_CURRENT',\n\t\t'IDENT_INCR',\n\t\t'IDENT_SEED',\n\t\t'IDENTITY',\n\t\t'SQL_VARIANT_PROPERTY',\n\t\t// Datetime\n\t\t'CURRENT_TIMESTAMP',\n\t\t'DATEADD',\n\t\t'DATEDIFF',\n\t\t'DATEFROMPARTS',\n\t\t'DATENAME',\n\t\t'DATEPART',\n\t\t'DATETIME2FROMPARTS',\n\t\t'DATETIMEFROMPARTS',\n\t\t'DATETIMEOFFSETFROMPARTS',\n\t\t'DAY',\n\t\t'EOMONTH',\n\t\t'GETDATE',\n\t\t'GETUTCDATE',\n\t\t'ISDATE',\n\t\t'MONTH',\n\t\t'SMALLDATETIMEFROMPARTS',\n\t\t'SWITCHOFFSET',\n\t\t'SYSDATETIME',\n\t\t'SYSDATETIMEOFFSET',\n\t\t'SYSUTCDATETIME',\n\t\t'TIMEFROMPARTS',\n\t\t'TODATETIMEOFFSET',\n\t\t'YEAR',\n\t\t// Logical\n\t\t'CHOOSE',\n\t\t'COALESCE',\n\t\t'IIF',\n\t\t'NULLIF',\n\t\t// Mathematical\n\t\t'ABS',\n\t\t'ACOS',\n\t\t'ASIN',\n\t\t'ATAN',\n\t\t'ATN2',\n\t\t'CEILING',\n\t\t'COS',\n\t\t'COT',\n\t\t'DEGREES',\n\t\t'EXP',\n\t\t'FLOOR',\n\t\t'LOG',\n\t\t'LOG10',\n\t\t'PI',\n\t\t'POWER',\n\t\t'RADIANS',\n\t\t'RAND',\n\t\t'ROUND',\n\t\t'SIGN',\n\t\t'SIN',\n\t\t'SQRT',\n\t\t'SQUARE',\n\t\t'TAN',\n\t\t// Metadata\n\t\t'APP_NAME',\n\t\t'APPLOCK_MODE',\n\t\t'APPLOCK_TEST',\n\t\t'ASSEMBLYPROPERTY',\n\t\t'COL_LENGTH',\n\t\t'COL_NAME',\n\t\t'COLUMNPROPERTY',\n\t\t'DATABASE_PRINCIPAL_ID',\n\t\t'DATABASEPROPERTYEX',\n\t\t'DB_ID',\n\t\t'DB_NAME',\n\t\t'FILE_ID',\n\t\t'FILE_IDEX',\n\t\t'FILE_NAME',\n\t\t'FILEGROUP_ID',\n\t\t'FILEGROUP_NAME',\n\t\t'FILEGROUPPROPERTY',\n\t\t'FILEPROPERTY',\n\t\t'FULLTEXTCATALOGPROPERTY',\n\t\t'FULLTEXTSERVICEPROPERTY',\n\t\t'INDEX_COL',\n\t\t'INDEXKEY_PROPERTY',\n\t\t'INDEXPROPERTY',\n\t\t'OBJECT_DEFINITION',\n\t\t'OBJECT_ID',\n\t\t'OBJECT_NAME',\n\t\t'OBJECT_SCHEMA_NAME',\n\t\t'OBJECTPROPERTY',\n\t\t'OBJECTPROPERTYEX',\n\t\t'ORIGINAL_DB_NAME',\n\t\t'PARSENAME',\n\t\t'SCHEMA_ID',\n\t\t'SCHEMA_NAME',\n\t\t'SCOPE_IDENTITY',\n\t\t'SERVERPROPERTY',\n\t\t'STATS_DATE',\n\t\t'TYPE_ID',\n\t\t'TYPE_NAME',\n\t\t'TYPEPROPERTY',\n\t\t// Ranking\n\t\t'DENSE_RANK',\n\t\t'NTILE',\n\t\t'RANK',\n\t\t'ROW_NUMBER',\n\t\t// Replication\n\t\t'PUBLISHINGSERVERNAME',\n\t\t// Rowset\n\t\t'OPENDATASOURCE',\n\t\t'OPENQUERY',\n\t\t'OPENROWSET',\n\t\t'OPENXML',\n\t\t// Security\n\t\t'CERTENCODED',\n\t\t'CERTPRIVATEKEY',\n\t\t'CURRENT_USER',\n\t\t'HAS_DBACCESS',\n\t\t'HAS_PERMS_BY_NAME',\n\t\t'IS_MEMBER',\n\t\t'IS_ROLEMEMBER',\n\t\t'IS_SRVROLEMEMBER',\n\t\t'LOGINPROPERTY',\n\t\t'ORIGINAL_LOGIN',\n\t\t'PERMISSIONS',\n\t\t'PWDENCRYPT',\n\t\t'PWDCOMPARE',\n\t\t'SESSION_USER',\n\t\t'SESSIONPROPERTY',\n\t\t'SUSER_ID',\n\t\t'SUSER_NAME',\n\t\t'SUSER_SID',\n\t\t'SUSER_SNAME',\n\t\t'SYSTEM_USER',\n\t\t'USER',\n\t\t'USER_ID',\n\t\t'USER_NAME',\n\t\t// String\n\t\t'ASCII',\n\t\t'CHAR',\n\t\t'CHARINDEX',\n\t\t'CONCAT',\n\t\t'DIFFERENCE',\n\t\t'FORMAT',\n\t\t'LEFT',\n\t\t'LEN',\n\t\t'LOWER',\n\t\t'LTRIM',\n\t\t'NCHAR',\n\t\t'PATINDEX',\n\t\t'QUOTENAME',\n\t\t'REPLACE',\n\t\t'REPLICATE',\n\t\t'REVERSE',\n\t\t'RIGHT',\n\t\t'RTRIM',\n\t\t'SOUNDEX',\n\t\t'SPACE',\n\t\t'STR',\n\t\t'STUFF',\n\t\t'SUBSTRING',\n\t\t'UNICODE',\n\t\t'UPPER',\n\t\t// System\n\t\t'BINARY_CHECKSUM',\n\t\t'CHECKSUM',\n\t\t'CONNECTIONPROPERTY',\n\t\t'CONTEXT_INFO',\n\t\t'CURRENT_REQUEST_ID',\n\t\t'ERROR_LINE',\n\t\t'ERROR_NUMBER',\n\t\t'ERROR_MESSAGE',\n\t\t'ERROR_PROCEDURE',\n\t\t'ERROR_SEVERITY',\n\t\t'ERROR_STATE',\n\t\t'FORMATMESSAGE',\n\t\t'GETANSINULL',\n\t\t'GET_FILESTREAM_TRANSACTION_CONTEXT',\n\t\t'HOST_ID',\n\t\t'HOST_NAME',\n\t\t'ISNULL',\n\t\t'ISNUMERIC',\n\t\t'MIN_ACTIVE_ROWVERSION',\n\t\t'NEWID',\n\t\t'NEWSEQUENTIALID',\n\t\t'ROWCOUNT_BIG',\n\t\t'XACT_STATE',\n\t\t// TextImage\n\t\t'TEXTPTR',\n\t\t'TEXTVALID',\n\t\t// Trigger\n\t\t'COLUMNS_UPDATED',\n\t\t'EVENTDATA',\n\t\t'TRIGGER_NESTLEVEL',\n\t\t'UPDATE',\n\t\t// ChangeTracking\n\t\t'CHANGETABLE',\n\t\t'CHANGE_TRACKING_CONTEXT',\n\t\t'CHANGE_TRACKING_CURRENT_VERSION',\n\t\t'CHANGE_TRACKING_IS_COLUMN_IN_MASK',\n\t\t'CHANGE_TRACKING_MIN_VALID_VERSION',\n\t\t// FullTextSearch\n\t\t'CONTAINSTABLE',\n\t\t'FREETEXTTABLE',\n\t\t// SemanticTextSearch\n\t\t'SEMANTICKEYPHRASETABLE',\n\t\t'SEMANTICSIMILARITYDETAILSTABLE',\n\t\t'SEMANTICSIMILARITYTABLE',\n\t\t// FileStream\n\t\t'FILETABLEROOTPATH',\n\t\t'GETFILENAMESPACEPATH',\n\t\t'GETPATHLOCATOR',\n\t\t'PATHNAME',\n\t\t// ServiceBroker\n\t\t'GET_TRANSMISSION_STATUS'\n\t],\n\tbuiltinVariables: [\n\t\t// Configuration\n\t\t'@@DATEFIRST',\n\t\t'@@DBTS',\n\t\t'@@LANGID',\n\t\t'@@LANGUAGE',\n\t\t'@@LOCK_TIMEOUT',\n\t\t'@@MAX_CONNECTIONS',\n\t\t'@@MAX_PRECISION',\n\t\t'@@NESTLEVEL',\n\t\t'@@OPTIONS',\n\t\t'@@REMSERVER',\n\t\t'@@SERVERNAME',\n\t\t'@@SERVICENAME',\n\t\t'@@SPID',\n\t\t'@@TEXTSIZE',\n\t\t'@@VERSION',\n\t\t// Cursor\n\t\t'@@CURSOR_ROWS',\n\t\t'@@FETCH_STATUS',\n\t\t// Datetime\n\t\t'@@DATEFIRST',\n\t\t// Metadata\n\t\t'@@PROCID',\n\t\t// System\n\t\t'@@ERROR',\n\t\t'@@IDENTITY',\n\t\t'@@ROWCOUNT',\n\t\t'@@TRANCOUNT',\n\t\t// Stats\n\t\t'@@CONNECTIONS',\n\t\t'@@CPU_BUSY',\n\t\t'@@IDLE',\n\t\t'@@IO_BUSY',\n\t\t'@@PACKET_ERRORS',\n\t\t'@@PACK_RECEIVED',\n\t\t'@@PACK_SENT',\n\t\t'@@TIMETICKS',\n\t\t'@@TOTAL_ERRORS',\n\t\t'@@TOTAL_READ',\n\t\t'@@TOTAL_WRITE'\n\t],\n\tpseudoColumns: ['$ACTION', '$IDENTITY', '$ROWGUID', '$PARTITION'],\n\ttokenizer: {\n\t\troot: [\n\t\t\t{ include: '@comments' },\n\t\t\t{ include: '@whitespace' },\n\t\t\t{ include: '@pseudoColumns' },\n\t\t\t{ include: '@numbers' },\n\t\t\t{ include: '@strings' },\n\t\t\t{ include: '@complexIdentifiers' },\n\t\t\t{ include: '@scopes' },\n\t\t\t[/[;,.]/, 'delimiter'],\n\t\t\t[/[()]/, '@brackets'],\n\t\t\t[\n\t\t\t\t/[\\w@#$]+/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@operators': 'operator',\n\t\t\t\t\t\t'@builtinVariables': 'predefined',\n\t\t\t\t\t\t'@builtinFunctions': 'predefined',\n\t\t\t\t\t\t'@keywords': 'keyword',\n\t\t\t\t\t\t'@default': 'identifier'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/[<>=!%&+\\-*/|~^]/, 'operator']\n\t\t],\n\t\twhitespace: [[/\\s+/, 'white']],\n\t\tcomments: [\n\t\t\t[/--+.*/, 'comment'],\n\t\t\t[/\\/\\*/, { token: 'comment.quote', next: '@comment' }]\n\t\t],\n\t\tcomment: [\n\t\t\t[/[^*/]+/, 'comment'],\n\t\t\t// Not supporting nested comments, as nested comments seem to not be standard?\n\t\t\t// i.e. http://stackoverflow.com/questions/728172/are-there-multiline-comment-delimiters-in-sql-that-are-vendor-agnostic\n\t\t\t// [/\\/\\*/, { token: 'comment.quote', next: '@push' }],    // nested comment not allowed :-(\n\t\t\t[/\\*\\//, { token: 'comment.quote', next: '@pop' }],\n\t\t\t[/./, 'comment']\n\t\t],\n\t\tpseudoColumns: [\n\t\t\t[\n\t\t\t\t/[$][A-Za-z_][\\w@#$]*/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@pseudoColumns': 'predefined',\n\t\t\t\t\t\t'@default': 'identifier'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t],\n\t\tnumbers: [\n\t\t\t[/0[xX][0-9a-fA-F]*/, 'number'],\n\t\t\t[/[$][+-]*\\d*(\\.\\d*)?/, 'number'],\n\t\t\t[/((\\d+(\\.\\d*)?)|(\\.\\d+))([eE][\\-+]?\\d+)?/, 'number']\n\t\t],\n\t\tstrings: [\n\t\t\t[/N'/, { token: 'string', next: '@string' }],\n\t\t\t[/'/, { token: 'string', next: '@string' }]\n\t\t],\n\t\tstring: [\n\t\t\t[/[^']+/, 'string'],\n\t\t\t[/''/, 'string'],\n\t\t\t[/'/, { token: 'string', next: '@pop' }]\n\t\t],\n\t\tcomplexIdentifiers: [\n\t\t\t[/\\[/, { token: 'identifier.quote', next: '@bracketedIdentifier' }],\n\t\t\t[/\"/, { token: 'identifier.quote', next: '@quotedIdentifier' }]\n\t\t],\n\t\tbracketedIdentifier: [\n\t\t\t[/[^\\]]+/, 'identifier'],\n\t\t\t[/]]/, 'identifier'],\n\t\t\t[/]/, { token: 'identifier.quote', next: '@pop' }]\n\t\t],\n\t\tquotedIdentifier: [\n\t\t\t[/[^\"]+/, 'identifier'],\n\t\t\t[/\"\"/, 'identifier'],\n\t\t\t[/\"/, { token: 'identifier.quote', next: '@pop' }]\n\t\t],\n\t\tscopes: [\n\t\t\t[/BEGIN\\s+(DISTRIBUTED\\s+)?TRAN(SACTION)?\\b/i, 'keyword'],\n\t\t\t[/BEGIN\\s+TRY\\b/i, { token: 'keyword.try' }],\n\t\t\t[/END\\s+TRY\\b/i, { token: 'keyword.try' }],\n\t\t\t[/BEGIN\\s+CATCH\\b/i, { token: 'keyword.catch' }],\n\t\t\t[/END\\s+CATCH\\b/i, { token: 'keyword.catch' }],\n\t\t\t[/(BEGIN|CASE)\\b/i, { token: 'keyword.block' }],\n\t\t\t[/END\\b/i, { token: 'keyword.block' }],\n\t\t\t[/WHEN\\b/i, { token: 'keyword.choice' }],\n\t\t\t[/THEN\\b/i, { token: 'keyword.choice' }]\n\t\t]\n\t}\n}",
  "st": "<languages.IMonarchLanguage>{\n\tdefaultToken: '',\n\ttokenPostfix: '.st',\n\tignoreCase: true,\n\n\tbrackets: [\n\t\t{ token: 'delimiter.curly', open: '{', close: '}' },\n\t\t{ token: 'delimiter.parenthesis', open: '(', close: ')' },\n\t\t{ token: 'delimiter.square', open: '[', close: ']' }\n\t],\n\n\tkeywords: [\n\t\t'if',\n\t\t'end_if',\n\t\t'elsif',\n\t\t'else',\n\t\t'case',\n\t\t'of',\n\t\t'to',\n\t\t'__try',\n\t\t'__catch',\n\t\t'__finally',\n\t\t'do',\n\t\t'with',\n\t\t'by',\n\t\t'while',\n\t\t'repeat',\n\t\t'end_while',\n\t\t'end_repeat',\n\t\t'end_case',\n\t\t'for',\n\t\t'end_for',\n\t\t'task',\n\t\t'retain',\n\t\t'non_retain',\n\t\t'constant',\n\t\t'with',\n\t\t'at',\n\t\t'exit',\n\t\t'return',\n\t\t'interval',\n\t\t'priority',\n\t\t'address',\n\t\t'port',\n\t\t'on_channel',\n\t\t'then',\n\t\t'iec',\n\t\t'file',\n\t\t'uses',\n\t\t'version',\n\t\t'packagetype',\n\t\t'displayname',\n\t\t'copyright',\n\t\t'summary',\n\t\t'vendor',\n\t\t'common_source',\n\t\t'from',\n\t\t'extends',\n\t\t'implements'\n\t],\n\n\tconstant: ['false', 'true', 'null'],\n\n\tdefineKeywords: [\n\t\t'var',\n\t\t'var_input',\n\t\t'var_output',\n\t\t'var_in_out',\n\t\t'var_temp',\n\t\t'var_global',\n\t\t'var_access',\n\t\t'var_external',\n\t\t'end_var',\n\n\t\t'type',\n\t\t'end_type',\n\t\t'struct',\n\t\t'end_struct',\n\t\t'program',\n\t\t'end_program',\n\t\t'function',\n\t\t'end_function',\n\t\t'function_block',\n\t\t'end_function_block',\n\t\t'interface',\n\t\t'end_interface',\n\t\t'method',\n\t\t'end_method',\n\t\t'property',\n\t\t'end_property',\n\t\t'namespace',\n\t\t'end_namespace',\n\n\t\t'configuration',\n\t\t'end_configuration',\n\t\t'tcp',\n\t\t'end_tcp',\n\t\t'resource',\n\t\t'end_resource',\n\t\t'channel',\n\t\t'end_channel',\n\t\t'library',\n\t\t'end_library',\n\t\t'folder',\n\t\t'end_folder',\n\t\t'binaries',\n\t\t'end_binaries',\n\t\t'includes',\n\t\t'end_includes',\n\t\t'sources',\n\t\t'end_sources',\n\n\t\t'action',\n\t\t'end_action',\n\t\t'step',\n\t\t'initial_step',\n\t\t'end_step',\n\t\t'transaction',\n\t\t'end_transaction'\n\t],\n\n\ttypeKeywords: [\n\t\t'int',\n\t\t'sint',\n\t\t'dint',\n\t\t'lint',\n\t\t'usint',\n\t\t'uint',\n\t\t'udint',\n\t\t'ulint',\n\t\t'real',\n\t\t'lreal',\n\t\t'time',\n\t\t'date',\n\t\t'time_of_day',\n\t\t'date_and_time',\n\t\t'string',\n\t\t'bool',\n\t\t'byte',\n\t\t'word',\n\t\t'dword',\n\t\t'array',\n\t\t'pointer',\n\t\t'lword'\n\t],\n\n\toperators: [\n\t\t'=',\n\t\t'>',\n\t\t'<',\n\t\t':',\n\t\t':=',\n\t\t'<=',\n\t\t'>=',\n\t\t'<>',\n\t\t'&',\n\t\t'+',\n\t\t'-',\n\t\t'*',\n\t\t'**',\n\t\t'MOD',\n\t\t'^',\n\t\t'or',\n\t\t'and',\n\t\t'not',\n\t\t'xor',\n\t\t'abs',\n\t\t'acos',\n\t\t'asin',\n\t\t'atan',\n\t\t'cos',\n\t\t'exp',\n\t\t'expt',\n\t\t'ln',\n\t\t'log',\n\t\t'sin',\n\t\t'sqrt',\n\t\t'tan',\n\t\t'sel',\n\t\t'max',\n\t\t'min',\n\t\t'limit',\n\t\t'mux',\n\t\t'shl',\n\t\t'shr',\n\t\t'rol',\n\t\t'ror',\n\t\t'indexof',\n\t\t'sizeof',\n\t\t'adr',\n\t\t'adrinst',\n\t\t'bitadr',\n\t\t'is_valid',\n\t\t'ref',\n\t\t'ref_to'\n\t],\n\n\tbuiltinVariables: [],\n\n\tbuiltinFunctions: [\n\t\t'sr',\n\t\t'rs',\n\t\t'tp',\n\t\t'ton',\n\t\t'tof',\n\t\t'eq',\n\t\t'ge',\n\t\t'le',\n\t\t'lt',\n\t\t'ne',\n\t\t'round',\n\t\t'trunc',\n\t\t'ctd',\n\t\t'сtu',\n\t\t'ctud',\n\t\t'r_trig',\n\t\t'f_trig',\n\t\t'move',\n\t\t'concat',\n\t\t'delete',\n\t\t'find',\n\t\t'insert',\n\t\t'left',\n\t\t'len',\n\t\t'replace',\n\t\t'right',\n\t\t'rtc'\n\t],\n\n\t// we include these common regular expressions\n\tsymbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n\n\t// C# style strings\n\tescapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n\n\t// The main tokenizer for our languages\n\ttokenizer: {\n\t\troot: [\n\t\t\t[/(\\.\\.)/, 'delimiter'],\n\n\t\t\t[/\\b(16#[0-9A-Fa-f\\_]*)+\\b/, 'number.hex'],\n\t\t\t[/\\b(2#[01\\_]+)+\\b/, 'number.binary'],\n\t\t\t[/\\b(8#[0-9\\_]*)+\\b/, 'number.octal'],\n\t\t\t[/\\b\\d*\\.\\d+([eE][\\-+]?\\d+)?\\b/, 'number.float'],\n\t\t\t[/\\b(L?REAL)#[0-9\\_\\.e]+\\b/, 'number.float'],\n\t\t\t[/\\b(BYTE|(?:D|L)?WORD|U?(?:S|D|L)?INT)#[0-9\\_]+\\b/, 'number'],\n\t\t\t[/\\d+/, 'number'],\n\n\t\t\t[/\\b(T|DT|TOD)#[0-9:-_shmyd]+\\b/, 'tag'],\n\t\t\t[/\\%(I|Q|M)(X|B|W|D|L)[0-9\\.]+/, 'tag'],\n\t\t\t[/\\%(I|Q|M)[0-9\\.]*/, 'tag'],\n\t\t\t[/\\b[A-Za-z]{1,6}#[0-9]+\\b/, 'tag'],\n\n\t\t\t[/\\b(TO_|CTU_|CTD_|CTUD_|MUX_|SEL_)[A_Za-z]+\\b/, 'predefined'],\n\t\t\t[/\\b[A_Za-z]+(_TO_)[A_Za-z]+\\b/, 'predefined'],\n\n\t\t\t[/[;]/, 'delimiter'],\n\t\t\t[/[.]/, { token: 'delimiter', next: '@params' }],\n\n\t\t\t// identifiers and keywords\n\t\t\t[\n\t\t\t\t/[a-zA-Z_]\\w*/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@operators': 'operators',\n\t\t\t\t\t\t'@keywords': 'keyword',\n\t\t\t\t\t\t'@typeKeywords': 'type',\n\t\t\t\t\t\t'@defineKeywords': 'variable',\n\t\t\t\t\t\t'@constant': 'constant',\n\t\t\t\t\t\t'@builtinVariables': 'predefined',\n\t\t\t\t\t\t'@builtinFunctions': 'predefined',\n\t\t\t\t\t\t'@default': 'identifier'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t{ include: '@whitespace' },\n\n\t\t\t[/[{}()\\[\\]]/, '@brackets'],\n\n\t\t\t[/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'], // non-teminated string\n\t\t\t[/\"/, { token: 'string.quote', bracket: '@open', next: '@string_dq' }],\n\t\t\t[/'/, { token: 'string.quote', bracket: '@open', next: '@string_sq' }],\n\n\t\t\t[/'[^\\\\']'/, 'string'],\n\t\t\t[/(')(@escapes)(')/, ['string', 'string.escape', 'string']],\n\t\t\t[/'/, 'string.invalid']\n\t\t],\n\t\tparams: [\n\t\t\t[/\\b[A-Za-z0-9_]+\\b(?=\\()/, { token: 'identifier', next: '@pop' }],\n\t\t\t[/\\b[A-Za-z0-9_]+\\b/, 'variable.name', '@pop']\n\t\t],\n\t\tcomment: [\n\t\t\t[/[^\\/*]+/, 'comment'],\n\t\t\t[/\\/\\*/, 'comment', '@push'], // nested comment\n\t\t\t['\\\\*/', 'comment', '@pop'],\n\t\t\t[/[\\/*]/, 'comment']\n\t\t],\n\t\tcomment2: [\n\t\t\t[/[^\\(*]+/, 'comment'],\n\t\t\t[/\\(\\*/, 'comment', '@push'], // nested comment\n\t\t\t['\\\\*\\\\)', 'comment', '@pop'],\n\t\t\t[/[\\(*]/, 'comment']\n\t\t],\n\t\twhitespace: [\n\t\t\t[/[ \\t\\r\\n]+/, 'white'],\n\t\t\t[/\\/\\/.*$/, 'comment'],\n\t\t\t[/\\/\\*/, 'comment', '@comment'],\n\t\t\t[/\\(\\*/, 'comment', '@comment2']\n\t\t],\n\t\tstring_dq: [\n\t\t\t[/[^\\\\\"]+/, 'string'],\n\t\t\t[/@escapes/, 'string.escape'],\n\t\t\t[/\\\\./, 'string.escape.invalid'],\n\t\t\t[/\"/, { token: 'string.quote', bracket: '@close', next: '@pop' }]\n\t\t],\n\t\tstring_sq: [\n\t\t\t[/[^\\\\']+/, 'string'],\n\t\t\t[/@escapes/, 'string.escape'],\n\t\t\t[/\\\\./, 'string.escape.invalid'],\n\t\t\t[/'/, { token: 'string.quote', bracket: '@close', next: '@pop' }]\n\t\t]\n\t}\n}",
  "swift": "<languages.IMonarchLanguage>{\n\tdefaultToken: '',\n\ttokenPostfix: '.swift',\n\n\t// TODO(owensd): Support the full range of unicode valid identifiers.\n\tidentifier: /[a-zA-Z_][\\w$]*/,\n\n\tattributes: [\n\t\t'@GKInspectable',\n\t\t'@IBAction',\n\t\t'@IBDesignable',\n\t\t'@IBInspectable',\n\t\t'@IBOutlet',\n\t\t'@IBSegueAction',\n\t\t'@NSApplicationMain',\n\t\t'@NSCopying',\n\t\t'@NSManaged',\n\t\t'@Sendable',\n\t\t'@UIApplicationMain',\n\n\t\t'@autoclosure',\n\t\t'@actorIndependent',\n\t\t'@asyncHandler',\n\t\t'@available',\n\t\t'@convention',\n\t\t'@derivative',\n\t\t'@differentiable',\n\t\t'@discardableResult',\n\t\t'@dynamicCallable',\n\t\t'@dynamicMemberLookup',\n\t\t'@escaping',\n\t\t'@frozen',\n\t\t'@globalActor',\n\t\t'@inlinable',\n\t\t'@inline',\n\t\t'@main',\n\t\t'@noDerivative',\n\t\t'@nonobjc',\n\t\t'@noreturn',\n\t\t'@objc',\n\t\t'@objcMembers',\n\t\t'@preconcurrency',\n\t\t'@propertyWrapper',\n\t\t'@requires_stored_property_inits',\n\t\t'@resultBuilder',\n\t\t'@testable',\n\t\t'@unchecked',\n\t\t'@unknown',\n\t\t'@usableFromInline',\n\t\t'@warn_unqualified_access'\n\t],\n\taccessmodifiers: ['open', 'public', 'internal', 'fileprivate', 'private'],\n\tkeywords: [\n\t\t'#available',\n\t\t'#colorLiteral',\n\t\t'#column',\n\t\t'#dsohandle',\n\t\t'#else',\n\t\t'#elseif',\n\t\t'#endif',\n\t\t'#error',\n\t\t'#file',\n\t\t'#fileID',\n\t\t'#fileLiteral',\n\t\t'#filePath',\n\t\t'#function',\n\t\t'#if',\n\t\t'#imageLiteral',\n\t\t'#keyPath',\n\t\t'#line',\n\t\t'#selector',\n\t\t'#sourceLocation',\n\t\t'#warning',\n\n\t\t'Any',\n\t\t'Protocol',\n\t\t'Self',\n\t\t'Type',\n\n\t\t'actor',\n\t\t'as',\n\t\t'assignment',\n\t\t'associatedtype',\n\t\t'associativity',\n\t\t'async',\n\t\t'await',\n\t\t'break',\n\t\t'case',\n\t\t'catch',\n\t\t'class',\n\t\t'continue',\n\t\t'convenience',\n\t\t'default',\n\t\t'defer',\n\t\t'deinit',\n\t\t'didSet',\n\t\t'do',\n\t\t'dynamic',\n\t\t'dynamicType',\n\t\t'else',\n\t\t'enum',\n\t\t'extension',\n\t\t'fallthrough',\n\t\t'false',\n\t\t'fileprivate',\n\t\t'final',\n\t\t'for',\n\t\t'func',\n\t\t'get',\n\t\t'guard',\n\t\t'higherThan',\n\t\t'if',\n\t\t'import',\n\t\t'in',\n\t\t'indirect',\n\t\t'infix',\n\t\t'init',\n\t\t'inout',\n\t\t'internal',\n\t\t'is',\n\t\t'isolated',\n\t\t'lazy',\n\t\t'left',\n\t\t'let',\n\t\t'lowerThan',\n\t\t'mutating',\n\t\t'nil',\n\t\t'none',\n\t\t'nonisolated',\n\t\t'nonmutating',\n\t\t'open',\n\t\t'operator',\n\t\t'optional',\n\t\t'override',\n\t\t'postfix',\n\t\t'precedence',\n\t\t'precedencegroup',\n\t\t'prefix',\n\t\t'private',\n\t\t'protocol',\n\t\t'public',\n\t\t'repeat',\n\t\t'required',\n\t\t'rethrows',\n\t\t'return',\n\t\t'right',\n\t\t'safe',\n\t\t'self',\n\t\t'set',\n\t\t'some',\n\t\t'static',\n\t\t'struct',\n\t\t'subscript',\n\t\t'super',\n\t\t'switch',\n\t\t'throw',\n\t\t'throws',\n\t\t'true',\n\t\t'try',\n\t\t'typealias',\n\t\t'unowned',\n\t\t'unsafe',\n\t\t'var',\n\t\t'weak',\n\t\t'where',\n\t\t'while',\n\t\t'willSet',\n\n\t\t'__consuming',\n\t\t'__owned'\n\t],\n\n\tsymbols: /[=(){}\\[\\].,:;@#\\_&\\-<>`?!+*\\\\\\/]/,\n\n\t// Moved . to operatorstart so it can be a delimiter\n\toperatorstart:\n\t\t/[\\/=\\-+!*%<>&|^~?\\u00A1-\\u00A7\\u00A9\\u00AB\\u00AC\\u00AE\\u00B0-\\u00B1\\u00B6\\u00BB\\u00BF\\u00D7\\u00F7\\u2016-\\u2017\\u2020-\\u2027\\u2030-\\u203E\\u2041-\\u2053\\u2055-\\u205E\\u2190-\\u23FF\\u2500-\\u2775\\u2794-\\u2BFF\\u2E00-\\u2E7F\\u3001-\\u3003\\u3008-\\u3030]/,\n\toperatorend: /[\\u0300-\\u036F\\u1DC0-\\u1DFF\\u20D0-\\u20FF\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uE0100-\\uE01EF]/,\n\toperators: /(@operatorstart)((@operatorstart)|(@operatorend))*/,\n\n\t// TODO(owensd): These are borrowed from C#; need to validate correctness for Swift.\n\tescapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n\n\ttokenizer: {\n\t\troot: [\n\t\t\t{ include: '@whitespace' },\n\t\t\t{ include: '@comment' },\n\t\t\t{ include: '@attribute' },\n\t\t\t{ include: '@literal' },\n\t\t\t{ include: '@keyword' },\n\t\t\t{ include: '@invokedmethod' },\n\t\t\t{ include: '@symbol' }\n\t\t],\n\n\t\twhitespace: [\n\t\t\t[/\\s+/, 'white'],\n\t\t\t[/\"\"\"/, 'string.quote', '@endDblDocString']\n\t\t],\n\n\t\tendDblDocString: [\n\t\t\t[/[^\"]+/, 'string'],\n\t\t\t[/\\\\\"/, 'string'],\n\t\t\t[/\"\"\"/, 'string.quote', '@popall'],\n\t\t\t[/\"/, 'string']\n\t\t],\n\n\t\tsymbol: [\n\t\t\t[/[{}()\\[\\]]/, '@brackets'],\n\t\t\t[/[<>](?!@symbols)/, '@brackets'],\n\t\t\t[/[.]/, 'delimiter'],\n\t\t\t[/@operators/, 'operator'],\n\t\t\t[/@symbols/, 'operator']\n\t\t],\n\n\t\tcomment: [\n\t\t\t[/\\/\\/\\/.*$/, 'comment.doc'],\n\t\t\t[/\\/\\*\\*/, 'comment.doc', '@commentdocbody'],\n\t\t\t[/\\/\\/.*$/, 'comment'],\n\t\t\t[/\\/\\*/, 'comment', '@commentbody']\n\t\t],\n\t\tcommentdocbody: [\n\t\t\t[/\\/\\*/, 'comment', '@commentbody'],\n\t\t\t[/\\*\\//, 'comment.doc', '@pop'],\n\t\t\t[/\\:[a-zA-Z]+\\:/, 'comment.doc.param'],\n\t\t\t[/./, 'comment.doc']\n\t\t],\n\t\tcommentbody: [\n\t\t\t[/\\/\\*/, 'comment', '@commentbody'],\n\t\t\t[/\\*\\//, 'comment', '@pop'],\n\t\t\t[/./, 'comment']\n\t\t],\n\n\t\tattribute: [\n\t\t\t[\n\t\t\t\t/@@@identifier/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@attributes': 'keyword.control',\n\t\t\t\t\t\t'@default': ''\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t],\n\n\t\tliteral: [\n\t\t\t[/\"/, { token: 'string.quote', next: '@stringlit' }],\n\t\t\t[/0[b]([01]_?)+/, 'number.binary'],\n\t\t\t[/0[o]([0-7]_?)+/, 'number.octal'],\n\t\t\t[/0[x]([0-9a-fA-F]_?)+([pP][\\-+](\\d_?)+)?/, 'number.hex'],\n\t\t\t[/(\\d_?)*\\.(\\d_?)+([eE][\\-+]?(\\d_?)+)?/, 'number.float'],\n\t\t\t[/(\\d_?)+/, 'number']\n\t\t],\n\n\t\tstringlit: [\n\t\t\t[/\\\\\\(/, { token: 'operator', next: '@interpolatedexpression' }],\n\t\t\t[/@escapes/, 'string'],\n\t\t\t[/\\\\./, 'string.escape.invalid'],\n\t\t\t[/\"/, { token: 'string.quote', next: '@pop' }],\n\t\t\t[/./, 'string']\n\t\t],\n\n\t\tinterpolatedexpression: [\n\t\t\t[/\\(/, { token: 'operator', next: '@interpolatedexpression' }],\n\t\t\t[/\\)/, { token: 'operator', next: '@pop' }],\n\t\t\t{ include: '@literal' },\n\t\t\t{ include: '@keyword' },\n\t\t\t{ include: '@symbol' }\n\t\t],\n\n\t\tkeyword: [\n\t\t\t[/`/, { token: 'operator', next: '@escapedkeyword' }],\n\t\t\t[\n\t\t\t\t/@identifier/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@keywords': 'keyword',\n\t\t\t\t\t\t'[A-Z][a-zA-Z0-9$]*': 'type.identifier',\n\t\t\t\t\t\t'@default': 'identifier'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t],\n\n\t\tescapedkeyword: [\n\t\t\t[/`/, { token: 'operator', next: '@pop' }],\n\t\t\t[/./, 'identifier']\n\t\t],\n\n\t\tinvokedmethod: [\n\t\t\t[\n\t\t\t\t/([.])(@identifier)/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t$2: ['delimeter', 'type.identifier'],\n\t\t\t\t\t\t'@default': ''\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t]\n\t}\n}",
  "systemverilog": "<languages.IMonarchLanguage>{\n\tdefaultToken: '',\n\ttokenPostfix: '.sv',\n\n\tbrackets: [\n\t\t{ token: 'delimiter.curly', open: '{', close: '}' },\n\t\t{ token: 'delimiter.parenthesis', open: '(', close: ')' },\n\t\t{ token: 'delimiter.square', open: '[', close: ']' },\n\t\t{ token: 'delimiter.angle', open: '<', close: '>' }\n\t],\n\n\tkeywords: [\n\t\t'accept_on',\n\t\t'alias',\n\t\t'always',\n\t\t'always_comb',\n\t\t'always_ff',\n\t\t'always_latch',\n\t\t'and',\n\t\t'assert',\n\t\t'assign',\n\t\t'assume',\n\t\t'automatic',\n\t\t'before',\n\t\t'begin',\n\t\t'bind',\n\t\t'bins',\n\t\t'binsof',\n\t\t'bit',\n\t\t'break',\n\t\t'buf',\n\t\t'bufif0',\n\t\t'bufif1',\n\t\t'byte',\n\t\t'case',\n\t\t'casex',\n\t\t'casez',\n\t\t'cell',\n\t\t'chandle',\n\t\t'checker',\n\t\t'class',\n\t\t'clocking',\n\t\t'cmos',\n\t\t'config',\n\t\t'const',\n\t\t'constraint',\n\t\t'context',\n\t\t'continue',\n\t\t'cover',\n\t\t'covergroup',\n\t\t'coverpoint',\n\t\t'cross',\n\t\t'deassign',\n\t\t'default',\n\t\t'defparam',\n\t\t'design',\n\t\t'disable',\n\t\t'dist',\n\t\t'do',\n\t\t'edge',\n\t\t'else',\n\t\t'end',\n\t\t'endcase',\n\t\t'endchecker',\n\t\t'endclass',\n\t\t'endclocking',\n\t\t'endconfig',\n\t\t'endfunction',\n\t\t'endgenerate',\n\t\t'endgroup',\n\t\t'endinterface',\n\t\t'endmodule',\n\t\t'endpackage',\n\t\t'endprimitive',\n\t\t'endprogram',\n\t\t'endproperty',\n\t\t'endspecify',\n\t\t'endsequence',\n\t\t'endtable',\n\t\t'endtask',\n\t\t'enum',\n\t\t'event',\n\t\t'eventually',\n\t\t'expect',\n\t\t'export',\n\t\t'extends',\n\t\t'extern',\n\t\t'final',\n\t\t'first_match',\n\t\t'for',\n\t\t'force',\n\t\t'foreach',\n\t\t'forever',\n\t\t'fork',\n\t\t'forkjoin',\n\t\t'function',\n\t\t'generate',\n\t\t'genvar',\n\t\t'global',\n\t\t'highz0',\n\t\t'highz1',\n\t\t'if',\n\t\t'iff',\n\t\t'ifnone',\n\t\t'ignore_bins',\n\t\t'illegal_bins',\n\t\t'implements',\n\t\t'implies',\n\t\t'import',\n\t\t'incdir',\n\t\t'include',\n\t\t'initial',\n\t\t'inout',\n\t\t'input',\n\t\t'inside',\n\t\t'instance',\n\t\t'int',\n\t\t'integer',\n\t\t'interconnect',\n\t\t'interface',\n\t\t'intersect',\n\t\t'join',\n\t\t'join_any',\n\t\t'join_none',\n\t\t'large',\n\t\t'let',\n\t\t'liblist',\n\t\t'library',\n\t\t'local',\n\t\t'localparam',\n\t\t'logic',\n\t\t'longint',\n\t\t'macromodule',\n\t\t'matches',\n\t\t'medium',\n\t\t'modport',\n\t\t'module',\n\t\t'nand',\n\t\t'negedge',\n\t\t'nettype',\n\t\t'new',\n\t\t'nexttime',\n\t\t'nmos',\n\t\t'nor',\n\t\t'noshowcancelled',\n\t\t'not',\n\t\t'notif0',\n\t\t'notif1',\n\t\t'null',\n\t\t'or',\n\t\t'output',\n\t\t'package',\n\t\t'packed',\n\t\t'parameter',\n\t\t'pmos',\n\t\t'posedge',\n\t\t'primitive',\n\t\t'priority',\n\t\t'program',\n\t\t'property',\n\t\t'protected',\n\t\t'pull0',\n\t\t'pull1',\n\t\t'pulldown',\n\t\t'pullup',\n\t\t'pulsestyle_ondetect',\n\t\t'pulsestyle_onevent',\n\t\t'pure',\n\t\t'rand',\n\t\t'randc',\n\t\t'randcase',\n\t\t'randsequence',\n\t\t'rcmos',\n\t\t'real',\n\t\t'realtime',\n\t\t'ref',\n\t\t'reg',\n\t\t'reject_on',\n\t\t'release',\n\t\t'repeat',\n\t\t'restrict',\n\t\t'return',\n\t\t'rnmos',\n\t\t'rpmos',\n\t\t'rtran',\n\t\t'rtranif0',\n\t\t'rtranif1',\n\t\t's_always',\n\t\t's_eventually',\n\t\t's_nexttime',\n\t\t's_until',\n\t\t's_until_with',\n\t\t'scalared',\n\t\t'sequence',\n\t\t'shortint',\n\t\t'shortreal',\n\t\t'showcancelled',\n\t\t'signed',\n\t\t'small',\n\t\t'soft',\n\t\t'solve',\n\t\t'specify',\n\t\t'specparam',\n\t\t'static',\n\t\t'string',\n\t\t'strong',\n\t\t'strong0',\n\t\t'strong1',\n\t\t'struct',\n\t\t'super',\n\t\t'supply0',\n\t\t'supply1',\n\t\t'sync_accept_on',\n\t\t'sync_reject_on',\n\t\t'table',\n\t\t'tagged',\n\t\t'task',\n\t\t'this',\n\t\t'throughout',\n\t\t'time',\n\t\t'timeprecision',\n\t\t'timeunit',\n\t\t'tran',\n\t\t'tranif0',\n\t\t'tranif1',\n\t\t'tri',\n\t\t'tri0',\n\t\t'tri1',\n\t\t'triand',\n\t\t'trior',\n\t\t'trireg',\n\t\t'type',\n\t\t'typedef',\n\t\t'union',\n\t\t'unique',\n\t\t'unique0',\n\t\t'unsigned',\n\t\t'until',\n\t\t'until_with',\n\t\t'untyped',\n\t\t'use',\n\t\t'uwire',\n\t\t'var',\n\t\t'vectored',\n\t\t'virtual',\n\t\t'void',\n\t\t'wait',\n\t\t'wait_order',\n\t\t'wand',\n\t\t'weak',\n\t\t'weak0',\n\t\t'weak1',\n\t\t'while',\n\t\t'wildcard',\n\t\t'wire',\n\t\t'with',\n\t\t'within',\n\t\t'wor',\n\t\t'xnor',\n\t\t'xor'\n\t],\n\n\tbuiltin_gates: [\n\t\t'and',\n\t\t'nand',\n\t\t'nor',\n\t\t'or',\n\t\t'xor',\n\t\t'xnor',\n\t\t'buf',\n\t\t'not',\n\t\t'bufif0',\n\t\t'bufif1',\n\t\t'notif1',\n\t\t'notif0',\n\t\t'cmos',\n\t\t'nmos',\n\t\t'pmos',\n\t\t'rcmos',\n\t\t'rnmos',\n\t\t'rpmos',\n\t\t'tran',\n\t\t'tranif1',\n\t\t'tranif0',\n\t\t'rtran',\n\t\t'rtranif1',\n\t\t'rtranif0'\n\t],\n\n\toperators: [\n\t\t// assignment operators\n\t\t'=',\n\t\t'+=',\n\t\t'-=',\n\t\t'*=',\n\t\t'/=',\n\t\t'%=',\n\t\t'&=',\n\t\t'|=',\n\t\t'^=',\n\t\t'<<=',\n\t\t'>>+',\n\t\t'<<<=',\n\t\t'>>>=',\n\t\t// conditional expression\n\t\t'?',\n\t\t':',\n\t\t// Unary operators\n\t\t'+',\n\t\t'-',\n\t\t'!',\n\t\t'~',\n\t\t'&',\n\t\t'~&',\n\t\t'|',\n\t\t'~|',\n\t\t'^',\n\t\t'~^',\n\t\t'^~',\n\t\t//binary operators\n\t\t'+',\n\t\t'-',\n\t\t'*',\n\t\t'/',\n\t\t'%',\n\t\t'==',\n\t\t'!=',\n\t\t'===',\n\t\t'!==',\n\t\t'==?',\n\t\t'!=?',\n\t\t'&&',\n\t\t'||',\n\t\t'**',\n\t\t'<',\n\t\t'<=',\n\t\t'>',\n\t\t'>=',\n\t\t'&',\n\t\t'|',\n\t\t'^',\n\t\t'>>',\n\t\t'<<',\n\t\t'>>>',\n\t\t'<<<',\n\t\t// increment or decrement operator\n\t\t'++',\n\t\t'--',\n\t\t//binary logical operator\n\t\t'->',\n\t\t'<->',\n\t\t// binary set membership operator\n\t\t'inside',\n\t\t// binary distrubution operator\n\t\t'dist',\n\t\t'::',\n\t\t'+:',\n\t\t'-:',\n\t\t'*>',\n\t\t'&&&',\n\t\t'|->',\n\t\t'|=>',\n\t\t'#=#'\n\t],\n\n\t// we include these common regular expressions\n\tsymbols: /[=><!~?:&|+\\-*\\/\\^%#]+/,\n\tescapes: /%%|\\\\(?:[antvf\\\\\"']|x[0-9A-Fa-f]{1,2}|[0-7]{1,3})/,\n\tidentifier: /(?:[a-zA-Z_][a-zA-Z0-9_$\\.]*|\\\\\\S+ )/,\n\tsystemcall: /[$][a-zA-Z0-9_]+/,\n\ttimeunits: /s|ms|us|ns|ps|fs/,\n\n\t// The main tokenizer for our languages\n\ttokenizer: {\n\t\troot: [\n\t\t\t// module instances\n\t\t\t[\n\t\t\t\t/^(\\s*)(@identifier)/,\n\t\t\t\t[\n\t\t\t\t\t'',\n\t\t\t\t\t{\n\t\t\t\t\t\tcases: {\n\t\t\t\t\t\t\t'@builtin_gates': {\n\t\t\t\t\t\t\t\ttoken: 'keyword.$2',\n\t\t\t\t\t\t\t\tnext: '@module_instance'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\ttable: {\n\t\t\t\t\t\t\t\ttoken: 'keyword.$2',\n\t\t\t\t\t\t\t\tnext: '@table'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t'@keywords': { token: 'keyword.$2' },\n\t\t\t\t\t\t\t'@default': {\n\t\t\t\t\t\t\t\ttoken: 'identifier',\n\t\t\t\t\t\t\t\tnext: '@module_instance'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t],\n\n\t\t\t// include statements\n\t\t\t[/^\\s*`include/, { token: 'keyword.directive.include', next: '@include' }],\n\n\t\t\t// Preprocessor directives\n\t\t\t[/^\\s*`\\s*\\w+/, 'keyword'],\n\n\t\t\t// identifiers and keywords\n\t\t\t{ include: '@identifier_or_keyword' },\n\n\t\t\t// whitespace and comments\n\t\t\t{ include: '@whitespace' },\n\n\t\t\t// (* attributes *).\n\t\t\t[/\\(\\*.*\\*\\)/, 'annotation'],\n\n\t\t\t// Systemcall\n\t\t\t[/@systemcall/, 'variable.predefined'],\n\n\t\t\t// delimiters and operators\n\t\t\t[/[{}()\\[\\]]/, '@brackets'],\n\t\t\t[/[<>](?!@symbols)/, '@brackets'],\n\t\t\t[\n\t\t\t\t/@symbols/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@operators': 'delimiter',\n\t\t\t\t\t\t'@default': ''\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t// numbers\n\t\t\t{ include: '@numbers' },\n\n\t\t\t// delimiter: after number because of .\\d floats\n\t\t\t[/[;,.]/, 'delimiter'],\n\n\t\t\t// strings\n\t\t\t{ include: '@strings' }\n\t\t],\n\n\t\tidentifier_or_keyword: [\n\t\t\t[\n\t\t\t\t/@identifier/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@keywords': { token: 'keyword.$0' },\n\t\t\t\t\t\t'@default': 'identifier'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t],\n\n\t\tnumbers: [\n\t\t\t[/\\d+?[\\d_]*(?:\\.[\\d_]+)?[eE][\\-+]?\\d+/, 'number.float'],\n\t\t\t[/\\d+?[\\d_]*\\.[\\d_]+(?:\\s*@timeunits)?/, 'number.float'],\n\t\t\t[/(?:\\d+?[\\d_]*\\s*)?'[sS]?[dD]\\s*[0-9xXzZ?]+?[0-9xXzZ?_]*/, 'number'],\n\t\t\t[/(?:\\d+?[\\d_]*\\s*)?'[sS]?[bB]\\s*[0-1xXzZ?]+?[0-1xXzZ?_]*/, 'number.binary'],\n\t\t\t[/(?:\\d+?[\\d_]*\\s*)?'[sS]?[oO]\\s*[0-7xXzZ?]+?[0-7xXzZ?_]*/, 'number.octal'],\n\t\t\t[/(?:\\d+?[\\d_]*\\s*)?'[sS]?[hH]\\s*[0-9a-fA-FxXzZ?]+?[0-9a-fA-FxXzZ?_]*/, 'number.hex'],\n\t\t\t[/1step/, 'number'],\n\t\t\t[/[\\dxXzZ]+?[\\dxXzZ_]*(?:\\s*@timeunits)?/, 'number'],\n\t\t\t[/'[01xXzZ]+/, 'number']\n\t\t],\n\n\t\tmodule_instance: [\n\t\t\t{ include: '@whitespace' },\n\t\t\t[/(#?)(\\()/, ['', { token: '@brackets', next: '@port_connection' }]],\n\t\t\t[/@identifier\\s*[;={}\\[\\],]/, { token: '@rematch', next: '@pop' }],\n\t\t\t[/@symbols|[;={}\\[\\],]/, { token: '@rematch', next: '@pop' }],\n\t\t\t[/@identifier/, 'type'],\n\t\t\t[/;/, 'delimiter', '@pop']\n\t\t],\n\n\t\tport_connection: [\n\t\t\t{ include: '@identifier_or_keyword' },\n\t\t\t{ include: '@whitespace' },\n\t\t\t[/@systemcall/, 'variable.predefined'],\n\t\t\t{ include: '@numbers' },\n\t\t\t{ include: '@strings' },\n\t\t\t[/[,]/, 'delimiter'],\n\t\t\t[/\\(/, '@brackets', '@port_connection'],\n\t\t\t[/\\)/, '@brackets', '@pop']\n\t\t],\n\n\t\twhitespace: [\n\t\t\t[/[ \\t\\r\\n]+/, ''],\n\t\t\t[/\\/\\*/, 'comment', '@comment'],\n\t\t\t[/\\/\\/.*$/, 'comment']\n\t\t],\n\n\t\tcomment: [\n\t\t\t[/[^\\/*]+/, 'comment'],\n\t\t\t[/\\*\\//, 'comment', '@pop'],\n\t\t\t[/[\\/*]/, 'comment']\n\t\t],\n\n\t\tstrings: [\n\t\t\t[/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'], // non-teminated string\n\t\t\t[/\"/, 'string', '@string']\n\t\t],\n\n\t\tstring: [\n\t\t\t[/[^\\\\\"]+/, 'string'],\n\t\t\t[/@escapes/, 'string.escape'],\n\t\t\t[/\\\\./, 'string.escape.invalid'],\n\t\t\t[/\"/, 'string', '@pop']\n\t\t],\n\n\t\tinclude: [\n\t\t\t[\n\t\t\t\t/(\\s*)(\")([\\w*\\/*]*)(.\\w*)(\")/,\n\t\t\t\t[\n\t\t\t\t\t'',\n\t\t\t\t\t'string.include.identifier',\n\t\t\t\t\t'string.include.identifier',\n\t\t\t\t\t'string.include.identifier',\n\t\t\t\t\t{ token: 'string.include.identifier', next: '@pop' }\n\t\t\t\t]\n\t\t\t],\n\t\t\t[\n\t\t\t\t/(\\s*)(<)([\\w*\\/*]*)(.\\w*)(>)/,\n\t\t\t\t[\n\t\t\t\t\t'',\n\t\t\t\t\t'string.include.identifier',\n\t\t\t\t\t'string.include.identifier',\n\t\t\t\t\t'string.include.identifier',\n\t\t\t\t\t{ token: 'string.include.identifier', next: '@pop' }\n\t\t\t\t]\n\t\t\t]\n\t\t],\n\n\t\ttable: [\n\t\t\t{ include: '@whitespace' },\n\t\t\t[/[()]/, '@brackets'],\n\t\t\t[/[:;]/, 'delimiter'],\n\t\t\t[/[01\\-*?xXbBrRfFpPnN]/, 'variable.predefined'],\n\t\t\t['endtable', 'keyword.endtable', '@pop']\n\t\t]\n\t}\n}",
  "tcl": "<languages.IMonarchLanguage>{\n\ttokenPostfix: '.tcl',\n\n\tspecialFunctions: [\n\t\t'set',\n\t\t'unset',\n\t\t'rename',\n\t\t'variable',\n\t\t'proc',\n\t\t'coroutine',\n\t\t'foreach',\n\t\t'incr',\n\t\t'append',\n\t\t'lappend',\n\t\t'linsert',\n\t\t'lreplace'\n\t],\n\n\tmainFunctions: [\n\t\t'if',\n\t\t'then',\n\t\t'elseif',\n\t\t'else',\n\t\t'case',\n\t\t'switch',\n\t\t'while',\n\t\t'for',\n\t\t'break',\n\t\t'continue',\n\t\t'return',\n\t\t'package',\n\t\t'namespace',\n\t\t'catch',\n\t\t'exit',\n\t\t'eval',\n\t\t'expr',\n\t\t'uplevel',\n\t\t'upvar'\n\t],\n\n\tbuiltinFunctions: [\n\t\t'file',\n\t\t'info',\n\t\t'concat',\n\t\t'join',\n\t\t'lindex',\n\t\t'list',\n\t\t'llength',\n\t\t'lrange',\n\t\t'lsearch',\n\t\t'lsort',\n\t\t'split',\n\t\t'array',\n\t\t'parray',\n\t\t'binary',\n\t\t'format',\n\t\t'regexp',\n\t\t'regsub',\n\t\t'scan',\n\t\t'string',\n\t\t'subst',\n\t\t'dict',\n\t\t'cd',\n\t\t'clock',\n\t\t'exec',\n\t\t'glob',\n\t\t'pid',\n\t\t'pwd',\n\t\t'close',\n\t\t'eof',\n\t\t'fblocked',\n\t\t'fconfigure',\n\t\t'fcopy',\n\t\t'fileevent',\n\t\t'flush',\n\t\t'gets',\n\t\t'open',\n\t\t'puts',\n\t\t'read',\n\t\t'seek',\n\t\t'socket',\n\t\t'tell',\n\t\t'interp',\n\t\t'after',\n\t\t'auto_execok',\n\t\t'auto_load',\n\t\t'auto_mkindex',\n\t\t'auto_reset',\n\t\t'bgerror',\n\t\t'error',\n\t\t'global',\n\t\t'history',\n\t\t'load',\n\t\t'source',\n\t\t'time',\n\t\t'trace',\n\t\t'unknown',\n\t\t'unset',\n\t\t'update',\n\t\t'vwait',\n\t\t'winfo',\n\t\t'wm',\n\t\t'bind',\n\t\t'event',\n\t\t'pack',\n\t\t'place',\n\t\t'grid',\n\t\t'font',\n\t\t'bell',\n\t\t'clipboard',\n\t\t'destroy',\n\t\t'focus',\n\t\t'grab',\n\t\t'lower',\n\t\t'option',\n\t\t'raise',\n\t\t'selection',\n\t\t'send',\n\t\t'tk',\n\t\t'tkwait',\n\t\t'tk_bisque',\n\t\t'tk_focusNext',\n\t\t'tk_focusPrev',\n\t\t'tk_focusFollowsMouse',\n\t\t'tk_popup',\n\t\t'tk_setPalette'\n\t],\n\n\tsymbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n\n\tbrackets: [\n\t\t{ open: '(', close: ')', token: 'delimiter.parenthesis' },\n\t\t{ open: '{', close: '}', token: 'delimiter.curly' },\n\t\t{ open: '[', close: ']', token: 'delimiter.square' }\n\t],\n\n\tescapes: /\\\\(?:[abfnrtv\\\\\"'\\[\\]\\{\\};\\$]|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n\n\tvariables: /(?:\\$+(?:(?:\\:\\:?)?[a-zA-Z_]\\w*)+)/,\n\n\ttokenizer: {\n\t\troot: [\n\t\t\t// identifiers and keywords\n\n\t\t\t[\n\t\t\t\t/[a-zA-Z_]\\w*/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@specialFunctions': {\n\t\t\t\t\t\t\ttoken: 'keyword.flow',\n\t\t\t\t\t\t\tnext: '@specialFunc'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'@mainFunctions': 'keyword',\n\t\t\t\t\t\t'@builtinFunctions': 'variable',\n\t\t\t\t\t\t'@default': 'operator.scss'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t[/\\s+\\-+(?!\\d|\\.)\\w*|{\\*}/, 'metatag'],\n\n\t\t\t// whitespace\n\t\t\t{ include: '@whitespace' },\n\n\t\t\t// delimiters and operators\n\t\t\t[/[{}()\\[\\]]/, '@brackets'],\n\t\t\t[/@symbols/, 'operator'],\n\t\t\t[/\\$+(?:\\:\\:)?\\{/, { token: 'identifier', next: '@nestedVariable' }],\n\t\t\t[/@variables/, 'type.identifier'],\n\t\t\t[/\\.(?!\\d|\\.)[\\w\\-]*/, 'operator.sql'],\n\n\t\t\t// numbers\n\t\t\t[/\\d+(\\.\\d+)?/, 'number'],\n\t\t\t[/\\d+/, 'number'],\n\n\t\t\t// delimiter\n\t\t\t[/;/, 'delimiter'],\n\n\t\t\t// strings\n\t\t\t[/\"/, { token: 'string.quote', bracket: '@open', next: '@dstring' }],\n\t\t\t[/'/, { token: 'string.quote', bracket: '@open', next: '@sstring' }]\n\t\t],\n\n\t\tdstring: [\n\t\t\t[/\\[/, { token: '@brackets', next: '@nestedCall' }],\n\t\t\t[/\\$+(?:\\:\\:)?\\{/, { token: 'identifier', next: '@nestedVariable' }],\n\t\t\t[/@variables/, 'type.identifier'],\n\t\t\t[/[^\\\\$\\[\\]\"]+/, 'string'],\n\t\t\t[/@escapes/, 'string.escape'],\n\t\t\t[/\"/, { token: 'string.quote', bracket: '@close', next: '@pop' }]\n\t\t],\n\n\t\tsstring: [\n\t\t\t[/\\[/, { token: '@brackets', next: '@nestedCall' }],\n\t\t\t[/\\$+(?:\\:\\:)?\\{/, { token: 'identifier', next: '@nestedVariable' }],\n\t\t\t[/@variables/, 'type.identifier'],\n\t\t\t[/[^\\\\$\\[\\]']+/, 'string'],\n\t\t\t[/@escapes/, 'string.escape'],\n\t\t\t[/'/, { token: 'string.quote', bracket: '@close', next: '@pop' }]\n\t\t],\n\n\t\twhitespace: [\n\t\t\t[/[ \\t\\r\\n]+/, 'white'],\n\t\t\t[/#.*\\\\$/, { token: 'comment', next: '@newlineComment' }],\n\t\t\t[/#.*(?!\\\\)$/, 'comment']\n\t\t],\n\n\t\tnewlineComment: [\n\t\t\t[/.*\\\\$/, 'comment'],\n\t\t\t[/.*(?!\\\\)$/, { token: 'comment', next: '@pop' }]\n\t\t],\n\n\t\tnestedVariable: [\n\t\t\t[/[^\\{\\}\\$]+/, 'type.identifier'],\n\t\t\t[/\\}/, { token: 'identifier', next: '@pop' }]\n\t\t],\n\n\t\tnestedCall: [\n\t\t\t[/\\[/, { token: '@brackets', next: '@nestedCall' }],\n\t\t\t[/\\]/, { token: '@brackets', next: '@pop' }],\n\t\t\t{ include: 'root' }\n\t\t],\n\n\t\tspecialFunc: [\n\t\t\t[/\"/, { token: 'string', next: '@dstring' }],\n\t\t\t[/'/, { token: 'string', next: '@sstring' }],\n\t\t\t[/\\S+/, { token: 'type', next: '@pop' }]\n\t\t]\n\t}\n}",
  "twig": "<languages.IMonarchLanguage>{\n\tdefaultToken: '',\n\ttokenPostfix: '',\n\tignoreCase: true,\n\n\tkeywords: [\n\t\t// (opening) tags\n\t\t'apply',\n\t\t'autoescape',\n\t\t'block',\n\t\t'deprecated',\n\t\t'do',\n\t\t'embed',\n\t\t'extends',\n\t\t'flush',\n\t\t'for',\n\t\t'from',\n\t\t'if',\n\t\t'import',\n\t\t'include',\n\t\t'macro',\n\t\t'sandbox',\n\t\t'set',\n\t\t'use',\n\t\t'verbatim',\n\t\t'with',\n\t\t// closing tags\n\t\t'endapply',\n\t\t'endautoescape',\n\t\t'endblock',\n\t\t'endembed',\n\t\t'endfor',\n\t\t'endif',\n\t\t'endmacro',\n\t\t'endsandbox',\n\t\t'endset',\n\t\t'endwith',\n\t\t// literals\n\t\t'true',\n\t\t'false'\n\t],\n\n\ttokenizer: {\n\t\troot: [\n\t\t\t// whitespace\n\t\t\t[/\\s+/],\n\n\t\t\t// Twig Tag Delimiters\n\t\t\t[/{#/, 'comment.twig', '@commentState'],\n\t\t\t[/{%[-~]?/, 'delimiter.twig', '@blockState'],\n\t\t\t[/{{[-~]?/, 'delimiter.twig', '@variableState'],\n\n\t\t\t// HTML\n\t\t\t[/<!DOCTYPE/, 'metatag.html', '@doctype'],\n\t\t\t[/<!--/, 'comment.html', '@comment'],\n\t\t\t[/(<)((?:[\\w\\-]+:)?[\\w\\-]+)(\\s*)(\\/>)/, ['delimiter.html', 'tag.html', '', 'delimiter.html']],\n\t\t\t[/(<)(script)/, ['delimiter.html', { token: 'tag.html', next: '@script' }]],\n\t\t\t[/(<)(style)/, ['delimiter.html', { token: 'tag.html', next: '@style' }]],\n\t\t\t[/(<)((?:[\\w\\-]+:)?[\\w\\-]+)/, ['delimiter.html', { token: 'tag.html', next: '@otherTag' }]],\n\t\t\t[/(<\\/)((?:[\\w\\-]+:)?[\\w\\-]+)/, ['delimiter.html', { token: 'tag.html', next: '@otherTag' }]],\n\t\t\t[/</, 'delimiter.html'],\n\t\t\t[/[^<{]+/] // text\n\t\t],\n\n\t\t/**\n\t\t * Comment Tag Handling\n\t\t */\n\t\tcommentState: [\n\t\t\t[/#}/, 'comment.twig', '@pop'],\n\t\t\t[/./, 'comment.twig']\n\t\t],\n\n\t\t/**\n\t\t * Block Tag Handling\n\t\t */\n\t\tblockState: [\n\t\t\t[/[-~]?%}/, 'delimiter.twig', '@pop'],\n\t\t\t// whitespace\n\t\t\t[/\\s+/],\n\t\t\t// verbatim\n\t\t\t// Unlike other blocks, verbatim ehas its own state\n\t\t\t// transition to ensure we mark its contents as strings.\n\t\t\t[\n\t\t\t\t/(verbatim)(\\s*)([-~]?%})/,\n\t\t\t\t['keyword.twig', '', { token: 'delimiter.twig', next: '@rawDataState' }]\n\t\t\t],\n\t\t\t{ include: 'expression' }\n\t\t],\n\n\t\trawDataState: [\n\t\t\t// endverbatim\n\t\t\t[\n\t\t\t\t/({%[-~]?)(\\s*)(endverbatim)(\\s*)([-~]?%})/,\n\t\t\t\t['delimiter.twig', '', 'keyword.twig', '', { token: 'delimiter.twig', next: '@popall' }]\n\t\t\t],\n\t\t\t[/./, 'string.twig']\n\t\t],\n\n\t\t/**\n\t\t * Variable Tag Handling\n\t\t */\n\t\tvariableState: [[/[-~]?}}/, 'delimiter.twig', '@pop'], { include: 'expression' }],\n\n\t\tstringState: [\n\t\t\t// closing double quoted string\n\t\t\t[/\"/, 'string.twig', '@pop'],\n\t\t\t// interpolation start\n\t\t\t[/#{\\s*/, 'string.twig', '@interpolationState'],\n\t\t\t// string part\n\t\t\t[/[^#\"\\\\]*(?:(?:\\\\.|#(?!\\{))[^#\"\\\\]*)*/, 'string.twig']\n\t\t],\n\n\t\tinterpolationState: [\n\t\t\t// interpolation end\n\t\t\t[/}/, 'string.twig', '@pop'],\n\t\t\t{ include: 'expression' }\n\t\t],\n\n\t\t/**\n\t\t * Expression Handling\n\t\t */\n\t\texpression: [\n\t\t\t// whitespace\n\t\t\t[/\\s+/],\n\t\t\t// operators - math\n\t\t\t[/\\+|-|\\/{1,2}|%|\\*{1,2}/, 'operators.twig'],\n\t\t\t// operators - logic\n\t\t\t[/(and|or|not|b-and|b-xor|b-or)(\\s+)/, ['operators.twig', '']],\n\t\t\t// operators - comparison (symbols)\n\t\t\t[/==|!=|<|>|>=|<=/, 'operators.twig'],\n\t\t\t// operators - comparison (words)\n\t\t\t[/(starts with|ends with|matches)(\\s+)/, ['operators.twig', '']],\n\t\t\t// operators - containment\n\t\t\t[/(in)(\\s+)/, ['operators.twig', '']],\n\t\t\t// operators - test\n\t\t\t[/(is)(\\s+)/, ['operators.twig', '']],\n\t\t\t// operators - misc\n\t\t\t[/\\||~|:|\\.{1,2}|\\?{1,2}/, 'operators.twig'],\n\t\t\t// names\n\t\t\t[\n\t\t\t\t/[^\\W\\d][\\w]*/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@keywords': 'keyword.twig',\n\t\t\t\t\t\t'@default': 'variable.twig'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t// numbers\n\t\t\t[/\\d+(\\.\\d+)?/, 'number.twig'],\n\t\t\t// punctuation\n\t\t\t[/\\(|\\)|\\[|\\]|{|}|,/, 'delimiter.twig'],\n\t\t\t// strings\n\t\t\t[/\"([^#\"\\\\]*(?:\\\\.[^#\"\\\\]*)*)\"|\\'([^\\'\\\\]*(?:\\\\.[^\\'\\\\]*)*)\\'/, 'string.twig'],\n\t\t\t// opening double quoted string\n\t\t\t[/\"/, 'string.twig', '@stringState'],\n\n\t\t\t// misc syntactic constructs\n\t\t\t// These are not operators per se, but for the purposes of lexical analysis we\n\t\t\t// can treat them as such.\n\t\t\t// arrow functions\n\t\t\t[/=>/, 'operators.twig'],\n\t\t\t// assignment\n\t\t\t[/=/, 'operators.twig']\n\t\t],\n\n\t\t/**\n\t\t * HTML\n\t\t */\n\t\tdoctype: [\n\t\t\t[/[^>]+/, 'metatag.content.html'],\n\t\t\t[/>/, 'metatag.html', '@pop']\n\t\t],\n\n\t\tcomment: [\n\t\t\t[/-->/, 'comment.html', '@pop'],\n\t\t\t[/[^-]+/, 'comment.content.html'],\n\t\t\t[/./, 'comment.content.html']\n\t\t],\n\n\t\totherTag: [\n\t\t\t[/\\/?>/, 'delimiter.html', '@pop'],\n\t\t\t[/\"([^\"]*)\"/, 'attribute.value.html'],\n\t\t\t[/'([^']*)'/, 'attribute.value.html'],\n\t\t\t[/[\\w\\-]+/, 'attribute.name.html'],\n\t\t\t[/=/, 'delimiter.html'],\n\t\t\t[/[ \\t\\r\\n]+/] // whitespace\n\t\t],\n\n\t\t// -- BEGIN <script> tags handling\n\n\t\t// After <script\n\t\tscript: [\n\t\t\t[/type/, 'attribute.name.html', '@scriptAfterType'],\n\t\t\t[/\"([^\"]*)\"/, 'attribute.value.html'],\n\t\t\t[/'([^']*)'/, 'attribute.value.html'],\n\t\t\t[/[\\w\\-]+/, 'attribute.name.html'],\n\t\t\t[/=/, 'delimiter.html'],\n\t\t\t[\n\t\t\t\t/>/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'delimiter.html',\n\t\t\t\t\tnext: '@scriptEmbedded',\n\t\t\t\t\tnextEmbedded: 'text/javascript'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/[ \\t\\r\\n]+/], // whitespace\n\t\t\t[\n\t\t\t\t/(<\\/)(script\\s*)(>)/,\n\t\t\t\t['delimiter.html', 'tag.html', { token: 'delimiter.html', next: '@pop' }]\n\t\t\t]\n\t\t],\n\n\t\t// After <script ... type\n\t\tscriptAfterType: [\n\t\t\t[/=/, 'delimiter.html', '@scriptAfterTypeEquals'],\n\t\t\t[\n\t\t\t\t/>/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'delimiter.html',\n\t\t\t\t\tnext: '@scriptEmbedded',\n\t\t\t\t\tnextEmbedded: 'text/javascript'\n\t\t\t\t}\n\t\t\t], // cover invalid e.g. <script type>\n\t\t\t[/[ \\t\\r\\n]+/], // whitespace\n\t\t\t[/<\\/script\\s*>/, { token: '@rematch', next: '@pop' }]\n\t\t],\n\n\t\t// After <script ... type =\n\t\tscriptAfterTypeEquals: [\n\t\t\t[\n\t\t\t\t/\"([^\"]*)\"/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'attribute.value.html',\n\t\t\t\t\tswitchTo: '@scriptWithCustomType.$1'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[\n\t\t\t\t/'([^']*)'/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'attribute.value.html',\n\t\t\t\t\tswitchTo: '@scriptWithCustomType.$1'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[\n\t\t\t\t/>/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'delimiter.html',\n\t\t\t\t\tnext: '@scriptEmbedded',\n\t\t\t\t\tnextEmbedded: 'text/javascript'\n\t\t\t\t}\n\t\t\t], // cover invalid e.g. <script type=>\n\t\t\t[/[ \\t\\r\\n]+/], // whitespace\n\t\t\t[/<\\/script\\s*>/, { token: '@rematch', next: '@pop' }]\n\t\t],\n\n\t\t// After <script ... type = $S2\n\t\tscriptWithCustomType: [\n\t\t\t[\n\t\t\t\t/>/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'delimiter.html',\n\t\t\t\t\tnext: '@scriptEmbedded.$S2',\n\t\t\t\t\tnextEmbedded: '$S2'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/\"([^\"]*)\"/, 'attribute.value.html'],\n\t\t\t[/'([^']*)'/, 'attribute.value.html'],\n\t\t\t[/[\\w\\-]+/, 'attribute.name.html'],\n\t\t\t[/=/, 'delimiter.html'],\n\t\t\t[/[ \\t\\r\\n]+/], // whitespace\n\t\t\t[/<\\/script\\s*>/, { token: '@rematch', next: '@pop' }]\n\t\t],\n\n\t\tscriptEmbedded: [\n\t\t\t[/<\\/script/, { token: '@rematch', next: '@pop', nextEmbedded: '@pop' }],\n\t\t\t[/[^<]+/, '']\n\t\t],\n\n\t\t// -- END <script> tags handling\n\n\t\t// -- BEGIN <style> tags handling\n\n\t\t// After <style\n\t\tstyle: [\n\t\t\t[/type/, 'attribute.name.html', '@styleAfterType'],\n\t\t\t[/\"([^\"]*)\"/, 'attribute.value.html'],\n\t\t\t[/'([^']*)'/, 'attribute.value.html'],\n\t\t\t[/[\\w\\-]+/, 'attribute.name.html'],\n\t\t\t[/=/, 'delimiter.html'],\n\t\t\t[\n\t\t\t\t/>/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'delimiter.html',\n\t\t\t\t\tnext: '@styleEmbedded',\n\t\t\t\t\tnextEmbedded: 'text/css'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/[ \\t\\r\\n]+/], // whitespace\n\t\t\t[\n\t\t\t\t/(<\\/)(style\\s*)(>)/,\n\t\t\t\t['delimiter.html', 'tag.html', { token: 'delimiter.html', next: '@pop' }]\n\t\t\t]\n\t\t],\n\n\t\t// After <style ... type\n\t\tstyleAfterType: [\n\t\t\t[/=/, 'delimiter.html', '@styleAfterTypeEquals'],\n\t\t\t[\n\t\t\t\t/>/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'delimiter.html',\n\t\t\t\t\tnext: '@styleEmbedded',\n\t\t\t\t\tnextEmbedded: 'text/css'\n\t\t\t\t}\n\t\t\t], // cover invalid e.g. <style type>\n\t\t\t[/[ \\t\\r\\n]+/], // whitespace\n\t\t\t[/<\\/style\\s*>/, { token: '@rematch', next: '@pop' }]\n\t\t],\n\n\t\t// After <style ... type =\n\t\tstyleAfterTypeEquals: [\n\t\t\t[\n\t\t\t\t/\"([^\"]*)\"/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'attribute.value.html',\n\t\t\t\t\tswitchTo: '@styleWithCustomType.$1'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[\n\t\t\t\t/'([^']*)'/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'attribute.value.html',\n\t\t\t\t\tswitchTo: '@styleWithCustomType.$1'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[\n\t\t\t\t/>/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'delimiter.html',\n\t\t\t\t\tnext: '@styleEmbedded',\n\t\t\t\t\tnextEmbedded: 'text/css'\n\t\t\t\t}\n\t\t\t], // cover invalid e.g. <style type=>\n\t\t\t[/[ \\t\\r\\n]+/], // whitespace\n\t\t\t[/<\\/style\\s*>/, { token: '@rematch', next: '@pop' }]\n\t\t],\n\n\t\t// After <style ... type = $S2\n\t\tstyleWithCustomType: [\n\t\t\t[\n\t\t\t\t/>/,\n\t\t\t\t{\n\t\t\t\t\ttoken: 'delimiter.html',\n\t\t\t\t\tnext: '@styleEmbedded.$S2',\n\t\t\t\t\tnextEmbedded: '$S2'\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/\"([^\"]*)\"/, 'attribute.value.html'],\n\t\t\t[/'([^']*)'/, 'attribute.value.html'],\n\t\t\t[/[\\w\\-]+/, 'attribute.name.html'],\n\t\t\t[/=/, 'delimiter.html'],\n\t\t\t[/[ \\t\\r\\n]+/], // whitespace\n\t\t\t[/<\\/style\\s*>/, { token: '@rematch', next: '@pop' }]\n\t\t],\n\n\t\tstyleEmbedded: [\n\t\t\t[/<\\/style/, { token: '@rematch', next: '@pop', nextEmbedded: '@pop' }],\n\t\t\t[/[^<]+/, '']\n\t\t]\n\t}\n}",
  "typescript": {
    "defaultToken": "invalid",
    "tokenPostfix": ".ts",
    "keywords": [
      "abstract",
      "any",
      "as",
      "asserts",
      "bigint",
      "boolean",
      "break",
      "case",
      "catch",
      "class",
      "continue",
      "const",
      "constructor",
      "debugger",
      "declare",
      "default",
      "delete",
      "do",
      "else",
      "enum",
      "export",
      "extends",
      "false",
      "finally",
      "for",
      "from",
      "function",
      "get",
      "if",
      "implements",
      "import",
      "in",
      "infer",
      "instanceof",
      "interface",
      "is",
      "keyof",
      "let",
      "module",
      "namespace",
      "never",
      "new",
      "null",
      "number",
      "object",
      "out",
      "package",
      "private",
      "protected",
      "public",
      "override",
      "readonly",
      "require",
      "global",
      "return",
      "satisfies",
      "set",
      "static",
      "string",
      "super",
      "switch",
      "symbol",
      "this",
      "throw",
      "true",
      "try",
      "type",
      "typeof",
      "undefined",
      "unique",
      "unknown",
      "var",
      "void",
      "while",
      "with",
      "yield",
      "async",
      "await",
      "of"
    ],
    "operators": [
      "<=",
      ">=",
      "==",
      "!=",
      "===",
      "!==",
      "=>",
      "+",
      "-",
      "**",
      "*",
      "/",
      "%",
      "++",
      "--",
      "<<",
      "</",
      ">>",
      ">>>",
      "&",
      "|",
      "^",
      "!",
      "~",
      "&&",
      "||",
      "??",
      "?",
      ":",
      "=",
      "+=",
      "-=",
      "*=",
      "**=",
      "/=",
      "%=",
      "<<=",
      ">>=",
      ">>>=",
      "&=",
      "|=",
      "^=",
      "@"
    ],
    "symbols": "/[=><!~?:&|+\\-*\\/\\^%]+/",
    "escapes": "/\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/",
    "digits": "/\\d+(_+\\d+)*/",
    "octaldigits": "/[0-7]+(_+[0-7]+)*/",
    "binarydigits": "/[0-1]+(_+[0-1]+)*/",
    "hexdigits": "/[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/",
    "regexpctl": "/[(){}\\[\\]\\$\\^|\\-*+?\\.]/",
    "regexpesc": "/\\\\(?:[bBdDfnrstvwWn0\\\\\\/]|@regexpctl|c[A-Z]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4})/",
    "tokenizer": {
      "root": [
        [
          "/[{}]/",
          "delimiter.bracket"
        ],
        {
          "include": "common"
        }
      ],
      "common": [
        [
          "/#?[a-z_$][\\w$]*/",
          {
            "cases": {
              "'@keywords'": "keyword",
              "'@default'": "identifier"
            }
          }
        ],
        [
          "/[A-Z][\\w\\$]*/",
          "type.identifier"
        ],
        {
          "include": "@whitespace"
        },
        [
          "/\\/(?=([^\\\\\\/]|\\\\.)+\\/([dgimsuy]*)(\\s*)(\\.|;|,|\\)|\\]|\\}|$))/",
          {
            "token": "regexp",
            "bracket": "@open",
            "next": "@regexp"
          }
        ],
        [
          "/[()\\[\\]]/",
          "@brackets"
        ],
        [
          "/[<>](?!@symbols)/",
          "@brackets"
        ],
        [
          "/!(?=([^=]|$))/",
          "delimiter"
        ],
        [
          "/@symbols/",
          {
            "cases": {
              "'@operators'": "delimiter",
              "'@default'": ""
            }
          }
        ],
        [
          "/(@digits)[eE]([\\-+]?(@digits))?/",
          "number.float"
        ],
        [
          "/(@digits)\\.(@digits)([eE][\\-+]?(@digits))?/",
          "number.float"
        ],
        [
          "/0[xX](@hexdigits)n?/",
          "number.hex"
        ],
        [
          "/0[oO]?(@octaldigits)n?/",
          "number.octal"
        ],
        [
          "/0[bB](@binarydigits)n?/",
          "number.binary"
        ],
        [
          "/(@digits)n?/",
          "number"
        ],
        [
          "/[;,.]/",
          "delimiter"
        ],
        [
          "/\"([^\"\\\\]|\\\\.)*$/",
          "string.invalid"
        ],
        [
          "/'([^'\\\\]|\\\\.)*$/",
          "string.invalid"
        ],
        [
          "/\"/",
          "string",
          "@string_double"
        ],
        [
          "/'/",
          "string",
          "@string_single"
        ],
        [
          "/`/",
          "string",
          "@string_backtick"
        ]
      ],
      "whitespace": [
        [
          "/[ \\t\\r\\n]+/",
          ""
        ],
        [
          "/\\/\\*\\*(?!\\/)/",
          "comment.doc",
          "@jsdoc"
        ],
        [
          "/\\/\\*/",
          "comment",
          "@comment"
        ],
        [
          "/\\/\\/.*$/",
          "comment"
        ]
      ],
      "comment": [
        [
          "/[^\\/*]+/",
          "comment"
        ],
        [
          "/\\*\\//",
          "comment",
          "@pop"
        ],
        [
          "/[\\/*]/",
          "comment"
        ]
      ],
      "jsdoc": [
        [
          "/[^\\/*]+/",
          "comment.doc"
        ],
        [
          "/\\*\\//",
          "comment.doc",
          "@pop"
        ],
        [
          "/[\\/*]/",
          "comment.doc"
        ]
      ],
      "regexp": [
        [
          "/(\\{)(\\d+(?:,\\d*)?)(\\})/",
          [
            "regexp.escape.control",
            "regexp.escape.control",
            "regexp.escape.control"
          ]
        ],
        [
          "/(\\[)(\\^?)(?=(?:[^\\]\\\\\\/]|\\\\.)+)/",
          [
            "regexp.escape.control",
            {
              "token": "regexp.escape.control",
              "next": "@regexrange"
            }
          ]
        ],
        [
          "/(\\()(\\?:|\\?=|\\?!)/",
          [
            "regexp.escape.control",
            "regexp.escape.control"
          ]
        ],
        [
          "/[()]/",
          "regexp.escape.control"
        ],
        [
          "/@regexpctl/",
          "regexp.escape.control"
        ],
        [
          "/[^\\\\\\/]/",
          "regexp"
        ],
        [
          "/@regexpesc/",
          "regexp.escape"
        ],
        [
          "/\\\\\\./",
          "regexp.invalid"
        ],
        [
          "/(\\/)([dgimsuy]*)/",
          [
            {
              "token": "regexp",
              "bracket": "@close",
              "next": "@pop"
            },
            "keyword.other"
          ]
        ]
      ],
      "regexrange": [
        [
          "/-/",
          "regexp.escape.control"
        ],
        [
          "/\\^/",
          "regexp.invalid"
        ],
        [
          "/@regexpesc/",
          "regexp.escape"
        ],
        [
          "/[^\\]]/",
          "regexp"
        ],
        [
          "/\\]/",
          {
            "token": "regexp.escape.control",
            "next": "@pop",
            "bracket": "@close"
          }
        ]
      ],
      "string_double": [
        [
          "/[^\\\\\"]+/",
          "string"
        ],
        [
          "/@escapes/",
          "string.escape"
        ],
        [
          "/\\\\./",
          "string.escape.invalid"
        ],
        [
          "/\"/",
          "string",
          "@pop"
        ]
      ],
      "string_single": [
        [
          "/[^\\\\']+/",
          "string"
        ],
        [
          "/@escapes/",
          "string.escape"
        ],
        [
          "/\\\\./",
          "string.escape.invalid"
        ],
        [
          "/'/",
          "string",
          "@pop"
        ]
      ],
      "string_backtick": [
        [
          "/\\$\\{/",
          {
            "token": "delimiter.bracket",
            "next": "@bracketCounting"
          }
        ],
        [
          "/[^\\\\`$]+/",
          "string"
        ],
        [
          "/@escapes/",
          "string.escape"
        ],
        [
          "/\\\\./",
          "string.escape.invalid"
        ],
        [
          "/`/",
          "string",
          "@pop"
        ]
      ],
      "bracketCounting": [
        [
          "/\\{/",
          "delimiter.bracket",
          "@bracketCounting"
        ],
        [
          "/\\}/",
          "delimiter.bracket",
          "@pop"
        ],
        {
          "include": "common"
        }
      ]
    }
  },
  "typespec": {
    "defaultToken": "",
    "tokenPostfix": ".tsp",
    "brackets": [
      {
        "open": "{",
        "close": "}",
        "token": "delimiter.curly"
      },
      {
        "open": "[",
        "close": "]",
        "token": "delimiter.square"
      },
      {
        "open": "(",
        "close": ")",
        "token": "delimiter.parenthesis"
      }
    ],
    "symbols": "/[=:;<>]+/",
    "keywords": "keywords",
    "namedLiterals": "namedLiterals",
    "escapes": "\\\\(u{[0-9A-Fa-f]+}|n|r|t|\\\\|\"|\\${)",
    "tokenizer": {
      "root": [
        {
          "include": "@expression"
        },
        {
          "include": "@whitespace"
        }
      ],
      "stringVerbatim": [
        {
          "regex": "(|\"|\"\")[^\"]",
          "action": {
            "token": "string"
          }
        },
        {
          "regex": "\"\"\"${notBefore(`\"`)}",
          "action": {
            "token": "string",
            "next": "@pop"
          }
        }
      ],
      "stringLiteral": [
        {
          "regex": "\\${",
          "action": {
            "token": "delimiter.bracket",
            "next": "@bracketCounting"
          }
        },
        {
          "regex": "[^\\\\\"$]+",
          "action": {
            "token": "string"
          }
        },
        {
          "regex": "@escapes",
          "action": {
            "token": "string.escape"
          }
        },
        {
          "regex": "\\\\.",
          "action": {
            "token": "string.escape.invalid"
          }
        },
        {
          "regex": "\"",
          "action": {
            "token": "string",
            "next": "@pop"
          }
        }
      ],
      "bracketCounting": [
        {
          "regex": "{",
          "action": {
            "token": "delimiter.bracket",
            "next": "@bracketCounting"
          }
        },
        {
          "regex": "}",
          "action": {
            "token": "delimiter.bracket",
            "next": "@pop"
          }
        },
        {
          "include": "@expression"
        }
      ],
      "comment": [
        {
          "regex": "[^\\*]+",
          "action": {
            "token": "comment"
          }
        },
        {
          "regex": "\\*\\/",
          "action": {
            "token": "comment",
            "next": "@pop"
          }
        },
        {
          "regex": "[\\/*]",
          "action": {
            "token": "comment"
          }
        }
      ],
      "whitespace": [
        {
          "regex": "nonCommentWs"
        },
        {
          "regex": "\\/\\*",
          "action": {
            "token": "comment",
            "next": "@comment"
          }
        },
        {
          "regex": "\\/\\/.*$",
          "action": {
            "token": "comment"
          }
        }
      ],
      "expression": [
        {
          "regex": "\"\"\"",
          "action": {
            "token": "string",
            "next": "@stringVerbatim"
          }
        },
        {
          "regex": "\"${notBefore(`\"\"`)}",
          "action": {
            "token": "string",
            "next": "@stringLiteral"
          }
        },
        {
          "regex": "numericLiteral",
          "action": {
            "token": "number"
          }
        },
        {
          "regex": "identifier",
          "action": {
            "cases": {
              "'@keywords'": {
                "token": "keyword"
              },
              "'@namedLiterals'": {
                "token": "keyword"
              },
              "'@default'": {
                "token": "identifier"
              }
            }
          }
        },
        {
          "regex": "@${identifier}",
          "action": {
            "token": "tag"
          }
        },
        {
          "regex": "#${directive}",
          "action": {
            "token": "directive"
          }
        }
      ]
    }
  },
  "vb": "<languages.IMonarchLanguage>{\n\tdefaultToken: '',\n\ttokenPostfix: '.vb',\n\tignoreCase: true,\n\n\tbrackets: [\n\t\t{ token: 'delimiter.bracket', open: '{', close: '}' },\n\t\t{ token: 'delimiter.array', open: '[', close: ']' },\n\t\t{ token: 'delimiter.parenthesis', open: '(', close: ')' },\n\t\t{ token: 'delimiter.angle', open: '<', close: '>' },\n\n\t\t// Special bracket statement pairs\n\t\t// according to https://msdn.microsoft.com/en-us/library/tsw2a11z.aspx\n\t\t{\n\t\t\ttoken: 'keyword.tag-addhandler',\n\t\t\topen: 'addhandler',\n\t\t\tclose: 'end addhandler'\n\t\t},\n\t\t{ token: 'keyword.tag-class', open: 'class', close: 'end class' },\n\t\t{ token: 'keyword.tag-enum', open: 'enum', close: 'end enum' },\n\t\t{ token: 'keyword.tag-event', open: 'event', close: 'end event' },\n\t\t{\n\t\t\ttoken: 'keyword.tag-function',\n\t\t\topen: 'function',\n\t\t\tclose: 'end function'\n\t\t},\n\t\t{ token: 'keyword.tag-get', open: 'get', close: 'end get' },\n\t\t{ token: 'keyword.tag-if', open: 'if', close: 'end if' },\n\t\t{\n\t\t\ttoken: 'keyword.tag-interface',\n\t\t\topen: 'interface',\n\t\t\tclose: 'end interface'\n\t\t},\n\t\t{ token: 'keyword.tag-module', open: 'module', close: 'end module' },\n\t\t{\n\t\t\ttoken: 'keyword.tag-namespace',\n\t\t\topen: 'namespace',\n\t\t\tclose: 'end namespace'\n\t\t},\n\t\t{\n\t\t\ttoken: 'keyword.tag-operator',\n\t\t\topen: 'operator',\n\t\t\tclose: 'end operator'\n\t\t},\n\t\t{\n\t\t\ttoken: 'keyword.tag-property',\n\t\t\topen: 'property',\n\t\t\tclose: 'end property'\n\t\t},\n\t\t{\n\t\t\ttoken: 'keyword.tag-raiseevent',\n\t\t\topen: 'raiseevent',\n\t\t\tclose: 'end raiseevent'\n\t\t},\n\t\t{\n\t\t\ttoken: 'keyword.tag-removehandler',\n\t\t\topen: 'removehandler',\n\t\t\tclose: 'end removehandler'\n\t\t},\n\t\t{ token: 'keyword.tag-select', open: 'select', close: 'end select' },\n\t\t{ token: 'keyword.tag-set', open: 'set', close: 'end set' },\n\t\t{\n\t\t\ttoken: 'keyword.tag-structure',\n\t\t\topen: 'structure',\n\t\t\tclose: 'end structure'\n\t\t},\n\t\t{ token: 'keyword.tag-sub', open: 'sub', close: 'end sub' },\n\t\t{\n\t\t\ttoken: 'keyword.tag-synclock',\n\t\t\topen: 'synclock',\n\t\t\tclose: 'end synclock'\n\t\t},\n\t\t{ token: 'keyword.tag-try', open: 'try', close: 'end try' },\n\t\t{ token: 'keyword.tag-while', open: 'while', close: 'end while' },\n\t\t{ token: 'keyword.tag-with', open: 'with', close: 'end with' },\n\n\t\t// Other pairs\n\t\t{ token: 'keyword.tag-using', open: 'using', close: 'end using' },\n\t\t{ token: 'keyword.tag-do', open: 'do', close: 'loop' },\n\t\t{ token: 'keyword.tag-for', open: 'for', close: 'next' }\n\t],\n\n\tkeywords: [\n\t\t'AddHandler',\n\t\t'AddressOf',\n\t\t'Alias',\n\t\t'And',\n\t\t'AndAlso',\n\t\t'As',\n\t\t'Async',\n\t\t'Boolean',\n\t\t'ByRef',\n\t\t'Byte',\n\t\t'ByVal',\n\t\t'Call',\n\t\t'Case',\n\t\t'Catch',\n\t\t'CBool',\n\t\t'CByte',\n\t\t'CChar',\n\t\t'CDate',\n\t\t'CDbl',\n\t\t'CDec',\n\t\t'Char',\n\t\t'CInt',\n\t\t'Class',\n\t\t'CLng',\n\t\t'CObj',\n\t\t'Const',\n\t\t'Continue',\n\t\t'CSByte',\n\t\t'CShort',\n\t\t'CSng',\n\t\t'CStr',\n\t\t'CType',\n\t\t'CUInt',\n\t\t'CULng',\n\t\t'CUShort',\n\t\t'Date',\n\t\t'Decimal',\n\t\t'Declare',\n\t\t'Default',\n\t\t'Delegate',\n\t\t'Dim',\n\t\t'DirectCast',\n\t\t'Do',\n\t\t'Double',\n\t\t'Each',\n\t\t'Else',\n\t\t'ElseIf',\n\t\t'End',\n\t\t'EndIf',\n\t\t'Enum',\n\t\t'Erase',\n\t\t'Error',\n\t\t'Event',\n\t\t'Exit',\n\t\t'False',\n\t\t'Finally',\n\t\t'For',\n\t\t'Friend',\n\t\t'Function',\n\t\t'Get',\n\t\t'GetType',\n\t\t'GetXMLNamespace',\n\t\t'Global',\n\t\t'GoSub',\n\t\t'GoTo',\n\t\t'Handles',\n\t\t'If',\n\t\t'Implements',\n\t\t'Imports',\n\t\t'In',\n\t\t'Inherits',\n\t\t'Integer',\n\t\t'Interface',\n\t\t'Is',\n\t\t'IsNot',\n\t\t'Let',\n\t\t'Lib',\n\t\t'Like',\n\t\t'Long',\n\t\t'Loop',\n\t\t'Me',\n\t\t'Mod',\n\t\t'Module',\n\t\t'MustInherit',\n\t\t'MustOverride',\n\t\t'MyBase',\n\t\t'MyClass',\n\t\t'NameOf',\n\t\t'Namespace',\n\t\t'Narrowing',\n\t\t'New',\n\t\t'Next',\n\t\t'Not',\n\t\t'Nothing',\n\t\t'NotInheritable',\n\t\t'NotOverridable',\n\t\t'Object',\n\t\t'Of',\n\t\t'On',\n\t\t'Operator',\n\t\t'Option',\n\t\t'Optional',\n\t\t'Or',\n\t\t'OrElse',\n\t\t'Out',\n\t\t'Overloads',\n\t\t'Overridable',\n\t\t'Overrides',\n\t\t'ParamArray',\n\t\t'Partial',\n\t\t'Private',\n\t\t'Property',\n\t\t'Protected',\n\t\t'Public',\n\t\t'RaiseEvent',\n\t\t'ReadOnly',\n\t\t'ReDim',\n\t\t'RemoveHandler',\n\t\t'Resume',\n\t\t'Return',\n\t\t'SByte',\n\t\t'Select',\n\t\t'Set',\n\t\t'Shadows',\n\t\t'Shared',\n\t\t'Short',\n\t\t'Single',\n\t\t'Static',\n\t\t'Step',\n\t\t'Stop',\n\t\t'String',\n\t\t'Structure',\n\t\t'Sub',\n\t\t'SyncLock',\n\t\t'Then',\n\t\t'Throw',\n\t\t'To',\n\t\t'True',\n\t\t'Try',\n\t\t'TryCast',\n\t\t'TypeOf',\n\t\t'UInteger',\n\t\t'ULong',\n\t\t'UShort',\n\t\t'Using',\n\t\t'Variant',\n\t\t'Wend',\n\t\t'When',\n\t\t'While',\n\t\t'Widening',\n\t\t'With',\n\t\t'WithEvents',\n\t\t'WriteOnly',\n\t\t'Xor'\n\t],\n\n\ttagwords: [\n\t\t'If',\n\t\t'Sub',\n\t\t'Select',\n\t\t'Try',\n\t\t'Class',\n\t\t'Enum',\n\t\t'Function',\n\t\t'Get',\n\t\t'Interface',\n\t\t'Module',\n\t\t'Namespace',\n\t\t'Operator',\n\t\t'Set',\n\t\t'Structure',\n\t\t'Using',\n\t\t'While',\n\t\t'With',\n\t\t'Do',\n\t\t'Loop',\n\t\t'For',\n\t\t'Next',\n\t\t'Property',\n\t\t'Continue',\n\t\t'AddHandler',\n\t\t'RemoveHandler',\n\t\t'Event',\n\t\t'RaiseEvent',\n\t\t'SyncLock'\n\t],\n\n\t// we include these common regular expressions\n\tsymbols: /[=><!~?;\\.,:&|+\\-*\\/\\^%]+/,\n\tintegersuffix: /U?[DI%L&S@]?/,\n\tfloatsuffix: /[R#F!]?/,\n\n\t// The main tokenizer for our languages\n\ttokenizer: {\n\t\troot: [\n\t\t\t// whitespace\n\t\t\t{ include: '@whitespace' },\n\n\t\t\t// special ending tag-words\n\t\t\t[/next(?!\\w)/, { token: 'keyword.tag-for' }],\n\t\t\t[/loop(?!\\w)/, { token: 'keyword.tag-do' }],\n\n\t\t\t// usual ending tags\n\t\t\t[\n\t\t\t\t/end\\s+(?!for|do)(addhandler|class|enum|event|function|get|if|interface|module|namespace|operator|property|raiseevent|removehandler|select|set|structure|sub|synclock|try|while|with|using)/,\n\t\t\t\t{ token: 'keyword.tag-$1' }\n\t\t\t],\n\n\t\t\t// identifiers, tagwords, and keywords\n\t\t\t[\n\t\t\t\t/[a-zA-Z_]\\w*/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@tagwords': { token: 'keyword.tag-$0' },\n\t\t\t\t\t\t'@keywords': { token: 'keyword.$0' },\n\t\t\t\t\t\t'@default': 'identifier'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t// Preprocessor directive\n\t\t\t[/^\\s*#\\w+/, 'keyword'],\n\n\t\t\t// numbers\n\t\t\t[/\\d*\\d+e([\\-+]?\\d+)?(@floatsuffix)/, 'number.float'],\n\t\t\t[/\\d*\\.\\d+(e[\\-+]?\\d+)?(@floatsuffix)/, 'number.float'],\n\t\t\t[/&H[0-9a-f]+(@integersuffix)/, 'number.hex'],\n\t\t\t[/&0[0-7]+(@integersuffix)/, 'number.octal'],\n\t\t\t[/\\d+(@integersuffix)/, 'number'],\n\n\t\t\t// date literal\n\t\t\t[/#.*#/, 'number'],\n\n\t\t\t// delimiters and operators\n\t\t\t[/[{}()\\[\\]]/, '@brackets'],\n\t\t\t[/@symbols/, 'delimiter'],\n\n\t\t\t// strings\n\t\t\t[/[\"\\u201c\\u201d]/, { token: 'string.quote', next: '@string' }]\n\t\t],\n\n\t\twhitespace: [\n\t\t\t[/[ \\t\\r\\n]+/, ''],\n\t\t\t[/(\\'|REM(?!\\w)).*$/, 'comment']\n\t\t],\n\n\t\tstring: [\n\t\t\t[/[^\"\\u201c\\u201d]+/, 'string'],\n\t\t\t[/[\"\\u201c\\u201d]{2}/, 'string.escape'],\n\t\t\t[/[\"\\u201c\\u201d]C?/, { token: 'string.quote', next: '@pop' }]\n\t\t]\n\t}\n}",
  "wgsl": "<languages.IMonarchLanguage>{\n\ttokenPostfix: '.wgsl',\n\tdefaultToken: 'invalid',\n\tunicode: true,\n\n\tatoms,\n\tkeywords,\n\treserved,\n\tpredeclared_enums,\n\tpredeclared_types,\n\tpredeclared_type_generators,\n\tpredeclared_type_aliases,\n\tpredeclared_intrinsics,\n\toperators,\n\n\tsymbols: /[!%&*+\\-\\.\\/:;<=>^|_~,]+/,\n\n\ttokenizer: {\n\t\troot: [\n\t\t\t[directive_re, 'keyword', '@directive'],\n\t\t\t[\n\t\t\t\t// Identifier-like things, but also include '_'\n\t\t\t\tident_re,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@atoms': predefined_token,\n\t\t\t\t\t\t'@keywords': 'keyword',\n\t\t\t\t\t\t'@reserved': 'invalid',\n\t\t\t\t\t\t'@predeclared_enums': predefined_token,\n\t\t\t\t\t\t'@predeclared_types': predefined_token,\n\t\t\t\t\t\t'@predeclared_type_generators': predefined_token,\n\t\t\t\t\t\t'@predeclared_type_aliases': predefined_token,\n\t\t\t\t\t\t'@predeclared_intrinsics': predefined_token,\n\t\t\t\t\t\t'@default': 'identifier'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t{ include: '@commentOrSpace' },\n\t\t\t{ include: '@numbers' },\n\n\t\t\t[/[{}()\\[\\]]/, '@brackets'],\n\t\t\t['@', 'annotation', '@attribute'],\n\t\t\t[\n\t\t\t\t/@symbols/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@operators': 'operator',\n\t\t\t\t\t\t'@default': 'delimiter'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t[/./, 'invalid']\n\t\t],\n\n\t\tcommentOrSpace: [\n\t\t\t[/\\s+/, 'white'],\n\t\t\t[/\\/\\*/, 'comment', '@blockComment'],\n\t\t\t[/\\/\\/.*$/, 'comment']\n\t\t],\n\n\t\tblockComment: [\n\t\t\t// Soak up uninteresting text: anything except * or /\n\t\t\t[/[^\\/*]+/, 'comment'],\n\t\t\t// Recognize the start of a nested block comment.\n\t\t\t[/\\/\\*/, 'comment', '@push'],\n\t\t\t// Recognize the end of a nested block comment.\n\t\t\t[/\\*\\//, 'comment', '@pop'],\n\t\t\t// Recognize insignificant * and /\n\t\t\t[/[\\/*]/, 'comment']\n\t\t],\n\n\t\tattribute: [\n\t\t\t// For things like '@fragment' both '@' and 'fragment'\n\t\t\t// are marked as annotations.  This should work even if\n\t\t\t// there are spaces or comments between the two tokens.\n\t\t\t{ include: '@commentOrSpace' },\n\t\t\t[/\\w+/, 'annotation', '@pop']\n\t\t],\n\n\t\tdirective: [\n\t\t\t// For things like 'enable f16;', 'enable' maps to 'meta'\n\t\t\t// and 'f16' maps to 'meta.tag'.\n\t\t\t{ include: '@commentOrSpace' },\n\t\t\t[/[()]/, '@brackets'],\n\t\t\t[/,/, 'delimiter'],\n\t\t\t[ident_re, 'meta.content'],\n\t\t\t[/;/, 'delimiter', '@pop']\n\t\t],\n\n\t\tnumbers: [\n\t\t\t// Decimal float literals\n\t\t\t// https://www.w3.org/TR/WGSL/#syntax-decimal_float_literal\n\t\t\t// 0, with type-specifying suffix.\n\t\t\t[/0[fh]/, 'number.float'],\n\t\t\t// Other decimal integer, with type-specifying suffix.\n\t\t\t[/[1-9][0-9]*[fh]/, 'number.float'],\n\t\t\t// Has decimal point, at least one digit after decimal.\n\t\t\t[/[0-9]*\\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/, 'number.float'],\n\t\t\t// Has decimal point, at least one digit before decimal.\n\t\t\t[/[0-9]+\\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/, 'number.float'],\n\t\t\t// Has at least one digit, and has an exponent.\n\t\t\t[/[0-9]+[eE][+-]?[0-9]+[fh]?/, 'number.float'],\n\n\t\t\t// Hex float literals\n\t\t\t// https://www.w3.org/TR/WGSL/#syntax-hex_float_literal\n\t\t\t[/0[xX][0-9a-fA-F]*\\.[0-9a-fA-F]+(?:[pP][+-]?[0-9]+[fh]?)?/, 'number.hex'],\n\t\t\t[/0[xX][0-9a-fA-F]+\\.[0-9a-fA-F]*(?:[pP][+-]?[0-9]+[fh]?)?/, 'number.hex'],\n\t\t\t[/0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/, 'number.hex'],\n\n\t\t\t// Hexadecimal integer literals\n\t\t\t// https://www.w3.org/TR/WGSL/#syntax-hex_int_literal\n\t\t\t[/0[xX][0-9a-fA-F]+[iu]?/, 'number.hex'],\n\n\t\t\t// Decimal integer literals\n\t\t\t// https://www.w3.org/TR/WGSL/#syntax-decimal_int_literal\n\t\t\t// We need two rules here because 01 is not valid.\n\t\t\t[/[1-9][0-9]*[iu]?/, 'number'],\n\t\t\t[/0[iu]?/, 'number'] // Must match last\n\t\t]\n\t}\n}",
  "xml": "<languages.IMonarchLanguage>{\n\tdefaultToken: '',\n\ttokenPostfix: '.xml',\n\n\tignoreCase: true,\n\n\t// Useful regular expressions\n\tqualifiedName: /(?:[\\w\\.\\-]+:)?[\\w\\.\\-]+/,\n\n\ttokenizer: {\n\t\troot: [\n\t\t\t[/[^<&]+/, ''],\n\n\t\t\t{ include: '@whitespace' },\n\n\t\t\t// Standard opening tag\n\t\t\t[/(<)(@qualifiedName)/, [{ token: 'delimiter' }, { token: 'tag', next: '@tag' }]],\n\n\t\t\t// Standard closing tag\n\t\t\t[\n\t\t\t\t/(<\\/)(@qualifiedName)(\\s*)(>)/,\n\t\t\t\t[{ token: 'delimiter' }, { token: 'tag' }, '', { token: 'delimiter' }]\n\t\t\t],\n\n\t\t\t// Meta tags - instruction\n\t\t\t[/(<\\?)(@qualifiedName)/, [{ token: 'delimiter' }, { token: 'metatag', next: '@tag' }]],\n\n\t\t\t// Meta tags - declaration\n\t\t\t[/(<\\!)(@qualifiedName)/, [{ token: 'delimiter' }, { token: 'metatag', next: '@tag' }]],\n\n\t\t\t// CDATA\n\t\t\t[/<\\!\\[CDATA\\[/, { token: 'delimiter.cdata', next: '@cdata' }],\n\n\t\t\t[/&\\w+;/, 'string.escape']\n\t\t],\n\n\t\tcdata: [\n\t\t\t[/[^\\]]+/, ''],\n\t\t\t[/\\]\\]>/, { token: 'delimiter.cdata', next: '@pop' }],\n\t\t\t[/\\]/, '']\n\t\t],\n\n\t\ttag: [\n\t\t\t[/[ \\t\\r\\n]+/, ''],\n\t\t\t[/(@qualifiedName)(\\s*=\\s*)(\"[^\"]*\"|'[^']*')/, ['attribute.name', '', 'attribute.value']],\n\t\t\t[\n\t\t\t\t/(@qualifiedName)(\\s*=\\s*)(\"[^\">?\\/]*|'[^'>?\\/]*)(?=[\\?\\/]\\>)/,\n\t\t\t\t['attribute.name', '', 'attribute.value']\n\t\t\t],\n\t\t\t[/(@qualifiedName)(\\s*=\\s*)(\"[^\">]*|'[^'>]*)/, ['attribute.name', '', 'attribute.value']],\n\t\t\t[/@qualifiedName/, 'attribute.name'],\n\t\t\t[/\\?>/, { token: 'delimiter', next: '@pop' }],\n\t\t\t[/(\\/)(>)/, [{ token: 'tag' }, { token: 'delimiter', next: '@pop' }]],\n\t\t\t[/>/, { token: 'delimiter', next: '@pop' }]\n\t\t],\n\n\t\twhitespace: [\n\t\t\t[/[ \\t\\r\\n]+/, ''],\n\t\t\t[/<!--/, { token: 'comment', next: '@comment' }]\n\t\t],\n\n\t\tcomment: [\n\t\t\t[/[^<\\-]+/, 'comment.content'],\n\t\t\t[/-->/, { token: 'comment', next: '@pop' }],\n\t\t\t[/<!--/, 'comment.content.invalid'],\n\t\t\t[/[<\\-]/, 'comment.content']\n\t\t]\n\t}\n}",
  "yaml": "<languages.IMonarchLanguage>{\n\ttokenPostfix: '.yaml',\n\n\tbrackets: [\n\t\t{ token: 'delimiter.bracket', open: '{', close: '}' },\n\t\t{ token: 'delimiter.square', open: '[', close: ']' }\n\t],\n\n\tkeywords: ['true', 'True', 'TRUE', 'false', 'False', 'FALSE', 'null', 'Null', 'Null', '~'],\n\n\tnumberInteger: /(?:0|[+-]?[0-9]+)/,\n\tnumberFloat: /(?:0|[+-]?[0-9]+)(?:\\.[0-9]+)?(?:e[-+][1-9][0-9]*)?/,\n\tnumberOctal: /0o[0-7]+/,\n\tnumberHex: /0x[0-9a-fA-F]+/,\n\tnumberInfinity: /[+-]?\\.(?:inf|Inf|INF)/,\n\tnumberNaN: /\\.(?:nan|Nan|NAN)/,\n\tnumberDate: /\\d{4}-\\d\\d-\\d\\d([Tt ]\\d\\d:\\d\\d:\\d\\d(\\.\\d+)?(( ?[+-]\\d\\d?(:\\d\\d)?)|Z)?)?/,\n\n\tescapes: /\\\\(?:[btnfr\\\\\"']|[0-7][0-7]?|[0-3][0-7]{2})/,\n\n\ttokenizer: {\n\t\troot: [\n\t\t\t{ include: '@whitespace' },\n\t\t\t{ include: '@comment' },\n\n\t\t\t// Directive\n\t\t\t[/%[^ ]+.*$/, 'meta.directive'],\n\n\t\t\t// Document Markers\n\t\t\t[/---/, 'operators.directivesEnd'],\n\t\t\t[/\\.{3}/, 'operators.documentEnd'],\n\n\t\t\t// Block Structure Indicators\n\t\t\t[/[-?:](?= )/, 'operators'],\n\n\t\t\t{ include: '@anchor' },\n\t\t\t{ include: '@tagHandle' },\n\t\t\t{ include: '@flowCollections' },\n\t\t\t{ include: '@blockStyle' },\n\n\t\t\t// Numbers\n\t\t\t[/@numberInteger(?![ \\t]*\\S+)/, 'number'],\n\t\t\t[/@numberFloat(?![ \\t]*\\S+)/, 'number.float'],\n\t\t\t[/@numberOctal(?![ \\t]*\\S+)/, 'number.octal'],\n\t\t\t[/@numberHex(?![ \\t]*\\S+)/, 'number.hex'],\n\t\t\t[/@numberInfinity(?![ \\t]*\\S+)/, 'number.infinity'],\n\t\t\t[/@numberNaN(?![ \\t]*\\S+)/, 'number.nan'],\n\t\t\t[/@numberDate(?![ \\t]*\\S+)/, 'number.date'],\n\n\t\t\t// Key:Value pair\n\t\t\t[/(\".*?\"|'.*?'|[^#'\"]*?)([ \\t]*)(:)( |$)/, ['type', 'white', 'operators', 'white']],\n\n\t\t\t{ include: '@flowScalars' },\n\n\t\t\t// String nodes\n\t\t\t[\n\t\t\t\t/.+?(?=(\\s+#|$))/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@keywords': 'keyword',\n\t\t\t\t\t\t'@default': 'string'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t],\n\n\t\t// Flow Collection: Flow Mapping\n\t\tobject: [\n\t\t\t{ include: '@whitespace' },\n\t\t\t{ include: '@comment' },\n\n\t\t\t// Flow Mapping termination\n\t\t\t[/\\}/, '@brackets', '@pop'],\n\n\t\t\t// Flow Mapping delimiter\n\t\t\t[/,/, 'delimiter.comma'],\n\n\t\t\t// Flow Mapping Key:Value delimiter\n\t\t\t[/:(?= )/, 'operators'],\n\n\t\t\t// Flow Mapping Key:Value key\n\t\t\t[/(?:\".*?\"|'.*?'|[^,\\{\\[]+?)(?=: )/, 'type'],\n\n\t\t\t// Start Flow Style\n\t\t\t{ include: '@flowCollections' },\n\t\t\t{ include: '@flowScalars' },\n\n\t\t\t// Scalar Data types\n\t\t\t{ include: '@tagHandle' },\n\t\t\t{ include: '@anchor' },\n\t\t\t{ include: '@flowNumber' },\n\n\t\t\t// Other value (keyword or string)\n\t\t\t[\n\t\t\t\t/[^\\},]+/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@keywords': 'keyword',\n\t\t\t\t\t\t'@default': 'string'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t],\n\n\t\t// Flow Collection: Flow Sequence\n\t\tarray: [\n\t\t\t{ include: '@whitespace' },\n\t\t\t{ include: '@comment' },\n\n\t\t\t// Flow Sequence termination\n\t\t\t[/\\]/, '@brackets', '@pop'],\n\n\t\t\t// Flow Sequence delimiter\n\t\t\t[/,/, 'delimiter.comma'],\n\n\t\t\t// Start Flow Style\n\t\t\t{ include: '@flowCollections' },\n\t\t\t{ include: '@flowScalars' },\n\n\t\t\t// Scalar Data types\n\t\t\t{ include: '@tagHandle' },\n\t\t\t{ include: '@anchor' },\n\t\t\t{ include: '@flowNumber' },\n\n\t\t\t// Other value (keyword or string)\n\t\t\t[\n\t\t\t\t/[^\\],]+/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@keywords': 'keyword',\n\t\t\t\t\t\t'@default': 'string'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t],\n\n\t\t// First line of a Block Style\n\t\tmultiString: [[/^( +).+$/, 'string', '@multiStringContinued.$1']],\n\n\t\t// Further lines of a Block Style\n\t\t//   Workaround for indentation detection\n\t\tmultiStringContinued: [\n\t\t\t[\n\t\t\t\t/^( *).+$/,\n\t\t\t\t{\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'$1==$S2': 'string',\n\t\t\t\t\t\t'@default': { token: '@rematch', next: '@popall' }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t],\n\n\t\twhitespace: [[/[ \\t\\r\\n]+/, 'white']],\n\n\t\t// Only line comments\n\t\tcomment: [[/#.*$/, 'comment']],\n\n\t\t// Start Flow Collections\n\t\tflowCollections: [\n\t\t\t[/\\[/, '@brackets', '@array'],\n\t\t\t[/\\{/, '@brackets', '@object']\n\t\t],\n\n\t\t// Start Flow Scalars (quoted strings)\n\t\tflowScalars: [\n\t\t\t[/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],\n\t\t\t[/'([^'\\\\]|\\\\.)*$/, 'string.invalid'],\n\t\t\t[/'[^']*'/, 'string'],\n\t\t\t[/\"/, 'string', '@doubleQuotedString']\n\t\t],\n\n\t\tdoubleQuotedString: [\n\t\t\t[/[^\\\\\"]+/, 'string'],\n\t\t\t[/@escapes/, 'string.escape'],\n\t\t\t[/\\\\./, 'string.escape.invalid'],\n\t\t\t[/\"/, 'string', '@pop']\n\t\t],\n\n\t\t// Start Block Scalar\n\t\tblockStyle: [[/[>|][0-9]*[+-]?$/, 'operators', '@multiString']],\n\n\t\t// Numbers in Flow Collections (terminate with ,]})\n\t\tflowNumber: [\n\t\t\t[/@numberInteger(?=[ \\t]*[,\\]\\}])/, 'number'],\n\t\t\t[/@numberFloat(?=[ \\t]*[,\\]\\}])/, 'number.float'],\n\t\t\t[/@numberOctal(?=[ \\t]*[,\\]\\}])/, 'number.octal'],\n\t\t\t[/@numberHex(?=[ \\t]*[,\\]\\}])/, 'number.hex'],\n\t\t\t[/@numberInfinity(?=[ \\t]*[,\\]\\}])/, 'number.infinity'],\n\t\t\t[/@numberNaN(?=[ \\t]*[,\\]\\}])/, 'number.nan'],\n\t\t\t[/@numberDate(?=[ \\t]*[,\\]\\}])/, 'number.date']\n\t\t],\n\n\t\ttagHandle: [[/\\![^ ]*/, 'tag']],\n\n\t\tanchor: [[/[&*][^ ]+/, 'namespace']]\n\t}\n}"
}